//---------------------------------------------------------------------------
//
//Version:            1.0
//Copyright:          
//Description:        internet controls
//Author:             Remi SPAAK
//Company:            NAUTILUS
//
//File Type:          Proxy class definitions.
// 
//File:               net.cpp
//
//Type Library:       SHDocVw
//Type Description:   Microsoft Internet Controls
//
//GUID:               {EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B}
//System:             WIN32
//Version:            1.0
//
//Code generated by ProxyWiz 1.0
//ProxyWiz Copyright Dr John Maddock 1997, all rights reserved.
//
//---------------------------------------------------------------------------


#include <owl/pch.h>
#pragma hrdstop
#include <ocf/pch.h>
#include <initguid.h>
#include <cstring.h>
#include <stdio.h>
#include <assert.h>
#include "nautilus\nsbrowse.h"
#include "nautilus\nsdocref.h"
#include "nautilus\nscompub.h"
#include "nautilus\nsresour.h"
#include "nautilus\nsbasimg.h"
#include "nautilus\nssuper.h"

const TString progIdIE = "Shell.Explorer"; // Controle OCX (Version independant progid)
GUID  guidIE = CLSID_NULL;
const TString progIdAppIE = "InternetExplorer.Application.1";
GUID  guidAppIE = CLSID_NULL;

/////////////////////////////////////////////////////////////////
// Interface IOleCommandTarget utilisée pour piloter l'impression
/////////////////////////////////////////////////////////////////

DEFINE_GUID(IID_IOleCommandTarget, 0xB722BCCBL, 0x4E68, 0x101B,
											  0xA2, 0xBC, 0, 0xAA, 0x00, 0x40, 0x47, 0x70);

typedef /* [public] */ 
enum __MIDL_IOleCommandTarget_0001
{	OLECMDF_SUPPORTED	= 0x1,
	OLECMDF_ENABLED	= 0x2,
	OLECMDF_LATCHED	= 0x4,
	OLECMDF_NINCHED	= 0x8
}	OLECMDF;

typedef struct  _tagOLECMD
{
    ULONG cmdID;
    DWORD cmdf;
}	OLECMD;

typedef struct  _tagOLECMDTEXT
{
    DWORD cmdtextf;
    ULONG cwActual;
    ULONG cwBuf;
    /* [size_is] */ wchar_t rgwz[ 1 ];
}	OLECMDTEXT;

typedef /* [public] */
enum __MIDL_IOleCommandTarget_0002
{	OLECMDTEXTF_NONE	= 0,
	OLECMDTEXTF_NAME	= 1,
	OLECMDTEXTF_STATUS	= 2
}	OLECMDTEXTF;

typedef /* [public] */
enum __MIDL_IOleCommandTarget_0003
{	OLECMDEXECOPT_DODEFAULT	= 0,
	OLECMDEXECOPT_PROMPTUSER	= 1,
	OLECMDEXECOPT_DONTPROMPTUSER	= 2,
	OLECMDEXECOPT_SHOWHELP	= 3
}	OLECMDEXECOPT;

/* OLECMDID_STOPDOWNLOAD is supported for QueryStatus Only */
typedef /* [public] */
enum __MIDL_IOleCommandTarget_0004
{	OLECMDID_OPEN	= 1,
	OLECMDID_NEW	= 2,
	OLECMDID_SAVE	= 3,
	OLECMDID_SAVEAS	= 4,
	OLECMDID_SAVECOPYAS	= 5,
	OLECMDID_PRINT	= 6,
	OLECMDID_PRINTPREVIEW	= 7,
	OLECMDID_PAGESETUP	= 8,
	OLECMDID_SPELL	= 9,
	OLECMDID_PROPERTIES	= 10,
	OLECMDID_CUT	= 11,
	OLECMDID_COPY	= 12,
	OLECMDID_PASTE	= 13,
	OLECMDID_PASTESPECIAL	= 14,
	OLECMDID_UNDO	= 15,
	OLECMDID_REDO	= 16,
	OLECMDID_SELECTALL	= 17,
	OLECMDID_CLEARSELECTION	= 18,
	OLECMDID_ZOOM	= 19,
	OLECMDID_GETZOOMRANGE	= 20,
	OLECMDID_UPDATECOMMANDS	= 21,
	OLECMDID_REFRESH	= 22,
	OLECMDID_STOP	= 23,
	OLECMDID_HIDETOOLBARS	= 24,
	OLECMDID_SETPROGRESSMAX	= 25,
	OLECMDID_SETPROGRESSPOS	= 26,
	OLECMDID_SETPROGRESSTEXT	= 27,
	OLECMDID_SETTITLE	= 28,
	OLECMDID_SETDOWNLOADSTATE	= 29,
	OLECMDID_STOPDOWNLOAD	= 30
}	OLECMDID;

// Definition de IOleCommandTarget à la sauce Borland

class _ICLASS IOleCommandTarget : public IUnknown
{
    public:
        virtual /* [input_sync] */ HRESULT _IFUNC QueryStatus(
            /* [unique][in] */ const GUID __RPC_FAR *pguidCmdGroup,
            /* [in] */ ULONG cCmds,
            /* [out][in][size_is] */ OLECMD __RPC_FAR prgCmds[  ],
            /* [unique][out][in] */ OLECMDTEXT __RPC_FAR *pCmdText) = 0;

        virtual HRESULT _IFUNC Exec(
            /* [unique][in] */ const GUID __RPC_FAR *pguidCmdGroup,
            /* [in] */ DWORD nCmdID,
            /* [in] */ DWORD nCmdexecopt,
            /* [unique][in] */ VARIANT __RPC_FAR *pvaIn,
            /* [unique][out][in] */ VARIANT __RPC_FAR *pvaOut) = 0;

};
typedef IOleCommandTarget far* LPOLECOMMANDTARGET;

////////////////////////////////////////////////////////////////////////////////////
// Classe TIWebBrowserProxy : Objet proxy utilisé avec le controle ocx IE WebBrowser
////////////////////////////////////////////////////////////////////////////////////

void TIWebBrowserProxy::GoBack()
{
	static TAutoDispId i_(this, 100);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::GoForward()
{
	static TAutoDispId i_(this, 101);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::GoHome()
{
	static TAutoDispId i_(this, 102);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::GoSearch()
{
	static TAutoDispId i_(this, 103);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::Navigate(TAutoString URL, TAutoVal* Flags, TAutoVal* TargetFrameName, TAutoVal* PostData, TAutoVal* Headers)
{
	static TAutoDispId i_(this, 104);
	TAutoArgs<5> a_;
	push_arg(a_[1], URL);
	push_arg(a_[2], Flags);
	push_arg(a_[3], TargetFrameName);
	push_arg(a_[4], PostData);
	push_arg(a_[5], Headers);
	Invoke(acMethod|acVoidRet, a_, i_, i_);
}

void TIWebBrowserProxy::Refresh()
{
	static TAutoDispId i_(this, -550);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::Refresh2(TAutoVal* Level)
{
	static TAutoDispId i_(this, 105);
	TAutoArgs<1> a_;
	push_arg(a_[1], Level);
	Invoke(acMethod|acVoidRet, a_, i_, i_);
}

void TIWebBrowserProxy::Stop()
{
	static TAutoDispId i_(this, 106);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

IDispatch* TIWebBrowserProxy::Application()
{
	static TAutoDispId i_(this, 200);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

IDispatch* TIWebBrowserProxy::Parent()
{
	static TAutoDispId i_(this, 201);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

IDispatch* TIWebBrowserProxy::Container()
{
	static TAutoDispId i_(this, 202);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

IDispatch* TIWebBrowserProxy::Document()
{
	static TAutoDispId i_(this, 203);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TBool TIWebBrowserProxy::TopLevelContainer()
{
	static TAutoDispId i_(this, 204);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TAutoString TIWebBrowserProxy::Type()
{
	static TAutoDispId i_(this, 205);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

long TIWebBrowserProxy::Left()
{
	static TAutoDispId i_(this, 206);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::Left(long arg0)
{
	static TAutoDispId i_(this, 206);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

long TIWebBrowserProxy::Top()
{
	static TAutoDispId i_(this, 207);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::Top(long arg0)
{
	static TAutoDispId i_(this, 207);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

long TIWebBrowserProxy::Width()
{
	static TAutoDispId i_(this, 208);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::Width(long arg0)
{
	static TAutoDispId i_(this, 208);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

long TIWebBrowserProxy::Height()
{
	static TAutoDispId i_(this, 209);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserProxy::Height(long arg0)
{
	static TAutoDispId i_(this, 209);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

TAutoString TIWebBrowserProxy::LocationName()
{
	static TAutoDispId i_(this, 210);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TAutoString TIWebBrowserProxy::LocationURL()
{
	static TAutoDispId i_(this, 211);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TBool TIWebBrowserProxy::Busy()
{
	static TAutoDispId i_(this, 212);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

/****************** classe TDWebBrowserEvents **************************/

DEFINE_RESPONSE_TABLE1(TDWebBrowserEvents, TOleDialog)
	EV_COMMAND(IDOK, CmOk),
   EV_COMMAND(IDCANCEL, CmCancel),
END_RESPONSE_TABLE;

TDWebBrowserEvents::TDWebBrowserEvents(TWindow* parent, TResId resId, TModule* module) : TOleDialog(parent, resId, module)
{
}

TDWebBrowserEvents::~TDWebBrowserEvents()
{
}

void TDWebBrowserEvents::SetupWindow()
{
	TOleDialog::SetupWindow();

   ::CLSIDFromProgID(TString(progIdIE), &guidIE);

   // Retrieve TOcControl objects representing the respective OCX
   // of our dialog..
   //
	Ocx = GetOcControlOfOCX(guidIE);  //   IID_CoInternetExplorer
	Control.Bind(Ocx->GetCtlDispatch());
}

void TDWebBrowserEvents::BeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Cancel)
{
	// !! PostData est un TAutoVal *
}

void TDWebBrowserEvents::NavigateComplete(TAutoString URL)
{
}

void TDWebBrowserEvents::StatusTextChange(TAutoString Text)
{
}

void TDWebBrowserEvents::ProgressChange(long Progress, long ProgressMax)
{
}

void TDWebBrowserEvents::DownloadComplete()
{
}

void TDWebBrowserEvents::CommandStateChange(long Command, TBool Enable)
{
}

void TDWebBrowserEvents::DownloadBegin()
{
}

void TDWebBrowserEvents::NewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Processed)
{
	// !! PostData est un TAutoVal *
}

void TDWebBrowserEvents::TitleChange(TAutoString Text)
{
}

void TDWebBrowserEvents::FrameBeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Cancel)
{
	// !! PostData est un TAutoVal *
}

void TDWebBrowserEvents::FrameNavigateComplete(TAutoString URL)
{
}

void TDWebBrowserEvents::FrameNewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Processed)
{
	// !! PostData est un TAutoVal *
}

void TDWebBrowserEvents::Quit(TBool* Cancel)
{
}

void TDWebBrowserEvents::WindowMove()
{
}

void TDWebBrowserEvents::WindowResize()
{
}

void TDWebBrowserEvents::WindowActivate()
{
}

void TDWebBrowserEvents::PropertyChange(TAutoString szProperty)
{
}

bool TDWebBrowserEvents::EvOcCtrlCustomEvent(TCtrlCustomEvent* pev)
{
	switch(pev->Args->DispId)
	{
	case 100:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		TAutoVal arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		BeforeNavigate(arg0, arg1, arg2, arg3, arg4, arg5);
		break;
	}
	case 101:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		NavigateComplete(arg0);
		break;
	}
	case 102:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		StatusTextChange(arg0);
		break;
	}
	case 108:
	{
		long arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		ProgressChange(arg0, arg1);
		break;
	}
	case 104:
	{
		DownloadComplete();
		break;
	}
	case 105:
	{
		long arg0 = pev->Args->operator[](0);
		TBool arg1 = pev->Args->operator[](1);
		CommandStateChange(arg0, arg1);
		break;
	}
	case 106:
	{
		DownloadBegin();
		break;
	}
	case 107:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		TAutoVal arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		NewWindow(arg0, arg1, arg2, arg3, arg4, arg5);
		break;
	}
	case 113:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		TitleChange(arg0);
		break;
	}
	case 200:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		TAutoVal arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		FrameBeforeNavigate(arg0, arg1, arg2, arg3, arg4, arg5);
		break;
	}
	case 201:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		FrameNavigateComplete(arg0);
		break;
	}
	case 204:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		TAutoVal arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		FrameNewWindow(arg0, arg1, arg2, arg3, arg4, arg5);
		break;
	}
	case 103:
	{
		TBool* arg0 = pev->Args->operator[](0);
		Quit(arg0);
		break;
	}
	case 109:
	{
		WindowMove();
		break;
	}
	case 110:
	{
		WindowResize();
		break;
	}
	case 111:
	{
		WindowActivate();
		break;
	}
	case 112:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		PropertyChange(arg0);
		break;
	}
	}
	return true;
}

void TDWebBrowserEvents::CmOk()
{
	if (Control.IsBound())
   {
   	Control.Unbind(false);
   }

   TOleDialog::CmOk();
}

void TDWebBrowserEvents::CmCancel()
{
	if (Control.IsBound())
   {
   	Control.Unbind(false);
   }

   TOleDialog::CmCancel();
}

/****************** classe TDIECompo **************************/

DEFINE_RESPONSE_TABLE1(TDIECompo, TOleDialog)
	EV_COMMAND(IDOK, CmOk),
   EV_COMMAND(IDCANCEL, CmCancel),
END_RESPONSE_TABLE;

TDIECompo::TDIECompo(TWindow* parent, NSRefDocument* pDocMaitre, TModule* module) :
	TOleDialog(parent,IDD_IEBROWSER,module)
{
	fichCompo = "";
   pDocBrut = pDocMaitre;	// Warning ne pas deleter
}

TDIECompo::~TDIECompo()
{
}

void TDIECompo::SetupWindow()
{
	TOleDialog::SetupWindow();

   ::CLSIDFromProgID(progIdIE, &guidIE);

   // Retrieve TOcControl objects representing the respective OCX
   // of our dialog..
   //
	Ocx = GetOcControlOfOCX(guidIE);  //   IID_CoInternetExplorer
	Control.Bind(Ocx->GetCtlDispatch());
}

bool TDIECompo::Message(const char far *texte)
{
	THandle hDialog;
   int retVal;

	hDialog = GetHandle();

   retVal = ::MessageBox(hDialog,texte,"Message",MB_OKCANCEL);

   if (retVal == IDOK)
   	return true;
   else
   	return false;
}

void TDIECompo::Navigate(string url, bool kill)
{
	TAutoVal flags(0), target(0), data(0), headers(0);
   TAutoString URL;

	if (kill)
   	fichCompo = pNSSuperviseur->PathName("SHTM") + url;

   url = pNSSuperviseur->PathName("USRV") + url;
   URL = (TAutoString) url;
   Control.Navigate(URL,&flags,&target,&data,&headers);
}

void TDIECompo::CmOk()
{
   // Referencement du nouveau fichier Html (s'il y a lieu)
   if (pDocBrut->pHtmlInfo) // il existe deja un fichier composé
   {
   	if (pDocBrut->sNomDocHtml != "") // ce fichier change de nom
      {
      	// on le référence sous son nouveau nom
      	if (!pDocBrut->ReferencerHtml("HDHTM", pDocBrut->sNomDocHtml, pDocBrut->sTemplate))
         {
         	::MessageBox(GetHandle(),"Pb : le fichier HTML n'a pas pu etre référencé.",0,MB_OK);
         }
      }
      else // le fichier ne change pas de nom, on met à jour la template de composition
      {
      	if (!pDocBrut->MajTemplate())
         {
         	::MessageBox(GetHandle(),"Pb : la template du fichier HTML n'a pas pu etre mise à jour.",0,MB_OK);
         }
      }
   }
   else // cas nouvelle composition : on garde le nom du document brut
   {
   	if (!pDocBrut->ReferencerHtml("HDHTM", string(pDocBrut->pDocInfo->pDonnees->nom), pDocBrut->sTemplate))
      {
        	::MessageBox(GetHandle(),"Pb : le fichier HTML n'a pas pu etre référencé.",0,MB_OK);
      }
   }

   // mise à jour de la base des composants Html

   if (!pDocBrut->DetruireComposants())
   {
   	::MessageBox(GetHandle(),"Pb à la destruction des composants html.",0,MB_OK);
   }

	if (!pDocBrut->EcrireComposants())
   {
   	::MessageBox(GetHandle(),"Pb à la mise à jour des composants html.",0,MB_OK);
   }

   // destruction du fichier de composition

   if (fichCompo != "")
   {
   	if (!DeleteFile(fichCompo.c_str()))
   		::MessageBox(GetHandle(),"Pb de destruction du fichier de composition",0,MB_OK);
   }

	if (Control.IsBound())
   {
   	Control.Unbind(false);
   }

   TOleDialog::CmOk();
}

void TDIECompo::CmCancel()
{
	NSBaseImages* pBase;

	// pas de référencement ni de mise à jour de la base des composants Html

   // destruction de la base d'images (cad des fichiers temporaires)

   if (pDocBrut->sBaseImages != "")		// si la base a été initialisée
   {
   	pBase = new NSBaseImages(pDocBrut->sBaseImages,pNSSuperviseur->PathName("SIMG"));
      pBase->lire();
      pBase->detruire();
      delete pBase;
   }

	// destruction du fichier de composition

   if (fichCompo != "")
   {
   	if (!DeleteFile(fichCompo.c_str()))
   		::MessageBox(GetHandle(),"Pb de destruction du fichier de composition",0,MB_OK);
   }

	if (Control.IsBound())
   {
   	Control.Unbind(false);
   }

   TOleDialog::CmCancel();
}

/****************** classe TDIEPubli **************************/

DEFINE_RESPONSE_TABLE1(TDIEPubli, TOleDialog)
	EV_COMMAND(IDOK, CmOk),
   EV_COMMAND(IDCANCEL, CmCancel),
END_RESPONSE_TABLE;

TDIEPubli::TDIEPubli(TWindow* parent, NSPublication* pPub, TModule* module) :
	TOleDialog(parent,IDD_IEBROWSER,module)
{
	pPubli = pPub;
}

TDIEPubli::~TDIEPubli()
{
}

void TDIEPubli::SetupWindow()
{
	TOleDialog::SetupWindow();

   ::CLSIDFromProgID(progIdIE, &guidIE);

   // Retrieve TOcControl objects representing the respective OCX
   // of our dialog..
   //
	Ocx = GetOcControlOfOCX(guidIE);  //   IID_CoInternetExplorer
	Control.Bind(Ocx->GetCtlDispatch());
   // pPubli->InstalleHook();
}

bool TDIEPubli::Message(const char far *texte)
{
	THandle hDialog;
   int retVal;

	hDialog = GetHandle();

   retVal = ::MessageBox(hDialog,texte,"Message",MB_OKCANCEL);

   if (retVal == IDOK)
   	return true;
   else
   	return false;
}

void TDIEPubli::Print()
{
   IDispatch* doc = Control.Document();
   IOleCommandTarget* target = NULL;
   bool bFinish;

   assert(doc);
   doc->QueryInterface(IID_IOleCommandTarget, (LPVOID far*) &target);
   assert(target);
   doc->Release();
   target->Exec(NULL,OLECMDID_PRINT,OLECMDEXECOPT_PROMPTUSER,NULL,NULL);
   target->Release();
   // On détruit les images copiées dans le répertoire du serveur
   pPubli->DeleteImages();
   // On envoie le Navigate du corresp suivant ou fin (bFinish == true)
   bFinish = pPubli->ImprimerSuivant();

   if (bFinish) // on envoie un return pour déclencher CmOk
   {
   	// On doit envoyer un SetFocus car le Navigate fait perdre
      // le focus au dialogue.
      SetFocus();
   	keybd_event(VK_RETURN,0,0,0);
   	keybd_event(VK_RETURN,0,KEYEVENTF_KEYUP,0);
   }
}

void TDIEPubli::Navigate(string url)
{
	TAutoVal flags(navNoReadFromCache | navNoWriteToCache);
   TAutoVal target(0);
   TAutoVal data(0);
   TAutoVal headers(0);
   TAutoString URL;

   url = pNSSuperviseur->PathName("USRV") + url;
   URL = (TAutoString) url;
   Control.Navigate(URL,&flags,&target,&data,&headers);
}

bool TDIEPubli::IsBusy()
{
	TBool bBusy;

   bBusy = Control.Busy();
   return static_cast<bool>(bBusy);
}

void TDIEPubli::NavigateComplete(TAutoString URL)
{
	Message("Navigate Complete");
	Print();
}

void TDIEPubli::ProgressChange(long Progress, long ProgressMax)
{
	if (Progress == -1)
   {
   	Message("Progress == -1");
   }
}

void TDIEPubli::CmOk()
{
	// pPubli->LibereHook();
   pPubli->DeleteFichPubli();

	if (Control.IsBound())
   {
   	Control.Unbind(false);
   }

   TOleDialog::CmOk();
}

void TDIEPubli::CmCancel()
{
	pPubli->LibereHook();
	pPubli->DeleteFichPubli();

	if (Control.IsBound())
   {
   	Control.Unbind(false);
   }

   TOleDialog::CmCancel();
}

void TDIEPubli::BeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Cancel)
{
	// !! PostData est un TAutoVal *
}

void TDIEPubli::StatusTextChange(TAutoString Text)
{
}

void TDIEPubli::DownloadComplete()
{
}

void TDIEPubli::CommandStateChange(long Command, TBool Enable)
{
}

void TDIEPubli::DownloadBegin()
{
}

void TDIEPubli::NewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Processed)
{
	// !! PostData est un TAutoVal *
}

void TDIEPubli::TitleChange(TAutoString Text)
{
}

void TDIEPubli::FrameBeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Cancel)
{
	// !! PostData est un TAutoVal *
}

void TDIEPubli::FrameNavigateComplete(TAutoString URL)
{
}

void TDIEPubli::FrameNewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Processed)
{
	// !! PostData est un TAutoVal *
}

void TDIEPubli::Quit(TBool* Cancel)
{
}

void TDIEPubli::WindowMove()
{
}

void TDIEPubli::WindowResize()
{
}

void TDIEPubli::WindowActivate()
{
}

void TDIEPubli::PropertyChange(TAutoString szProperty)
{
}

bool TDIEPubli::EvOcCtrlCustomEvent(TCtrlCustomEvent* pev)
{
	switch(pev->Args->DispId)
	{
	case 100:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		TAutoVal arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		BeforeNavigate(arg0, arg1, arg2, arg3, arg4, arg5);
		break;
	}
	case 101:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		NavigateComplete(arg0);
		break;
	}
	case 102:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		StatusTextChange(arg0);
		break;
	}
	case 108:
	{
		long arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		ProgressChange(arg0, arg1);
		break;
	}
	case 104:
	{
		DownloadComplete();
		break;
	}
	case 105:
	{
		long arg0 = pev->Args->operator[](0);
		TBool arg1 = pev->Args->operator[](1);
		CommandStateChange(arg0, arg1);
		break;
	}
	case 106:
	{
		DownloadBegin();
		break;
	}
	case 107:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		TAutoVal arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		NewWindow(arg0, arg1, arg2, arg3, arg4, arg5);
		break;
	}
	case 113:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		TitleChange(arg0);
		break;
	}
	case 200:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		TAutoVal arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		FrameBeforeNavigate(arg0, arg1, arg2, arg3, arg4, arg5);
		break;
	}
	case 201:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		FrameNavigateComplete(arg0);
		break;
	}
	case 204:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		TAutoVal arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		FrameNewWindow(arg0, arg1, arg2, arg3, arg4, arg5);
		break;
	}
	case 103:
	{
		TBool* arg0 = pev->Args->operator[](0);
		Quit(arg0);
		break;
	}
	case 109:
	{
		WindowMove();
		break;
	}
	case 110:
	{
		WindowResize();
		break;
	}
	case 111:
	{
		WindowActivate();
		break;
	}
	case 112:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		PropertyChange(arg0);
		break;
	}
	}
	return true;
}

/****************** classe TIWebBrowserAppProxy **************************/

void TIWebBrowserAppProxy::GoBack()
{
	static TAutoDispId i_(this, 100);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::GoForward()
{
	static TAutoDispId i_(this, 101);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::GoHome()
{
	static TAutoDispId i_(this, 102);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::GoSearch()
{
	static TAutoDispId i_(this, 103);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Navigate(TAutoString URL, TAutoVal* Flags, TAutoVal* TargetFrameName, TAutoVal* PostData, TAutoVal* Headers)
{
	static TAutoDispId i_(this, 104);
	TAutoArgs<5> a_;
	push_arg(a_[1], URL);
	push_arg(a_[2], Flags);
	push_arg(a_[3], TargetFrameName);
	push_arg(a_[4], PostData);
	push_arg(a_[5], Headers);
	Invoke(acMethod|acVoidRet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Refresh()
{
	static TAutoDispId i_(this, -550);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Refresh2(TAutoVal* Level)
{
	static TAutoDispId i_(this, 105);
	TAutoArgs<1> a_;
	push_arg(a_[1], Level);
	Invoke(acMethod|acVoidRet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Stop()
{
	static TAutoDispId i_(this, 106);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

IDispatch* TIWebBrowserAppProxy::Application()
{
	static TAutoDispId i_(this, 200);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

IDispatch* TIWebBrowserAppProxy::Parent()
{
	static TAutoDispId i_(this, 201);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

IDispatch* TIWebBrowserAppProxy::Container()
{
	static TAutoDispId i_(this, 202);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

IDispatch* TIWebBrowserAppProxy::Document()
{
	static TAutoDispId i_(this, 203);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TBool TIWebBrowserAppProxy::TopLevelContainer()
{
	static TAutoDispId i_(this, 204);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TAutoString TIWebBrowserAppProxy::Type()
{
	static TAutoDispId i_(this, 205);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

long TIWebBrowserAppProxy::Left()
{
	static TAutoDispId i_(this, 206);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Left(long arg0)
{
	static TAutoDispId i_(this, 206);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

long TIWebBrowserAppProxy::Top()
{
	static TAutoDispId i_(this, 207);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Top(long arg0)
{
	static TAutoDispId i_(this, 207);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

long TIWebBrowserAppProxy::Width()
{
	static TAutoDispId i_(this, 208);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Width(long arg0)
{
	static TAutoDispId i_(this, 208);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

long TIWebBrowserAppProxy::Height()
{
	static TAutoDispId i_(this, 209);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Height(long arg0)
{
	static TAutoDispId i_(this, 209);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

TAutoString TIWebBrowserAppProxy::LocationName()
{
	static TAutoDispId i_(this, 210);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TAutoString TIWebBrowserAppProxy::LocationURL()
{
	static TAutoDispId i_(this, 211);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TBool TIWebBrowserAppProxy::Busy()
{
	static TAutoDispId i_(this, 212);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Quit()
{
	static TAutoDispId i_(this, 300);
	TAutoArgs<0> a_;
	Invoke(acMethod|acVoidRet|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::ClientToWindow(int* pcx, int* pcy)
{
	static TAutoDispId i_(this, 301);
	TAutoArgs<2> a_;
	push_arg(a_[1], pcx);
	push_arg(a_[2], pcy);
	Invoke(acMethod|acVoidRet, a_, i_, i_);
}

void TIWebBrowserAppProxy::PutProperty(TAutoString szProperty, TAutoVal vtValue)
{
	static TAutoDispId i_(this, 302);
	TAutoArgs<2> a_;
	push_arg(a_[1], szProperty);
	push_arg(a_[2], vtValue);
	Invoke(acMethod|acVoidRet, a_, i_, i_);
}

TAutoVal TIWebBrowserAppProxy::GetProperty(TAutoString szProperty)
{
	static TAutoDispId i_(this, 303);
	TAutoArgs<1> a_;
	push_arg(a_[1], szProperty);
	return Invoke(acMethod, a_, i_, i_);
}

TAutoString TIWebBrowserAppProxy::Name()
{
	static TAutoDispId i_(this, (long)0);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

long TIWebBrowserAppProxy::HWND()
{
	static TAutoDispId i_(this, -515);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TAutoString TIWebBrowserAppProxy::FullName()
{
	static TAutoDispId i_(this, 400);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TAutoString TIWebBrowserAppProxy::Path()
{
	static TAutoDispId i_(this, 401);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

TBool TIWebBrowserAppProxy::Visible()
{
	static TAutoDispId i_(this, 402);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::Visible(TBool arg0)
{
	static TAutoDispId i_(this, 402);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

TBool TIWebBrowserAppProxy::StatusBar()
{
	static TAutoDispId i_(this, 403);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::StatusBar(TBool arg0)
{
	static TAutoDispId i_(this, 403);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

TAutoString TIWebBrowserAppProxy::StatusText()
{
	static TAutoDispId i_(this, 404);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::StatusText(TAutoString arg0)
{
	static TAutoDispId i_(this, 404);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

int TIWebBrowserAppProxy::ToolBar()
{
	static TAutoDispId i_(this, 405);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::ToolBar(int arg0)
{
	static TAutoDispId i_(this, 405);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

TBool TIWebBrowserAppProxy::MenuBar()
{
	static TAutoDispId i_(this, 406);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::MenuBar(TBool arg0)
{
	static TAutoDispId i_(this, 406);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

TBool TIWebBrowserAppProxy::FullScreen()
{
	static TAutoDispId i_(this, 407);
	TAutoArgs<0> a_;
	return Invoke(acMethod|acPropGet, a_, i_, i_);
}

void TIWebBrowserAppProxy::FullScreen(TBool arg0)
{
	static TAutoDispId i_(this, 407);
	TAutoArgs<0> a_;
	push_arg(a_[0], arg0);
	Invoke(acMethod|acVoidRet|acPropSet, a_, i_, i_);
}

/*********************** classe TDWebBrowserAppEvents ***********************************/

DEFINE_RESPONSE_TABLE1(TDWebBrowserAppEvents, TOleWindow)
	EV_MESSAGE(WM_OCEVENT,EvOcEvent),
END_RESPONSE_TABLE;


TDWebBrowserAppEvents::TDWebBrowserAppEvents(TWindow* parent, TModule* module) : TOleWindow(parent, module)
{
}

TDWebBrowserAppEvents::~TDWebBrowserAppEvents()
{
}

void TDWebBrowserAppEvents::SetupWindow()
{
	TOleWindow::SetupWindow();

	// Ocx = TOleWindow::InsertControl(TString(progIdIE));
	// Control.Bind(Ocx->GetCtlDispatch());

	Control.Bind(progIdAppIE);
   Control.Visible(true);
}

void TDWebBrowserAppEvents::BeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal* PostData, TAutoString Headers, TBool* Cancel)
{
}

void TDWebBrowserAppEvents::NavigateComplete(TAutoString URL)
{
   HWND hControl;

	hControl = (HWND) Control.HWND();

   ::MessageBox(hControl,"NavigateComplete","Message",MB_OK);
}

void TDWebBrowserAppEvents::StatusTextChange(TAutoString Text)
{
}

void TDWebBrowserAppEvents::ProgressChange(long Progress, long ProgressMax)
{
}

void TDWebBrowserAppEvents::DownloadComplete()
{
}

void TDWebBrowserAppEvents::CommandStateChange(long Command, TBool Enable)
{
}

void TDWebBrowserAppEvents::DownloadBegin()
{
}

void TDWebBrowserAppEvents::NewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal* PostData, TAutoString Headers, TBool* Processed)
{
}

void TDWebBrowserAppEvents::TitleChange(TAutoString Text)
{
}

void TDWebBrowserAppEvents::FrameBeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal* PostData, TAutoString Headers, TBool* Cancel)
{
}

void TDWebBrowserAppEvents::FrameNavigateComplete(TAutoString URL)
{
}

void TDWebBrowserAppEvents::FrameNewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal* PostData, TAutoString Headers, TBool* Processed)
{
}

void TDWebBrowserAppEvents::Quit(TBool* Cancel)
{
}

void TDWebBrowserAppEvents::WindowMove()
{
}

void TDWebBrowserAppEvents::WindowResize()
{
}

void TDWebBrowserAppEvents::WindowActivate()
{
}

void TDWebBrowserAppEvents::PropertyChange(TAutoString szProperty)
{
}

bool TDWebBrowserAppEvents::EvOcCtrlCustomEvent(TCtrlCustomEvent* pev)
{
	switch(pev->Args->DispId)
	{
	case 100:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		long arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		BeforeNavigate(arg0, arg1, arg2, (TAutoVal *) arg3, arg4, arg5);
		break;
	}
	case 101:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		NavigateComplete(arg0);
		break;
	}
	case 102:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		StatusTextChange(arg0);
		break;
	}
	case 108:
	{
		long arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		ProgressChange(arg0, arg1);
		break;
	}
	case 104:
	{
		DownloadComplete();
		break;
	}
	case 105:
	{
		long arg0 = pev->Args->operator[](0);
		TBool arg1 = pev->Args->operator[](1);
		CommandStateChange(arg0, arg1);
		break;
	}
	case 106:
	{
		DownloadBegin();
		break;
	}
	case 107:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		long arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		NewWindow(arg0, arg1, arg2, (TAutoVal *) arg3, arg4, arg5);
		break;
	}
	case 113:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		TitleChange(arg0);
		break;
	}
	case 200:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		long arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		FrameBeforeNavigate(arg0, arg1, arg2, (TAutoVal *) arg3, arg4, arg5);
		break;
	}
	case 201:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		FrameNavigateComplete(arg0);
		break;
	}
	case 204:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		long arg1 = pev->Args->operator[](1);
		TAutoString arg2 = pev->Args->operator[](2);
		long arg3 = pev->Args->operator[](3);
		TAutoString arg4 = pev->Args->operator[](4);
		TBool* arg5 = pev->Args->operator[](5);
		FrameNewWindow(arg0, arg1, arg2, (TAutoVal *) arg3, arg4, arg5);
		break;
	}
	case 103:
	{
		TBool* arg0 = pev->Args->operator[](0);
		Quit(arg0);
		break;
	}
	case 109:
	{
		WindowMove();
		break;
	}
	case 110:
	{
		WindowResize();
		break;
	}
	case 111:
	{
		WindowActivate();
		break;
	}
	case 112:
	{
		TAutoString arg0 = pev->Args->operator[](0);
		PropertyChange(arg0);
		break;
	}
	}
	return true;
}

LRESULT TDWebBrowserAppEvents::EvOcEvent(WPARAM wParam, LPARAM lParam)
{
	HWND hControl;

	hControl = (HWND) Control.HWND();

   ::MessageBox(hControl,"EvOcEvent","Message",MB_OK);
}

/*********************** classe TIExplore ***********************************/

TIExplore::TIExplore(TWindow* parent, TModule* module) : TDWebBrowserAppEvents(parent,module)
{
}

TIExplore::~TIExplore()
{
}

void TIExplore::Quit()
{
	if (Control.IsBound())
   {
		Control.Quit();
   	Control.Unbind(false);
   }
}

bool TIExplore::Message(const char far *texte)
{
	HWND hControl;
   int retVal;

	hControl = (HWND) Control.HWND();

   retVal = ::MessageBox(hControl,texte,"Message",MB_OKCANCEL);

   if (retVal == IDOK)
   	return true;
   else
   	return false;
}

void TIExplore::Load()
{
}

void TIExplore::Print()
{
   HWND hWnd = (HWND)Control.HWND();

   ::SendMessage(hWnd,WM_SETFOCUS,(WPARAM)0,(LPARAM)0L);
   keybd_event(VK_CONTROL,0,0,0);
   keybd_event('P',0,0,0);
   keybd_event('P',0,KEYEVENTF_KEYUP,0);
   keybd_event(VK_CONTROL,0,KEYEVENTF_KEYUP,0);
   keybd_event(VK_RETURN,0,0,0);
   keybd_event(VK_RETURN,0,KEYEVENTF_KEYUP,0);

   /*
   ?????????????????? Ne marche pas ?????????????????
   ::SendMessage(hWnd,WM_KEYDOWN,(WPARAM)VK_CONTROL,(LPARAM)0L);
   ::SendMessage(hWnd,WM_KEYDOWN,(WPARAM)'P',(LPARAM)0L);
   ::SendMessage(hWnd,WM_CHAR,(WPARAM)0x10,(LPARAM)0L);	// code CTRL+P
   ::SendMessage(hWnd,WM_KEYUP,(WPARAM)'P',(LPARAM)0L);
   ::SendMessage(hWnd,WM_KEYUP,(WPARAM)VK_CONTROL,(LPARAM)0L);
   */
}

void TIExplore::Navigate(string url)
{
	TAutoVal flags(0), target(0), data(0), headers(0);
   TAutoString URL;
   TAutoString targetURL;

   url = string("http://localhost/") + url;
   URL = (TAutoString) url;
	// Control.Visible(true);
   Control.Navigate(URL,&flags,&target,&data,&headers);
   /*************************************
   do
   {
   	targetURL = Control.LocationURL();
   }
   while (!((string)URL == (string)targetURL));
   ***************************************/
}

////////////////////////// fin de nsbrowse.cpp ///////////////////////////////

