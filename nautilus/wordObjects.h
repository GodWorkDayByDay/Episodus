//================================================================================
//
// Info:               Code generated by OLE Proxy Wizard 3
//
// Date:               Tue Jan 17 15:11:35 2012
//
// Version:            8.3
// Copyright:          (C) 2012 Philippe
// Description:
// Author:             Philippe
// Company:
//
// Header Type:        Abstract type descriptions.
//
// File:               wordObjects.h
//
// Type Library:       Word
// Type Description:   Microsoft Word 11.0 Object Library
//
// GUID:               {00020905-0000-0000-C000-000000000046}
// System:             WIN32
// Version:            8.3
//
// Copyright (C) by Dr John Maddock 1997, 1998. All rights reserved.
// Copyright (C) by Armin Tueting 2007, 2009. All rights reserved.
//
//================================================================================
#if !defined(_WORDOBJECTS_H)
#define _WORDOBJECTS_H

#define __OCF OCF::
#define __OWL OWL::

#include <owl\owlcore.h>
#include <ocf\autodefs.h>
#include <ocf\automacr.h>
#include <ocf\except.h>
#include <ocf\oleutil.h>
#include <tchar.h>

#include <pshpack8.h>

#if !defined(__push_arg)
#define __push_arg

namespace wordObjects {

// class SafeArrayBase
class SafeArrayBase
{
  public:
    virtual VARTYPE type() = 0;
    virtual void copy(SAFEARRAY**) = 0;
    virtual SAFEARRAY** ref() = 0;
};

// class SafeArray
template <class T>
class SafeArray;

// struct VarType
template <class T>
struct VarType
{
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<short>
{
    static VARTYPE Val() {return VT_I2;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<long>
{
    static VARTYPE Val() {return VT_I4;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<float>
{
    static VARTYPE Val() {return VT_R4;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<double>
{
    static VARTYPE Val() {return VT_R8;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<CY>
{
    static VARTYPE Val() {return VT_CY;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<__OCF TAutoDate>
{
    static VARTYPE Val() {return VT_DATE;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<BSTR>
{
    static VARTYPE Val() {return VT_BSTR;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<__OCF TAutoString>
{
    static VARTYPE Val() {return VT_BSTR;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<IDispatch*>
{
    static VARTYPE Val() {return VT_DISPATCH;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType</*__OWL*/ TBool>
{
    static VARTYPE Val() {return VT_BOOL;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<__OCF TAutoBool>
{
    static VARTYPE Val() {return VT_BOOL;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<IUnknown*>
{
    static VARTYPE Val() {return VT_UNKNOWN;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<signed char>
{
    static VARTYPE Val() {return VT_I1;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<unsigned char>
{
    static VARTYPE Val() {return VT_UI1;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<unsigned short>
{
    static VARTYPE Val() {return VT_UI2;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<unsigned long>
{
    static VARTYPE Val() {return VT_UI4;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<int>
{
    static VARTYPE Val() {return VT_INT;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<unsigned int>
{
    static VARTYPE Val() {return VT_UINT;}
};

#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
struct VarType<__OCF TAutoVal>
{
  static VARTYPE Val() { return VT_VARIANT ; }
};

template <class T>
inline void push_arg(__OCF TAutoVal& val, T arg)
{
  val = arg ;
}

inline void push_arg(__OCF TAutoVal& val, const __OCF TAutoString& arg)
{
  val = const_cast<__OCF TAutoString&>(arg) ;
}

inline void push_arg(__OCF TAutoVal& val, SafeArrayBase& arg)
{
  ((VARIANT*) (&val))->vt = arg.type() ;
  arg.copy(&((VARIANT*) (&val))->parray) ;
}

inline void push_arg(__OCF TAutoVal& val, SafeArrayBase* arg)
{
  ((VARIANT*) (&val))->vt = arg->type() | (VARTYPE) VT_BYREF ;
  ((VARIANT*) (&val))->pparray = arg->ref() ;
}

inline void push_arg(__OCF TAutoVal& val, BSTR* arg)
{
    ((VARIANT*) (&val))->vt = VT_BSTR | VT_BYREF;
    ((VARIANT*) (&val))->pbstrVal = arg;
}

inline void push_arg(__OCF TAutoVal& val, void* arg)
{
  ((VARIANT*) (&val))->vt = VT_BYREF ;
  ((VARIANT*) (&val))->byref = arg ;
}

inline void push_arg(__OCF TAutoVal& val, IUnknown** arg)
{
  ((VARIANT*) (&val))->vt = VT_UNKNOWN | VT_BYREF ;
  ((VARIANT*) (&val))->ppunkVal = arg ;
}

inline void push_arg(__OCF TAutoVal& val, IDispatch** arg)
{
  ((VARIANT*) (&val))->vt = VT_DISPATCH | VT_BYREF ;
  ((VARIANT*) (&val))->ppdispVal = arg ;
}

inline void push_arg(__OCF TAutoVal& val, __OCF TAutoVal* arg)
{
  if (arg)
  {
    ((VARIANT*) (&val))->vt = VT_VARIANT | VT_BYREF ;
    ((VARIANT*) (&val))->pvarVal = (VARIANT*) arg ;
  }
  else
  {
    val = TNoArg() ;
  }
}

inline void push_arg(__OCF TAutoVal& val, __OCF TAutoVal** arg)
{
  __OCF TXOle::Check(E_INVALIDARG) ;
}

// class SafeArrayElementRef
template <class T>
class SafeArrayElementRef
{
  private:

    long index;
    SafeArray<T>* ptr;
    SafeArrayElementRef(long i, SafeArray<T>* p)
    {
      index = i;
      ptr = p;
    }

  public:

    SafeArrayElementRef(const SafeArrayElementRef& e)
    {
      index = e.index;
      ptr = e.ptr;
    }
    SafeArrayElementRef& operator=(const SafeArrayElementRef& e)
    {
      if (this != &e)
      {
        index = e.index;
        ptr = e.ptr;
      }
      return *this ;
    }
    operator __OCF TAutoVal();

    SafeArrayElementRef& operator=(const __OCF TAutoVal& val);

    SafeArrayElementRef& operator=(const T& val)
    {
      __OCF TAutoVal v;
      push_arg(v, val);
      return (*this = v);
    }

  friend SafeArray<T> ;
};

// class SafeArrayElementRef
#if defined(__BORLANDC__) && (__BORLANDC__ < 0x530)
#else
template<>
#endif
class SafeArrayElementRef<__OCF TAutoVal>
{
private:
    long index;
    SafeArray<__OCF TAutoVal>* ptr;
    SafeArrayElementRef(long i, SafeArray<__OCF TAutoVal>* p)
    {
        index = i;
        ptr = p;
    }
public:
    SafeArrayElementRef(const SafeArrayElementRef& e)
    {
        index = e.index;
        ptr = e.ptr;
    }
    SafeArrayElementRef& operator=(const SafeArrayElementRef& e)
    {
        if (this != &e)
        {
            index = e.index;
            ptr = e.ptr;
        }
        return *this;
    }
    operator __OCF TAutoVal();

    SafeArrayElementRef& operator=(const __OCF TAutoVal& val);

    friend SafeArray<__OCF TAutoVal>;
};

template <class T>
class SafeArray : public SafeArrayBase
{
  private:

    SAFEARRAY* ptr;

  public:

    SafeArray()
    {
      ptr = 0 ;
    }

    SafeArray(unsigned long len)
    {
      SAFEARRAYBOUND bound ;
      bound.cElements = len ;
      bound.lLbound = 0 ;

      ptr = SafeArrayCreate(VarType<T>::Val(), 1, &bound) ;
      if (ptr == 0)
        throw __OCF TXOle(_T("Unable to create SAFEARRAY structure"), S_OK) ;
    }

    SafeArray(unsigned long len, T* values);

    SafeArray(unsigned int cDims, SAFEARRAYBOUND* bound)
    {
      ptr = SafeArrayCreate(VarType<T>::Val (), cDims, bound) ;
      if (ptr == 0)
        throw __OCF TXOle(_T("Unable to create SAFEARRAY structure"), S_OK) ;
    }

    SafeArray(const SafeArray<T>& s)
    {
      if (s.ptr)
        __OCF TXOle::Check(SafeArrayCopy(s.ptr, &ptr)) ;
      else
        ptr = 0 ;
    }

    SafeArray(const SAFEARRAY* p)
    {
      __OCF TXOle::Check(SafeArrayCopy(const_cast<SAFEARRAY*>(p), &ptr)) ;
    }

    SafeArray(const __OCF TAutoVal& Val)
    {
      if ((((VARIANT*) &Val)->vt & VT_ARRAY) == 0)
        throw __OCF TXOle(_T("Invalid VariantArg passed to SafeArray"), E_INVALIDARG) ;
      __OCF TXOle::Check(SafeArrayCopy(((VARIANT*) &Val)->parray, &ptr)) ;
    }

    ~SafeArray()
    {
      if (ptr)
        __OCF TXOle::Check(SafeArrayDestroy(ptr)) ;
    }

    SafeArray<T>& operator=(const SafeArray<T>& s)
    {
      this->~SafeArray<T>() ;
      new (this) SafeArray<T>(s) ;
      return *this ;
    }

    SafeArray<T>& operator=(const SAFEARRAY* p)
    {
      this->~SafeArray<T>() ;
      new (this) SafeArray<T>(p) ;
      return *this ;
    }

    SafeArray<T>& operator=(const __OCF TAutoVal& Val)
    {
      this->~SafeArray<T>() ;
      new (this) SafeArray<T>(Val) ;
      return *this ;
    }

    void MustBeBound()
    {
      if (ptr == 0)
        throw __OCF TXOle(_T("Attempt to access uninitialised array"), S_OK) ;
    }

    unsigned short Dimentions()
    {
      return ptr->cDims ;
    }

    SAFEARRAYBOUND* Bound(unsigned short i)
    {
        if (i >= ptr->cDims)
            throw __OCF TXOle(_T("Attempt to access array out of range"), S_OK);
       return ptr->rgsabound + i;
    }

    __OCF TAutoVal GetValue(long FAR* indices)
    {
        MustBeBound();
        __OCF TAutoVal v;
        if (ptr->fFeatures & (FADF_DISPATCH | FADF_UNKNOWN | FADF_BSTR))
        {
            // we have a 4 byte value:
            __OCF TXOle::Check(SafeArrayGetElement(ptr, indices, &(((VARIANT*) &v)->punkVal)));
            ((VARIANT*) &v)->vt = (VARTYPE) ((ptr->fFeatures & FADF_UNKNOWN) ? VT_UNKNOWN :
                                  (ptr->fFeatures & FADF_BSTR) ? VT_BSTR :
                                      (ptr->fFeatures & FADF_DISPATCH) ? VT_DISPATCH :
                                      VT_VARIANT);
        }
        else if (ptr->fFeatures & FADF_VARIANT)
        {
            __OCF TXOle::Check(SafeArrayGetElement(ptr, indices, &v));
        }
        else
        {
            __OCF TXOle::Check(SafeArrayGetElement(ptr, indices, &(((VARIANT*) &v)->punkVal)));
            ((VARIANT*) &v)->vt = VarType<T>::Val();
       }
       return v;
    }

    void SetValue(long FAR* indices, __OCF TAutoVal v)
    {
        MustBeBound();
        // must coerce to the type we expect:
        if (ptr->fFeatures & FADF_VARIANT)
            __OCF TXOle::Check(SafeArrayPutElement(ptr, indices, (void*) &v));
        else if (ptr->fFeatures & (FADF_DISPATCH | FADF_UNKNOWN | FADF_BSTR))
        {
            // put a pointer directly:
            VARTYPE vt = ((VARIANT*) &v)->vt;
            if ((vt != VT_DISPATCH) && (vt != VT_UNKNOWN) && (vt != VT_BSTR) )
                __OCF TXOle::Check(E_INVALIDARG);
            __OCF TXOle::Check(SafeArrayPutElement(ptr, indices, (void*) ((VARIANT*) &v)->punkVal));
        }
        else
        {
            __OCF TXOle::Check(VariantChangeType((VARIANT*) &v, (VARIANT*) &v, 0, VarType<T>::Val()));
            __OCF TXOle::Check(SafeArrayPutElement(ptr, indices, (void*) &((VARIANT*) &v)->punkVal));
        }
    }

    SafeArrayElementRef<T> operator[](long i)
    {
        MustBeBound();
        return SafeArrayElementRef<T>(i, this);
    }

    operator SAFEARRAY*()
    {
        return ptr;
    }

    operator SAFEARRAY**()
    {
        // need to set ptr to null first:
        if (ptr)
        {
            this->~SafeArray<T>();
            new (this) SafeArray<T>();
        }
        return &ptr;
    }

    virtual VARTYPE type()
    {
        return VarType<T>::Val() | (VARTYPE) VT_ARRAY;
    }

    virtual void copy(SAFEARRAY** pparray)
    {
        MustBeBound();
        SafeArrayCopy(ptr, pparray);
    }

    virtual SAFEARRAY** ref()
    {
        return &ptr;
    }

    friend SafeArray<T>;
    friend void push_arg(__OCF TAutoVal& val, SafeArrayBase& arg);
};

template <class T>
SafeArray<T>::SafeArray(unsigned long len, T* values)
{
    SAFEARRAYBOUND bound;
    bound.cElements = len;
    bound.lLbound = 0;
    ptr = SafeArrayCreate(VarType<T>::Val(), 1, &bound);
    if(ptr == 0)
        throw __OCF TXOle(_T("Unable to create SAFEARRAY structure"), S_OK);
    for (unsigned long i = 0; i < len; ++i)
    {
        __OCF TAutoVal v;
        push_arg(v, *(values + i));
        SetValue((long*) &i, v);
    }
}

template <class T>
SafeArrayElementRef<T>::operator __OCF TAutoVal()
{
    __OCF TAutoVal val;
    val = ptr->GetValue((long*) &index);
    return val;
}

template <class T>
SafeArrayElementRef<T>& SafeArrayElementRef<T>::operator=(const __OCF TAutoVal& val)
{
    ptr->SetValue((long*) &index, val);
    return *this;
}

inline SafeArrayElementRef<__OCF TAutoVal>::operator __OCF TAutoVal()
{
    __OCF TAutoVal val;
    val = ptr->GetValue((long*) &index);
    return val;
}

inline SafeArrayElementRef<__OCF TAutoVal>& SafeArrayElementRef<__OCF TAutoVal>::operator=(const __OCF TAutoVal& val)
{
    ptr->SetValue((long*) &index, val);
    return *this;
}

}; // namespace wordObjects

#endif

#ifndef _PWCLASS
#define _PWCLASS
#endif

//================================================================================
// Predeclaration of classes and interfaces
//================================================================================
struct _Application;
class _PWCLASS T_ApplicationProxy;
struct Documents;
class _PWCLASS TDocumentsProxy;
struct WordWindows;
class _PWCLASS TWindowsProxy;
struct _Document;
class _PWCLASS T_DocumentProxy;
struct Window;
class _PWCLASS TWindowProxy;
struct Selection;
class _PWCLASS TSelectionProxy;
struct RecentFiles;
class _PWCLASS TRecentFilesProxy;
struct Template;
class _PWCLASS TTemplateProxy;
struct WordSystem;
class _PWCLASS TSystemProxy;
struct AutoCorrect;
class _PWCLASS TAutoCorrectProxy;
struct FontNames;
class _PWCLASS TFontNamesProxy;
struct Languages;
class _PWCLASS TLanguagesProxy;
struct Assistant;
class _PWCLASS TAssistantProxy;
struct FileConverters;
class _PWCLASS TFileConvertersProxy;
struct Dialogs;
class _PWCLASS TDialogsProxy;
struct CaptionLabels;
class _PWCLASS TCaptionLabelsProxy;
struct AutoCaptions;
class _PWCLASS TAutoCaptionsProxy;
struct WordAddIns;
class _PWCLASS TAddInsProxy;
struct Tasks;
class _PWCLASS TTasksProxy;
struct _CommandBars;
class _PWCLASS T_CommandBarsProxy;
struct SynonymInfo;
class _PWCLASS TSynonymInfoProxy;
struct VBE;
class _PWCLASS TVBEProxy;
struct ListGalleries;
class _PWCLASS TListGalleriesProxy;
struct Templates;
class _PWCLASS TTemplatesProxy;
struct KeyBindings;
class _PWCLASS TKeyBindingsProxy;
struct KeysBoundTo;
class _PWCLASS TKeysBoundToProxy;
struct KeyBinding;
class _PWCLASS TKeyBindingProxy;
struct Options;
class _PWCLASS TOptionsProxy;
struct Dictionaries;
class _PWCLASS TDictionariesProxy;
struct HangulHanjaConversionDictionaries;
class _PWCLASS THangulHanjaConversionDictionariesProxy;
struct SpellingSuggestions;
class _PWCLASS TSpellingSuggestionsProxy;
struct LanguageSettings;
class _PWCLASS TLanguageSettingsProxy;
struct AnswerWizard;
class _PWCLASS TAnswerWizardProxy;
struct Browser;
class _PWCLASS TBrowserProxy;
struct MailingLabel;
class _PWCLASS TMailingLabelProxy;
struct WordFileSearch;
class _PWCLASS TFileSearchProxy;
struct MailMessage;
class _PWCLASS TMailMessageProxy;
struct DefaultWebOptions;
class _PWCLASS TDefaultWebOptionsProxy;
struct EmailOptions;
class _PWCLASS TEmailOptionsProxy;
struct COMAddIns;
class _PWCLASS TCOMAddInsProxy;
struct FileDialog;
class _PWCLASS TFileDialogProxy;
struct NewFile;
class _PWCLASS TNewFileProxy;
struct TaskPanes;
class _PWCLASS TTaskPanesProxy;
struct SmartTagRecognizers;
class _PWCLASS TSmartTagRecognizersProxy;
struct SmartTagTypes;
class _PWCLASS TSmartTagTypesProxy;
struct XMLNamespaces;
class _PWCLASS TXMLNamespacesProxy;
struct Bookmarks;
class _PWCLASS TBookmarksProxy;
struct Tables;
class _PWCLASS TTablesProxy;
struct Footnotes;
class _PWCLASS TFootnotesProxy;
struct Endnotes;
class _PWCLASS TEndnotesProxy;
struct Comments;
class _PWCLASS TCommentsProxy;
struct Sections;
class _PWCLASS TSectionsProxy;
struct Paragraphs;
class _PWCLASS TParagraphsProxy;
struct Words;
class _PWCLASS TWordsProxy;
struct Sentences;
class _PWCLASS TSentencesProxy;
struct Characters;
class _PWCLASS TCharactersProxy;
struct Fields;
class _PWCLASS TFieldsProxy;
struct FormFields;
class _PWCLASS TFormFieldsProxy;
struct Styles;
class _PWCLASS TStylesProxy;
struct Frames;
class _PWCLASS TFramesProxy;
struct TablesOfFigures;
class _PWCLASS TTablesOfFiguresProxy;
struct Variables;
class _PWCLASS TVariablesProxy;
struct MailMerge;
class _PWCLASS TMailMergeProxy;
struct Envelope;
class _PWCLASS TEnvelopeProxy;
struct Revisions;
class _PWCLASS TRevisionsProxy;
struct TablesOfContents;
class _PWCLASS TTablesOfContentsProxy;
struct TablesOfAuthorities;
class _PWCLASS TTablesOfAuthoritiesProxy;
struct PageSetup;
class _PWCLASS TPageSetupProxy;
struct RoutingSlip;
class _PWCLASS TRoutingSlipProxy;
struct TablesOfAuthoritiesCategories;
class _PWCLASS TTablesOfAuthoritiesCategoriesProxy;
struct Indexes;
class _PWCLASS TIndexesProxy;
struct WordRange;
class _PWCLASS TRangeProxy;
struct Subdocuments;
class _PWCLASS TSubdocumentsProxy;
struct StoryRanges;
class _PWCLASS TStoryRangesProxy;
struct Hyperlinks;
class _PWCLASS THyperlinksProxy;
struct Shapes;
class _PWCLASS TShapesProxy;
struct ListTemplates;
class _PWCLASS TListTemplatesProxy;
struct Lists;
class _PWCLASS TListsProxy;
struct InlineShapes;
class _PWCLASS TInlineShapesProxy;
struct WordShape;
class _PWCLASS TShapeProxy;
struct Versions;
class _PWCLASS TVersionsProxy;
struct ListParagraphs;
class _PWCLASS TListParagraphsProxy;
struct Mailer;
class _PWCLASS TMailerProxy;
struct ReadabilityStatistics;
class _PWCLASS TReadabilityStatisticsProxy;
struct ProofreadingErrors;
class _PWCLASS TProofreadingErrorsProxy;
struct _VBProject;
class _PWCLASS T_VBProjectProxy;
struct _LetterContent;
class _PWCLASS T_LetterContentProxy;
struct Email;
class _PWCLASS TEmailProxy;
struct Scripts;
class _PWCLASS TScriptsProxy;
struct Frameset;
class _PWCLASS TFramesetProxy;
struct HTMLProject;
class _PWCLASS THTMLProjectProxy;
struct WebOptions;
class _PWCLASS TWebOptionsProxy;
struct IMsoEnvelopeVB;
class _PWCLASS TIMsoEnvelopeVBProxy;
struct SignatureSet;
class _PWCLASS TSignatureSetProxy;
struct HTMLDivisions;
class _PWCLASS THTMLDivisionsProxy;
struct SmartTags;
class _PWCLASS TSmartTagsProxy;
struct StyleSheets;
class _PWCLASS TStyleSheetsProxy;
struct Permission;
class _PWCLASS TPermissionProxy;
struct XMLNodes;
class _PWCLASS TXMLNodesProxy;
struct XMLSchemaReferences;
class _PWCLASS TXMLSchemaReferencesProxy;
struct SmartDocument;
class _PWCLASS TSmartDocumentProxy;
struct SharedWorkspace;
class _PWCLASS TSharedWorkspaceProxy;
struct Sync;
class _PWCLASS TSyncProxy;
struct DocumentLibraryVersions;
class _PWCLASS TDocumentLibraryVersionsProxy;
struct XMLChildNodeSuggestions;
class _PWCLASS TXMLChildNodeSuggestionsProxy;
struct XMLNode;
class _PWCLASS TXMLNodeProxy;
struct _Font;
class _PWCLASS T_FontProxy;
struct Borders;
class _PWCLASS TBordersProxy;
struct Shading;
class _PWCLASS TShadingProxy;
struct _ParagraphFormat;
class _PWCLASS T_ParagraphFormatProxy;
struct TabStops;
class _PWCLASS TTabStopsProxy;
struct CommandBarControl;
class _PWCLASS TCommandBarControlProxy;
struct CommandBar;
class _PWCLASS TCommandBarProxy;
struct CommandBarControls;
class _PWCLASS TCommandBarControlsProxy;
struct _References;
class _PWCLASS T_ReferencesProxy;
struct _VBProjects;
class _PWCLASS T_VBProjectsProxy;
struct _VBComponents;
class _PWCLASS T_VBComponentsProxy;
struct AddIn;
class _PWCLASS TAddInProxy;
struct AnswerWizardFiles;
class _PWCLASS TAnswerWizardFilesProxy;
struct Balloon;
class _PWCLASS TBalloonProxy;
struct AutoCaption;
class _PWCLASS TAutoCaptionProxy;
struct AutoCorrectEntries;
class _PWCLASS TAutoCorrectEntriesProxy;
struct FirstLetterExceptions;
class _PWCLASS TFirstLetterExceptionsProxy;
struct TwoInitialCapsExceptions;
class _PWCLASS TTwoInitialCapsExceptionsProxy;
struct HangulAndAlphabetExceptions;
class _PWCLASS THangulAndAlphabetExceptionsProxy;
struct OtherCorrectionsExceptions;
class _PWCLASS TOtherCorrectionsExceptionsProxy;
struct Bookmark;
class _PWCLASS TBookmarkProxy;
struct Border;
class _PWCLASS TBorderProxy;
struct CaptionLabel;
class _PWCLASS TCaptionLabelProxy;
struct COMAddIn;
class _PWCLASS TCOMAddInProxy;
struct Comment;
class _PWCLASS TCommentProxy;
struct WebPageFonts;
class _PWCLASS TWebPageFontsProxy;
struct Dialog;
class _PWCLASS TDialogProxy;
struct Dictionary;
class _PWCLASS TDictionaryProxy;
struct DocumentLibraryVersion;
class _PWCLASS TDocumentLibraryVersionProxy;
struct EmailSignature;
class _PWCLASS TEmailSignatureProxy;
struct Style;
class _PWCLASS TStyleProxy;
struct EmailAuthor;
class _PWCLASS TEmailAuthorProxy;
struct EmailSignatureEntries;
class _PWCLASS TEmailSignatureEntriesProxy;
struct Endnote;
class _PWCLASS TEndnoteProxy;
struct Field;
class _PWCLASS TFieldProxy;
struct FileConverter;
class _PWCLASS TFileConverterProxy;
struct FileDialogFilters;
class _PWCLASS TFileDialogFiltersProxy;
struct FileDialogSelectedItems;
class _PWCLASS TFileDialogSelectedItemsProxy;
struct FoundFiles;
class _PWCLASS TFoundFilesProxy;
struct PropertyTests;
class _PWCLASS TPropertyTestsProxy;
struct SearchScopes;
class _PWCLASS TSearchScopesProxy;
struct SearchFolders;
class _PWCLASS TSearchFoldersProxy;
struct FileTypes;
class _PWCLASS TFileTypesProxy;
struct FirstLetterException;
class _PWCLASS TFirstLetterExceptionProxy;
struct Footnote;
class _PWCLASS TFootnoteProxy;
struct FormField;
class _PWCLASS TFormFieldProxy;
struct Frame;
class _PWCLASS TFrameProxy;
struct HangulAndAlphabetException;
class _PWCLASS THangulAndAlphabetExceptionProxy;
struct HTMLDivision;
class _PWCLASS THTMLDivisionProxy;
struct HTMLProjectItems;
class _PWCLASS THTMLProjectItemsProxy;
struct Hyperlink;
class _PWCLASS THyperlinkProxy;
struct Index;
class _PWCLASS TIndexProxy;
struct InlineShape;
class _PWCLASS TInlineShapeProxy;
struct Language;
class _PWCLASS TLanguageProxy;
struct ListGallery;
class _PWCLASS TListGalleryProxy;
struct Paragraph;
class _PWCLASS TParagraphProxy;
struct List;
class _PWCLASS TListProxy;
struct ListTemplate;
class _PWCLASS TListTemplateProxy;
struct CustomLabels;
class _PWCLASS TCustomLabelsProxy;
struct MailMergeDataSource;
class _PWCLASS TMailMergeDataSourceProxy;
struct MailMergeFields;
class _PWCLASS TMailMergeFieldsProxy;
struct OtherCorrectionsException;
class _PWCLASS TOtherCorrectionsExceptionProxy;
struct LineNumbering;
class _PWCLASS TLineNumberingProxy;
struct TextColumns;
class _PWCLASS TTextColumnsProxy;
struct DropCap;
class _PWCLASS TDropCapProxy;
struct UserPermission;
class _PWCLASS TUserPermissionProxy;
struct PropertyTest;
class _PWCLASS TPropertyTestProxy;
struct Cells;
class _PWCLASS TCellsProxy;
struct TextRetrievalMode;
class _PWCLASS TTextRetrievalModeProxy;
struct ListFormat;
class _PWCLASS TListFormatProxy;
struct Columns;
class _PWCLASS TColumnsProxy;
struct Rows;
class _PWCLASS TRowsProxy;
struct Find;
class _PWCLASS TFindProxy;
struct ShapeRange;
class _PWCLASS TShapeRangeProxy;
struct Table;
class _PWCLASS TTableProxy;
struct FootnoteOptions;
class _PWCLASS TFootnoteOptionsProxy;
struct EndnoteOptions;
class _PWCLASS TEndnoteOptionsProxy;
struct Editors;
class _PWCLASS TEditorsProxy;
struct ReadabilityStatistic;
class _PWCLASS TReadabilityStatisticProxy;
struct RecentFile;
class _PWCLASS TRecentFileProxy;
struct Revision;
class _PWCLASS TRevisionProxy;
struct Row;
class _PWCLASS TRowProxy;
struct Script;
class _PWCLASS TScriptProxy;
struct ScopeFolder;
class _PWCLASS TScopeFolderProxy;
struct SearchScope;
class _PWCLASS TSearchScopeProxy;
struct Section;
class _PWCLASS TSectionProxy;
struct HeaderFooter;
class _PWCLASS THeaderFooterProxy;
struct AutoTextEntry;
class _PWCLASS TAutoTextEntryProxy;
struct Adjustments;
class _PWCLASS TAdjustmentsProxy;
struct CalloutFormat;
class _PWCLASS TCalloutFormatProxy;
struct ConnectorFormat;
class _PWCLASS TConnectorFormatProxy;
struct FillFormat;
class _PWCLASS TFillFormatProxy;
struct GroupShapes;
class _PWCLASS TGroupShapesProxy;
struct LineFormat;
class _PWCLASS TLineFormatProxy;
struct ShapeNodes;
class _PWCLASS TShapeNodesProxy;
struct PictureFormat;
class _PWCLASS TPictureFormatProxy;
struct ShadowFormat;
class _PWCLASS TShadowFormatProxy;
struct TextEffectFormat;
class _PWCLASS TTextEffectFormatProxy;
struct TextFrame;
class _PWCLASS TTextFrameProxy;
struct ThreeDFormat;
class _PWCLASS TThreeDFormatProxy;
struct WrapFormat;
class _PWCLASS TWrapFormatProxy;
struct OLEFormat;
class _PWCLASS TOLEFormatProxy;
struct LinkFormat;
class _PWCLASS TLinkFormatProxy;
struct IMsoDiagram;
class _PWCLASS TIMsoDiagramProxy;
struct DiagramNode;
class _PWCLASS TDiagramNodeProxy;
struct CanvasShapes;
class _PWCLASS TCanvasShapesProxy;
struct FreeformBuilder;
class _PWCLASS TFreeformBuilderProxy;
struct SharedWorkspaceMembers;
class _PWCLASS TSharedWorkspaceMembersProxy;
struct SharedWorkspaceTasks;
class _PWCLASS TSharedWorkspaceTasksProxy;
struct SharedWorkspaceFiles;
class _PWCLASS TSharedWorkspaceFilesProxy;
struct SharedWorkspaceFolders;
class _PWCLASS TSharedWorkspaceFoldersProxy;
struct SharedWorkspaceLinks;
class _PWCLASS TSharedWorkspaceLinksProxy;
struct SharedWorkspaceTask;
class _PWCLASS TSharedWorkspaceTaskProxy;
struct Signature;
class _PWCLASS TSignatureProxy;
struct SmartTagRecognizer;
class _PWCLASS TSmartTagRecognizerProxy;
struct SmartTag;
class _PWCLASS TSmartTagProxy;
struct SmartTagType;
class _PWCLASS TSmartTagTypeProxy;
struct SpellingSuggestion;
class _PWCLASS TSpellingSuggestionProxy;
struct TableStyle;
class _PWCLASS TTableStyleProxy;
struct StyleSheet;
class _PWCLASS TStyleSheetProxy;
struct Subdocument;
class _PWCLASS TSubdocumentProxy;
struct Cell;
class _PWCLASS TCellProxy;
struct TableOfAuthoritiesCategory;
class _PWCLASS TTableOfAuthoritiesCategoryProxy;
struct TableOfAuthorities;
class _PWCLASS TTableOfAuthoritiesProxy;
struct TableOfContents;
class _PWCLASS TTableOfContentsProxy;
struct TableOfFigures;
class _PWCLASS TTableOfFiguresProxy;
struct ConditionalStyle;
class _PWCLASS TConditionalStyleProxy;
struct TabStop;
class _PWCLASS TTabStopProxy;
struct TaskPane;
class _PWCLASS TTaskPaneProxy;
struct Task;
class _PWCLASS TTaskProxy;
struct AutoTextEntries;
class _PWCLASS TAutoTextEntriesProxy;
struct TextColumn;
class _PWCLASS TTextColumnProxy;
struct ColorFormat;
class _PWCLASS TColorFormatProxy;
struct TwoInitialCapsException;
class _PWCLASS TTwoInitialCapsExceptionProxy;
struct Variable;
class _PWCLASS TVariableProxy;
struct _CodePanes;
class _PWCLASS T_CodePanesProxy;
struct Events;
class _PWCLASS TEventsProxy;
struct _VBComponent;
class _PWCLASS T_VBComponentProxy;
struct _CodePane;
class _PWCLASS T_CodePaneProxy;
struct Version;
class _PWCLASS TVersionProxy;
struct WebPageFont;
class _PWCLASS TWebPageFontProxy;
struct Pane;
class _PWCLASS TPaneProxy;
struct Panes;
class _PWCLASS TPanesProxy;
struct View;
class _PWCLASS TViewProxy;
struct XMLChildNodeSuggestion;
class _PWCLASS TXMLChildNodeSuggestionProxy;
struct XMLNamespace;
class _PWCLASS TXMLNamespaceProxy;
struct XMLSchemaReference;
class _PWCLASS TXMLSchemaReferenceProxy;
struct _CodeModule;
class _PWCLASS T_CodeModuleProxy;
struct _Properties;
class _PWCLASS T_PropertiesProxy;
struct Property;
class _PWCLASS TPropertyProxy;
struct Reference;
class _PWCLASS TReferenceProxy;
struct AutoCorrectEntry;
class _PWCLASS TAutoCorrectEntryProxy;
struct Column;
class _PWCLASS TColumnProxy;
struct CustomLabel;
class _PWCLASS TCustomLabelProxy;
struct DiagramNodeChildren;
class _PWCLASS TDiagramNodeChildrenProxy;
struct Diagram;
class _PWCLASS TDiagramProxy;
struct DiagramNodes;
class _PWCLASS TDiagramNodesProxy;
struct Editor;
class _PWCLASS TEditorProxy;
struct EmailSignatureEntry;
class _PWCLASS TEmailSignatureEntryProxy;
class _ReferencesEvents;
class _CommandBarControlEvents;
struct FileDialogFilter;
class _PWCLASS TFileDialogFilterProxy;
struct Replacement;
class _PWCLASS TReplacementProxy;
struct TextInput;
class _PWCLASS TTextInputProxy;
struct CheckBox;
class _PWCLASS TCheckBoxProxy;
struct DropDown;
class _PWCLASS TDropDownProxy;
struct PageNumbers;
class _PWCLASS TPageNumbersProxy;
struct HTMLProjectItem;
class _PWCLASS THTMLProjectItemProxy;
struct HorizontalLineFormat;
class _PWCLASS THorizontalLineFormatProxy;
struct ListLevels;
class _PWCLASS TListLevelsProxy;
struct MailMergeFieldNames;
class _PWCLASS TMailMergeFieldNamesProxy;
struct MailMergeDataFields;
class _PWCLASS TMailMergeDataFieldsProxy;
struct MappedDataFields;
class _PWCLASS TMappedDataFieldsProxy;
struct MailMergeFieldName;
class _PWCLASS TMailMergeFieldNameProxy;
struct MailMergeField;
class _PWCLASS TMailMergeFieldProxy;
struct MappedDataField;
class _PWCLASS TMappedDataFieldProxy;
struct PageNumber;
class _PWCLASS TPageNumberProxy;
struct Zooms;
class _PWCLASS TZoomsProxy;
struct Pages;
class _PWCLASS TPagesProxy;
struct ScopeFolders;
class _PWCLASS TScopeFoldersProxy;
struct HeadersFooters;
class _PWCLASS THeadersFootersProxy;
struct ShapeNode;
class _PWCLASS TShapeNodeProxy;
struct SharedWorkspaceFile;
class _PWCLASS TSharedWorkspaceFileProxy;
struct SharedWorkspaceFolder;
class _PWCLASS TSharedWorkspaceFolderProxy;
struct SharedWorkspaceLink;
class _PWCLASS TSharedWorkspaceLinkProxy;
struct SharedWorkspaceMember;
class _PWCLASS TSharedWorkspaceMemberProxy;
struct CustomProperties;
class _PWCLASS TCustomPropertiesProxy;
struct SmartTagActions;
class _PWCLASS TSmartTagActionsProxy;
struct HeadingStyles;
class _PWCLASS THeadingStylesProxy;
struct Zoom;
class _PWCLASS TZoomProxy;
struct Reviewers;
class _PWCLASS TReviewersProxy;
struct XSLTransforms;
class _PWCLASS TXSLTransformsProxy;
struct XSLTransform;
class _PWCLASS TXSLTransformProxy;
struct CustomProperty;
class _PWCLASS TCustomPropertyProxy;
struct ListEntries;
class _PWCLASS TListEntriesProxy;
struct HeadingStyle;
class _PWCLASS THeadingStyleProxy;
struct ListEntry;
class _PWCLASS TListEntryProxy;
struct ListLevel;
class _PWCLASS TListLevelProxy;
struct MailMergeDataField;
class _PWCLASS TMailMergeDataFieldProxy;
struct Page;
class _PWCLASS TPageProxy;
struct Reviewer;
class _PWCLASS TReviewerProxy;
struct SmartTagAction;
class _PWCLASS TSmartTagActionProxy;
struct Rectangles;
class _PWCLASS TRectanglesProxy;
struct Breaks;
class _PWCLASS TBreaksProxy;
struct WordRectangle;
class _PWCLASS TRectangleProxy;
struct Break;
class _PWCLASS TBreakProxy;
struct Lines;
class _PWCLASS TLinesProxy;
struct Line;
class _PWCLASS TLineProxy;

// Coclass: Application
typedef IUnknown WordApplication;

// Coclass: Document
typedef IUnknown WordDocument;

// Coclass: CommandBars
typedef IUnknown CommandBars;

// Coclass: Global
// {000209F0-0000-0000-C000-000000000046}
typedef IUnknown Global;

// Coclass: VBProject
typedef IUnknown VBProject;

// Coclass: LetterContent
typedef IUnknown LetterContent;

// Coclass: MsoEnvelope
typedef IUnknown MsoEnvelope;

// Coclass: Font
typedef IUnknown Font;

// Coclass: ParagraphFormat
typedef IUnknown ParagraphFormat;

// Coclass: OLEControl
// {000209F2-0000-0000-C000-000000000046}
typedef IUnknown OLEControl;

// Coclass: References
typedef IUnknown References;

// Coclass: VBProjects
typedef IUnknown VBProjects;

// Coclass: VBComponents
typedef IUnknown VBComponents;

// Coclass: CodePanes
typedef IUnknown CodePanes;

// Coclass: VBComponent
typedef IUnknown VBComponent;

// Coclass: CodePane
typedef IUnknown CodePane;

// Coclass: CodeModule
typedef IUnknown CodeModule;

// Coclass: Properties
typedef IUnknown Properties;

// Coclass: ReferencesEvents
typedef IUnknown ReferencesEvents;

// Coclass: CommandBarEvents
typedef IUnknown CommandBarEvents;

//================================================================================
// Declaration of GUID's
//================================================================================
DEFINE_GUID(IID__Global, 0x209b9, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID_CoGlobal, 0x209f0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID__Application, 0x20970, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID_CoApplication, 0x209ff, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID__Document, 0x2096b, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID_CoDocument, 0x20906, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID_Range, 0x2095e, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);

// WdKeyCategory
typedef enum tagWdKeyCategory
{
	wdKeyCategoryNil = -1,
	wdKeyCategoryDisable = 0,
	wdKeyCategoryCommand = 1,
	wdKeyCategoryMacro = 2,
	wdKeyCategoryFont = 3,
	wdKeyCategoryAutoText = 4,
	wdKeyCategoryStyle = 5,
	wdKeyCategorySymbol = 6,
	wdKeyCategoryPrefix = 7,
} WdKeyCategory;

// WdKey
typedef enum tagWdKey
{
	wdNoKey = 255,
	wdKeyShift = 256,
	wdKeyControl = 512,
	wdKeyCommand = 512,
	wdKeyAlt = 1024,
	wdKeyOption = 1024,
	wdKeyA = 65,
	wdKeyB = 66,
	wdKeyC = 67, 
	wdKeyD = 68, 
	wdKeyE = 69, 
	wdKeyF = 70, 
	wdKeyG = 71, 
	wdKeyH = 72, 
	wdKeyI = 73, 
	wdKeyJ = 74, 
	wdKeyK = 75, 
	wdKeyL = 76, 
	wdKeyM = 77, 
	wdKeyN = 78, 
	wdKeyO = 79, 
	wdKeyP = 80, 
	wdKeyQ = 81,
	wdKeyR = 82, 
	wdKeyS = 83, 
	wdKeyT = 84, 
	wdKeyU = 85, 
	wdKeyV = 86, 
	wdKeyW = 87,
	wdKeyX = 88, 
	wdKeyY = 89, 
	wdKeyZ = 90, 
	wdKey0 = 48, 
	wdKey1 = 49, 
	wdKey2 = 50, 
	wdKey3 = 51, 
	wdKey4 = 52,
	wdKey5 = 53, 
	wdKey6 = 54, 
	wdKey7 = 55, 
	wdKey8 = 56, 
	wdKey9 = 57, 
	wdKeyBackspace = 8, 
	wdKeyTab = 9, 
	wdKeyNumeric5Special = 12, 
	wdKeyReturn = 13, 
	wdKeyPause = 19, 
	wdKeyEsc = 27, 
	wdKeySpacebar = 32, 
	wdKeyPageUp = 33,
	wdKeyPageDown = 34,
	wdKeyEnd = 35, 
	wdKeyHome = 36, 
	wdKeyInsert = 45, 
	wdKeyDelete = 46, 
	wdKeyNumeric0 = 96, 
	wdKeyNumeric1 = 97, 
	wdKeyNumeric2 = 98, 
	wdKeyNumeric3 = 99, 
	wdKeyNumeric4 = 100, 
	wdKeyNumeric5 = 101, 
	wdKeyNumeric6 = 102, 
	wdKeyNumeric7 = 103, 
	wdKeyNumeric8 = 104, 
	wdKeyNumeric9 = 105, 
	wdKeyNumericMultiply = 106,
	wdKeyNumericAdd = 107, 
	wdKeyNumericSubtract = 109, 
	wdKeyNumericDecimal = 110, 
	wdKeyNumericDivide = 111, 
	wdKeyF1 = 112, 
	wdKeyF2 = 113, 
	wdKeyF3 = 114,
	wdKeyF4 = 115, 
	wdKeyF5 = 116, 
	wdKeyF6 = 117, 
	wdKeyF7 = 118,
	wdKeyF8 = 119, 
	wdKeyF9 = 120, 
	wdKeyF10 = 121, 
	wdKeyF11 = 122, 
	wdKeyF12 = 123, 
	wdKeyF13 = 124, 
	wdKeyF14 = 125, 
	wdKeyF15 = 126, 
	wdKeyF16 = 127, 
	wdKeyScrollLock = 145, 
	wdKeySemiColon = 186, 
	wdKeyEquals = 187, 
	wdKeyComma = 188, 
	wdKeyHyphen = 189, 
	wdKeyPeriod = 190, 
	wdKeySlash = 191, 
	wdKeyBackSingleQuote = 192, 
	wdKeyOpenSquareBrace = 219,
	wdKeyBackSlash = 220,
	wdKeyCloseSquareBrace = 221,
	wdKeySingleQuote = 222,
} WdKey;

// _Global
// {000209B9-0000-0000-C000-000000000046}
#undef INTERFACE
#define INTERFACE _Global
DECLARE_INTERFACE_(_Global, IDispatch)
{
#ifndef __cplusplus
	// IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	// IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	// _Global methods:
	STDMETHOD_(HRESULT, Get_Application) (THIS_ WordApplication** prop) PURE;
	STDMETHOD_(HRESULT, Get_Creator) (THIS_ long* prop) PURE;
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** prop) PURE;
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* prop) PURE;
	STDMETHOD_(HRESULT, Get_Documents) (THIS_ Documents** prop) PURE;
	STDMETHOD_(HRESULT, Get_Windows) (THIS_ WordWindows** prop) PURE;
	STDMETHOD_(HRESULT, Get_ActiveDocument) (THIS_ WordDocument** prop) PURE;
	STDMETHOD_(HRESULT, Get_ActiveWindow) (THIS_ Window** prop) PURE;
	STDMETHOD_(HRESULT, Get_Selection) (THIS_ Selection** prop) PURE;
	STDMETHOD_(HRESULT, Get_WordBasic) (THIS_ IDispatch** prop) PURE;
	STDMETHOD_(HRESULT, Get_PrintPreview) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_PrintPreview) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_RecentFiles) (THIS_ RecentFiles** prop) PURE;
	STDMETHOD_(HRESULT, Get_NormalTemplate) (THIS_ Template** prop) PURE;
	STDMETHOD_(HRESULT, Get_System) (THIS_ WordSystem** prop) PURE;
	STDMETHOD_(HRESULT, Get_AutoCorrect) (THIS_ AutoCorrect** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FontNames) (THIS_ FontNames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_LandscapeFontNames) (THIS_ FontNames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_PortraitFontNames) (THIS_ FontNames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Languages) (THIS_ Languages** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Assistant) (THIS_ Assistant** prop) PURE;
	STDMETHOD_(HRESULT, Get_FileConverters) (THIS_ FileConverters** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Dialogs) (THIS_ Dialogs** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CaptionLabels) (THIS_ CaptionLabels** prop) PURE; 
	STDMETHOD_(HRESULT, Get_AutoCaptions) (THIS_ AutoCaptions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_AddIns) (THIS_ WordAddIns** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Tasks) (THIS_ Tasks** prop) PURE; 
	STDMETHOD_(HRESULT, Get_MacroContainer) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CommandBars) (THIS_ CommandBars** prop) PURE; 
	STDMETHOD_(HRESULT, Get_SynonymInfo) (THIS_ BSTR Word, VARIANT* LanguageID, SynonymInfo** prop) PURE; 
	STDMETHOD_(HRESULT, Get_VBE) (THIS_ VBE** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ListGalleries) (THIS_ ListGalleries** prop) PURE;
	STDMETHOD_(HRESULT, Get_ActivePrinter) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ActivePrinter) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_Templates) (THIS_ Templates** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CustomizationContext) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Set_CustomizationContext) (THIS_ IDispatch* prop) PURE; 
	STDMETHOD_(HRESULT, Get_KeyBindings) (THIS_ KeyBindings** prop) PURE; 
	STDMETHOD_(HRESULT, Get_KeysBoundTo) (THIS_ WdKeyCategory KeyCategory, BSTR Command, VARIANT* CommandParameter, KeysBoundTo** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FindKey) (THIS_ long KeyCode, VARIANT* KeyCode2, KeyBinding** prop) PURE;
	STDMETHOD_(HRESULT, Get_Options) (THIS_ Options** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CustomDictionaries) (THIS_ Dictionaries** prop) PURE; 
	STDMETHOD_(HRESULT, Set_StatusBar) (THIS_ BSTR ) PURE;
	STDMETHOD_(HRESULT, Get_ShowVisualBasicEditor) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowVisualBasicEditor) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_IsObjectValid) (THIS_ IDispatch* Object, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_HangulHanjaDictionaries) (THIS_ HangulHanjaConversionDictionaries** prop) PURE; 
	STDMETHOD_(HRESULT, Repeat) (THIS_ VARIANT* Times, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, DDEExecute) (THIS_ long Channel, BSTR Command) PURE; 
	STDMETHOD_(HRESULT, DDEInitiate) (THIS_ BSTR App, BSTR Topic, long* prop) PURE; 
	STDMETHOD_(HRESULT, DDEPoke) (THIS_ long Channel, BSTR Item, BSTR Data) PURE; 
	STDMETHOD_(HRESULT, DDERequest) (THIS_ long Channel, BSTR Item, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, DDETerminate) (THIS_ long Channel) PURE; 
	STDMETHOD_(HRESULT, DDETerminateAll) (THIS ) PURE; 
	STDMETHOD_(HRESULT, BuildKeyCode) (THIS_ WdKey Arg1, VARIANT* Arg2, VARIANT* Arg3, VARIANT* Arg4, long* prop) PURE; 
	STDMETHOD_(HRESULT, KeyString) (THIS_ long KeyCode, VARIANT* KeyCode2, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, CheckSpelling) (THIS_ BSTR Word, VARIANT* CustomDictionary, VARIANT* IgnoreUppercase, VARIANT* MainDictionary, VARIANT* CustomDictionary2, VARIANT* CustomDictionary3, VARIANT* CustomDictionary4, VARIANT* CustomDictionary5, VARIANT* CustomDictionary6, VARIANT* CustomDictionary7, VARIANT* CustomDictionary8, VARIANT* CustomDictionary9, VARIANT* CustomDictionary10, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, GetSpellingSuggestions) (THIS_ BSTR Word, VARIANT* CustomDictionary, VARIANT* IgnoreUppercase, VARIANT* MainDictionary, VARIANT* SuggestionMode, VARIANT* CustomDictionary2, VARIANT* CustomDictionary3, VARIANT* CustomDictionary4, VARIANT* CustomDictionary5, VARIANT* CustomDictionary6, VARIANT* CustomDictionary7, VARIANT* CustomDictionary8, VARIANT* CustomDictionary9, VARIANT* CustomDictionary10, SpellingSuggestions** prop) PURE; 
	STDMETHOD_(HRESULT, Help) (THIS_ VARIANT* HelpType) PURE;
	STDMETHOD_(HRESULT, NewWindow) (THIS_ Window** prop) PURE; 
	STDMETHOD_(HRESULT, CleanString) (THIS_ BSTR String, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, ChangeFileOpenDirectory) (THIS_ BSTR Path) PURE; 
	STDMETHOD_(HRESULT, InchesToPoints) (THIS_ float Inches, float* prop) PURE; 
	STDMETHOD_(HRESULT, CentimetersToPoints) (THIS_ float Centimeters, float* prop) PURE; 
	STDMETHOD_(HRESULT, MillimetersToPoints) (THIS_ float Millimeters, float* prop) PURE;
	STDMETHOD_(HRESULT, PicasToPoints) (THIS_ float Picas, float* prop) PURE; 
	STDMETHOD_(HRESULT, LinesToPoints) (THIS_ float Lines, float* prop) PURE;
	STDMETHOD_(HRESULT, PointsToInches) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToCentimeters) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToMillimeters) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToPicas) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToLines) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToPixels) (THIS_ float Points, VARIANT* fVertical, float* prop) PURE; 
	STDMETHOD_(HRESULT, PixelsToPoints) (THIS_ float Pixels, VARIANT* fVertical, float* prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageSettings) (THIS_ LanguageSettings** prop) PURE; 
	STDMETHOD_(HRESULT, Get_AnswerWizard) (THIS_ AnswerWizard** prop) PURE; 
	STDMETHOD_(HRESULT, Get_AutoCorrectEmail) (THIS_ AutoCorrect** prop) PURE; 
};
typedef _Global* LPGLOBAL;
#ifdef __cplusplus
// _Global  {000209B9-0000-0000-C000-000000000046}
//  [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS T_GlobalProxy : public __OCF TAutoProxy
{
public:
	T_GlobalProxy() : TAutoProxy(0x0) {}

	// _Application:   [dispid 1000]
	WordApplication* _Application();

	// Creator:   [dispid 1001]
	long Creator();

	// Parent:   [dispid 1002]
	IDispatch* Parent();

	// Name:   [dispid 0]
	__OCF TAutoString Name();

	// _Documents:   [dispid 1]
	void _Documents(TDocumentsProxy& Obj);

	// _Windows:   [dispid 2]
	void GetWindows(TWindowsProxy& Obj);

	// ActiveDocument:   [dispid 3]
	T_DocumentProxy* ActiveDocument();

	// ActiveWindow:   [dispid 4]
	void ActiveWindow(TWindowProxy& Obj);

	// _Selection:   [dispid 5]
	void _Selection(TSelectionProxy& Obj);

	// WordBasic:   [dispid 6]
	IDispatch* WordBasic();

	// PrintPreview:   [dispid 27]
	/*__OWL*/ TBool PrintPreview();

	// PrintPreview:   [dispid 27]
	void PrintPreview(/*__OWL*/ TBool arg0);

	// _RecentFiles:   [dispid 7]
	void _RecentFiles(TRecentFilesProxy& Obj);

	// NormalTemplate:   [dispid 8]
	void NormalTemplate(TTemplateProxy& Obj);

	// _System:   [dispid 9]
	void _System(TSystemProxy& Obj);

	// _AutoCorrect:   [dispid 10]
	void _AutoCorrect(TAutoCorrectProxy& Obj);

	// _FontNames:   [dispid 11]
	void _FontNames(TFontNamesProxy& Obj);

	// LandscapeFontNames:   [dispid 12]
	void LandscapeFontNames(TFontNamesProxy& Obj);

	// PortraitFontNames:   [dispid 13]
	void PortraitFontNames(TFontNamesProxy& Obj);

	// _Languages:   [dispid 14]
	void _Languages(TLanguagesProxy& Obj);

	// _Assistant:   [dispid 15]
	void _Assistant(TAssistantProxy& Obj);

	// _FileConverters:   [dispid 17]
	void _FileConverters(TFileConvertersProxy& Obj);

	// _Dialogs:   [dispid 19]
	void _Dialogs(TDialogsProxy& Obj);

	// _CaptionLabels:   [dispid 20]
	void _CaptionLabels(TCaptionLabelsProxy& Obj);

	// _AutoCaptions:   [dispid 21]
	void _AutoCaptions(TAutoCaptionsProxy& Obj);

	// _AddIns:   [dispid 22]
	void _AddIns(TAddInsProxy& Obj);

	// _Tasks:   [dispid 28]
	void _Tasks(TTasksProxy& Obj);

	// MacroContainer:   [dispid 55]
	IDispatch* MacroContainer();

	// _CommandBars:   [dispid 57]
	CommandBars* _CommandBars();

	// _SynonymInfo:   [dispid 59]
	void _SynonymInfo(TSynonymInfoProxy& Obj, __OCF TAutoString Word, __OCF TAutoVal* LanguageID = 0);

	// _VBE:   [dispid 61]
	void _VBE(TVBEProxy& Obj);

	// _ListGalleries:   [dispid 65]
	void _ListGalleries(TListGalleriesProxy& Obj);

	// ActivePrinter:   [dispid 66]
	__OCF TAutoString ActivePrinter();

	// ActivePrinter:   [dispid 66]
	void ActivePrinter(__OCF TAutoString arg0);

	// _Templates:   [dispid 67]
	void _Templates(TTemplatesProxy& Obj);

	// CustomizationContext:   [dispid 68]
	IDispatch* CustomizationContext();

	// CustomizationContext:   [dispid 68]
	void CustomizationContext(IDispatch* arg0);

	// _KeyBindings:   [dispid 69]
	void _KeyBindings(TKeyBindingsProxy& Obj);

	// _KeysBoundTo:   [dispid 70]
	void _KeysBoundTo(TKeysBoundToProxy& Obj, WdKeyCategory KeyCategory, __OCF TAutoString Command, __OCF TAutoVal* CommandParameter = 0);

	// FindKey:   [dispid 71]
	void FindKey(TKeyBindingProxy& Obj, long KeyCode, __OCF TAutoVal* KeyCode2 = 0);

	// _Options:   [dispid 93]
	void _Options(TOptionsProxy& Obj);

	// CustomDictionaries:   [dispid 95]
	void CustomDictionaries(TDictionariesProxy& Obj);

	// StatusBar:   [dispid 97]
	void StatusBar(__OCF TAutoString arg0);

	// ShowVisualBasicEditor:   [dispid 104]
	/*__OWL*/ TBool ShowVisualBasicEditor();

	// ShowVisualBasicEditor:   [dispid 104]
	void ShowVisualBasicEditor(/*__OWL*/ TBool arg0);

	// IsObjectValid:   [dispid 109]
	/*__OWL*/ TBool IsObjectValid(IDispatch* Object);

	// HangulHanjaDictionaries:   [dispid 110]
	void HangulHanjaDictionaries(THangulHanjaConversionDictionariesProxy& Obj);

	// Repeat:   [dispid 305]
	/*__OWL*/ TBool Repeat(__OCF TAutoVal* Times = 0);

	// DDEExecute:   [dispid 310]
	void DDEExecute(long Channel, __OCF TAutoString Command);

	// DDEInitiate:   [dispid 311]
	long DDEInitiate(__OCF TAutoString App, __OCF TAutoString Topic);

	// DDEPoke:   [dispid 312]
	void DDEPoke(long Channel, __OCF TAutoString Item, __OCF TAutoString Data);

	// DDERequest:   [dispid 313]
	__OCF TAutoString DDERequest(long Channel, __OCF TAutoString Item);

	// DDETerminate:   [dispid 314]
	void DDETerminate(long Channel);

	// DDETerminateAll:   [dispid 315]
	void DDETerminateAll();

	// BuildKeyCode:   [dispid 316]
	long BuildKeyCode(WdKey Arg1, __OCF TAutoVal* Arg2 = 0, __OCF TAutoVal* Arg3 = 0, __OCF TAutoVal* Arg4 = 0);

	// KeyString:   [dispid 317]
	__OCF TAutoString KeyString(long KeyCode, __OCF TAutoVal* KeyCode2 = 0);

	// CheckSpelling:   [dispid 324]
	/*__OWL*/ TBool CheckSpelling(__OCF TAutoString Word, __OCF TAutoVal* CustomDictionary = 0, __OCF TAutoVal* IgnoreUppercase = 0, __OCF TAutoVal* MainDictionary = 0, __OCF TAutoVal* CustomDictionary2 = 0, __OCF TAutoVal* CustomDictionary3 = 0, __OCF TAutoVal* CustomDictionary4 = 0, __OCF TAutoVal* CustomDictionary5 = 0, __OCF TAutoVal* CustomDictionary6 = 0, __OCF TAutoVal* CustomDictionary7 = 0, __OCF TAutoVal* CustomDictionary8 = 0, __OCF TAutoVal* CustomDictionary9 = 0, __OCF TAutoVal* CustomDictionary10 = 0);

	// GetSpellingSuggestions:   [dispid 327]
	void GetSpellingSuggestions(TSpellingSuggestionsProxy& Obj, __OCF TAutoString Word, __OCF TAutoVal* CustomDictionary = 0, __OCF TAutoVal* IgnoreUppercase = 0, __OCF TAutoVal* MainDictionary = 0, __OCF TAutoVal* SuggestionMode = 0, __OCF TAutoVal* CustomDictionary2 = 0, __OCF TAutoVal* CustomDictionary3 = 0, __OCF TAutoVal* CustomDictionary4 = 0, __OCF TAutoVal* CustomDictionary5 = 0, __OCF TAutoVal* CustomDictionary6 = 0, __OCF TAutoVal* CustomDictionary7 = 0, __OCF TAutoVal* CustomDictionary8 = 0, __OCF TAutoVal* CustomDictionary9 = 0, __OCF TAutoVal* CustomDictionary10 = 0);

	// Help:   [dispid 329]
	void Help(__OCF TAutoVal* HelpType);

	// NewWindow:   [dispid 345]
	void NewWindow(TWindowProxy& Obj);

	// CleanString:   [dispid 354]
	__OCF TAutoString CleanString(__OCF TAutoString String);

	// ChangeFileOpenDirectory:   [dispid 355]
	void ChangeFileOpenDirectory(__OCF TAutoString Path);

	// InchesToPoints:   [dispid 370]
	float InchesToPoints(float Inches);

	// CentimetersToPoints:   [dispid 371]
	float CentimetersToPoints(float Centimeters);

	// MillimetersToPoints:   [dispid 372]
	float MillimetersToPoints(float Millimeters);

	// PicasToPoints:   [dispid 373]
	float PicasToPoints(float Picas);

	// LinesToPoints:   [dispid 374]
	float LinesToPoints(float Lines);

	// PointsToInches:   [dispid 380]
	float PointsToInches(float Points);

	// PointsToCentimeters:   [dispid 381]
	float PointsToCentimeters(float Points);

	// PointsToMillimeters:   [dispid 382]
	float PointsToMillimeters(float Points);

	// PointsToPicas:   [dispid 383]
	float PointsToPicas(float Points);

	// PointsToLines:   [dispid 384]
	float PointsToLines(float Points);

	// PointsToPixels:   [dispid 385]
	float PointsToPixels(float Points, __OCF TAutoVal* fVertical = 0);

	// PixelsToPoints:   [dispid 386]
	float PixelsToPoints(float Pixels, __OCF TAutoVal* fVertical = 0);

	// _LanguageSettings:   [dispid 111]
	void _LanguageSettings(TLanguageSettingsProxy& Obj);

	// _AnswerWizard:   [dispid 112]
	void _AnswerWizard(TAnswerWizardProxy& Obj);

	// AutoCorrectEmail:   [dispid 113]
	void AutoCorrectEmail(TAutoCorrectProxy& Obj);
};
#endif

// WdInternationalIndex
typedef enum tagWdInternationalIndex
{
	wdListSeparator = 17, 
	wdDecimalSeparator = 18, 
	wdThousandsSeparator = 19, 
	wdCurrencyCode = 20, 
	wd24HourClock = 21, 
	wdInternationalAM = 22,
	wdInternationalPM = 23, 
	wdTimeSeparator = 24, 
	wdDateSeparator = 25, 
	wdProductLanguageID = 26, 
} WdInternationalIndex;

// WdWindowState
typedef enum tagWdWindowState
{
	wdWindowStateNormal = 0, 
	wdWindowStateMaximize = 1, 
	wdWindowStateMinimize = 2, 
} WdWindowState;

// WdAlertLevel
typedef enum tagWdAlertLevel
{
	wdAlertsNone = 0, 
	wdAlertsMessageBox = -2, 
	wdAlertsAll = -1, 
} WdAlertLevel;

// WdEnableCancelKey
typedef enum tagWdEnableCancelKey
{
	wdCancelDisabled = 0, 
	wdCancelInterrupt = 1,
} WdEnableCancelKey;

// WdMailSystem
typedef enum tagWdMailSystem
{
	wdNoMailSystem = 0, 
	wdMAPI = 1, 
	wdPowerTalk = 2, 
	wdMAPIandPowerTalk = 3, 
} WdMailSystem;

// WdOrganizerObject
typedef enum tagWdOrganizerObject
{
	wdOrganizerObjectStyles = 0, 
	wdOrganizerObjectAutoText = 1, 
	wdOrganizerObjectCommandBars = 2,
	wdOrganizerObjectProjectItems = 3, 
} WdOrganizerObject;

// WdDocumentMedium
typedef enum tagWdDocumentMedium
{
	wdEmailMessage = 0, 
	wdDocument = 1, 
	wdWebPage = 2, 
} WdDocumentMedium;

// MsoLanguageID
typedef enum tagMsoLanguageID
{
	msoLanguageIDMixed = -2, 
	msoLanguageIDNone = 0, 
	msoLanguageIDNoProofing = 1024, 
	msoLanguageIDAfrikaans = 1078, 
	msoLanguageIDAlbanian = 1052, 
	msoLanguageIDAmharic = 1118, 
	msoLanguageIDArabicAlgeria = 5121, 
	msoLanguageIDArabicBahrain = 15361,
	msoLanguageIDArabicEgypt = 3073, 
	msoLanguageIDArabicIraq = 2049, 
	msoLanguageIDArabicJordan = 11265, 
	msoLanguageIDArabicKuwait = 13313, 
	msoLanguageIDArabicLebanon = 12289, 
	msoLanguageIDArabicLibya = 4097, 
	msoLanguageIDArabicMorocco = 6145, 
	msoLanguageIDArabicOman = 8193, 
	msoLanguageIDArabicQatar = 16385, 
	msoLanguageIDArabic = 1025, 
	msoLanguageIDArabicSyria = 10241, 
	msoLanguageIDArabicTunisia = 7169, 
	msoLanguageIDArabicUAE = 14337, 
	msoLanguageIDArabicYemen = 9217, 
	msoLanguageIDArmenian = 1067,
	msoLanguageIDAssamese = 1101, 
	msoLanguageIDAzeriCyrillic = 2092, 
	msoLanguageIDAzeriLatin = 1068, 
	msoLanguageIDBasque = 1069, 
	msoLanguageIDByelorussian = 1059, 
	msoLanguageIDBengali = 1093, 
	msoLanguageIDBosnian = 4122,
	msoLanguageIDBosnianBosniaHerzegovinaCyrillic = 8218, 
	msoLanguageIDBosnianBosniaHerzegovinaLatin = 5146, 
	msoLanguageIDBulgarian = 1026, 
	msoLanguageIDBurmese = 1109, 
	msoLanguageIDCatalan = 1027, 
	msoLanguageIDChineseHongKongSAR = 3076, 
	msoLanguageIDChineseMacaoSAR = 5124, 
	msoLanguageIDSimplifiedChinese = 2052, 
	msoLanguageIDChineseSingapore = 4100, 
	msoLanguageIDTraditionalChinese = 1028, 
	msoLanguageIDCherokee = 1116, 
	msoLanguageIDCroatian = 1050, 
	msoLanguageIDCzech = 1029, 
	msoLanguageIDDanish = 1030, 
	msoLanguageIDDivehi = 1125, 
	msoLanguageIDBelgianDutch = 2067, 
	msoLanguageIDDutch = 1043, 
	msoLanguageIDDzongkhaBhutan = 2129, 
	msoLanguageIDEdo = 1126, 
	msoLanguageIDEnglishAUS = 3081,
	msoLanguageIDEnglishBelize = 10249, 
	msoLanguageIDEnglishCanadian = 4105,
	msoLanguageIDEnglishCaribbean = 9225, 
	msoLanguageIDEnglishIndonesia = 14345, 
	msoLanguageIDEnglishIreland = 6153, 
	msoLanguageIDEnglishJamaica = 8201, 
	msoLanguageIDEnglishNewZealand = 5129, 
	msoLanguageIDEnglishPhilippines = 13321, 
	msoLanguageIDEnglishSouthAfrica = 7177, 
	msoLanguageIDEnglishTrinidadTobago = 11273, 
	msoLanguageIDEnglishUK = 2057, 
	msoLanguageIDEnglishUS = 1033, 
	msoLanguageIDEnglishZimbabwe = 12297, 
	msoLanguageIDEstonian = 1061, 
	msoLanguageIDFaeroese = 1080, 
	msoLanguageIDFarsi = 1065, 
	msoLanguageIDFilipino = 1124, 
	msoLanguageIDFinnish = 1035, 
	msoLanguageIDBelgianFrench = 2060, 
	msoLanguageIDFrenchCameroon = 11276, 
	msoLanguageIDFrenchCanadian = 3084, 
	msoLanguageIDFrenchCotedIvoire = 12300, 
	msoLanguageIDFrench = 1036, 
	msoLanguageIDFrenchHaiti = 15372,
	msoLanguageIDFrenchLuxembourg = 5132, 
	msoLanguageIDFrenchMali = 13324, 
	msoLanguageIDFrenchMonaco = 6156,
	msoLanguageIDFrenchMorocco = 14348, 
	msoLanguageIDFrenchReunion = 8204, 
	msoLanguageIDFrenchSenegal = 10252, 
	msoLanguageIDSwissFrench = 4108, 
	msoLanguageIDFrenchWestIndies = 7180, 
	msoLanguageIDFrenchZaire = 9228, 
	msoLanguageIDFrisianNetherlands = 1122, 
	msoLanguageIDFulfulde = 1127, 
	msoLanguageIDGaelicIreland = 2108, 
	msoLanguageIDGaelicScotland = 1084, 
	msoLanguageIDGalician = 1110, 
	msoLanguageIDGeorgian = 1079, 
	msoLanguageIDGermanAustria = 3079, 
	msoLanguageIDGerman = 1031, 
	msoLanguageIDGermanLiechtenstein = 5127, 
	msoLanguageIDGermanLuxembourg = 4103, 
	msoLanguageIDSwissGerman = 2055, 
	msoLanguageIDGreek = 1032, 
	msoLanguageIDGuarani = 1140,
	msoLanguageIDGujarati = 1095, 
	msoLanguageIDHausa = 1128, 
	msoLanguageIDHawaiian = 1141, 
	msoLanguageIDHebrew = 1037, 
	msoLanguageIDHindi = 1081, 
	msoLanguageIDHungarian = 1038, 
	msoLanguageIDIbibio = 1129, 
	msoLanguageIDIcelandic = 1039,
	msoLanguageIDIgbo = 1136, 
	msoLanguageIDIndonesian = 1057, 
	msoLanguageIDInuktitut = 1117, 
	msoLanguageIDItalian = 1040, 
	msoLanguageIDSwissItalian = 2064, 
	msoLanguageIDJapanese = 1041, 
	msoLanguageIDKannada = 1099, 
	msoLanguageIDKanuri = 1137, 
	msoLanguageIDKashmiri = 1120, 
	msoLanguageIDKashmiriDevanagari = 2144, 
	msoLanguageIDKazakh = 1087, 
	msoLanguageIDKhmer = 1107, 
	msoLanguageIDKirghiz = 1088, 
	msoLanguageIDKonkani = 1111,
	msoLanguageIDKorean = 1042, 
	msoLanguageIDKyrgyz = 1088, 
	msoLanguageIDLatin = 1142, 
	msoLanguageIDLao = 1108, 
	msoLanguageIDLatvian = 1062, 
	msoLanguageIDLithuanian = 1063, 
	msoLanguageIDMacedonian = 1071, 
	msoLanguageIDMalaysian = 1086, 
	msoLanguageIDMalayBruneiDarussalam = 2110, 
	msoLanguageIDMalayalam = 1100, 
	msoLanguageIDMaltese = 1082, 
	msoLanguageIDManipuri = 1112, 
	msoLanguageIDMaori = 1153,
	msoLanguageIDMarathi = 1102, 
	msoLanguageIDMongolian = 1104, 
	msoLanguageIDNepali = 1121, 
	msoLanguageIDNorwegianBokmol = 1044, 
	msoLanguageIDNorwegianNynorsk = 2068, 
	msoLanguageIDOriya = 1096, 
	msoLanguageIDOromo = 1138, 
	msoLanguageIDPashto = 1123, 
	msoLanguageIDPolish = 1045,
	msoLanguageIDBrazilianPortuguese = 1046, 
	msoLanguageIDPortuguese = 2070, 
	msoLanguageIDPunjabi = 1094, 
	msoLanguageIDQuechuaBolivia = 1131, 
	msoLanguageIDQuechuaEcuador = 2155, 
	msoLanguageIDQuechuaPeru = 3179, 
	msoLanguageIDRhaetoRomanic = 1047, 
	msoLanguageIDRomanianMoldova = 2072, 
	msoLanguageIDRomanian = 1048, 
	msoLanguageIDRussianMoldova = 2073, 
	msoLanguageIDRussian = 1049, 
	msoLanguageIDSamiLappish = 1083, 
	msoLanguageIDSanskrit = 1103, 
	msoLanguageIDSepedi = 1132, 
	msoLanguageIDSerbianBosniaHerzegovinaCyrillic = 7194, 
	msoLanguageIDSerbianBosniaHerzegovinaLatin = 6170, 
	msoLanguageIDSerbianCyrillic = 3098, 
	msoLanguageIDSerbianLatin = 2074,
	msoLanguageIDSesotho = 1072, 
	msoLanguageIDSindhi = 1113, 
	msoLanguageIDSindhiPakistan = 2137, 
	msoLanguageIDSinhalese = 1115,
	msoLanguageIDSlovak = 1051, 
	msoLanguageIDSlovenian = 1060, 
	msoLanguageIDSomali = 1143, 
	msoLanguageIDSorbian = 1070, 
	msoLanguageIDSpanishArgentina = 11274, 
	msoLanguageIDSpanishBolivia = 16394, 
	msoLanguageIDSpanishChile = 13322, 
	msoLanguageIDSpanishColombia = 9226, 
	msoLanguageIDSpanishCostaRica = 5130, 
	msoLanguageIDSpanishDominicanRepublic = 7178, 
	msoLanguageIDSpanishEcuador = 12298, 
	msoLanguageIDSpanishElSalvador = 17418, 
	msoLanguageIDSpanishGuatemala = 4106, 
	msoLanguageIDSpanishHonduras = 18442, 
	msoLanguageIDMexicanSpanish = 2058, 
	msoLanguageIDSpanishNicaragua = 19466, 
	msoLanguageIDSpanishPanama = 6154, 
	msoLanguageIDSpanishParaguay = 15370, 
	msoLanguageIDSpanishPeru = 10250, 
	msoLanguageIDSpanishPuertoRico = 20490, 
	msoLanguageIDSpanishModernSort = 3082, 
	msoLanguageIDSpanish = 1034,
	msoLanguageIDSpanishUruguay = 14346,
	msoLanguageIDSpanishVenezuela = 8202, 
	msoLanguageIDSutu = 1072, 
	msoLanguageIDSwahili = 1089, 
	msoLanguageIDSwedishFinland = 2077, 
	msoLanguageIDSwedish = 1053, 
	msoLanguageIDSyriac = 1114, 
	msoLanguageIDTajik = 1064, 
	msoLanguageIDTamil = 1097, 
	msoLanguageIDTamazight = 1119, 
	msoLanguageIDTamazightLatin = 2143, 
	msoLanguageIDTatar = 1092, 
	msoLanguageIDTelugu = 1098, 
	msoLanguageIDThai = 1054, 
	msoLanguageIDTibetan = 1105, 
	msoLanguageIDTigrignaEthiopic = 1139, 
	msoLanguageIDTigrignaEritrea = 2163, 
	msoLanguageIDTsonga = 1073, 
	msoLanguageIDTswana = 1074, 
	msoLanguageIDTurkish = 1055, 
	msoLanguageIDTurkmen = 1090, 
	msoLanguageIDUkrainian = 1058,
	msoLanguageIDUrdu = 1056, 
	msoLanguageIDUzbekCyrillic = 2115, 
	msoLanguageIDUzbekLatin = 1091, 
	msoLanguageIDVenda = 1075, 
	msoLanguageIDVietnamese = 1066, 
	msoLanguageIDWelsh = 1106,
	msoLanguageIDXhosa = 1076, 
	msoLanguageIDYi = 1144, 
	msoLanguageIDYiddish = 1085, 
	msoLanguageIDYoruba = 1130, 
	msoLanguageIDZulu = 1077, 
} MsoLanguageID;

// MsoFeatureInstall
typedef enum tagMsoFeatureInstall
{
	msoFeatureInstallNone = 0, 
	msoFeatureInstallOnDemand = 1, 
	msoFeatureInstallOnDemandWithUI = 2, 
} MsoFeatureInstall;

// MsoAutomationSecurity
typedef enum tagMsoAutomationSecurity
{
	msoAutomationSecurityLow = 1, 
	msoAutomationSecurityByUI = 2, 
	msoAutomationSecurityForceDisable = 3, 
} MsoAutomationSecurity;

// MsoFileDialogType
typedef enum tagMsoFileDialogType
{
	msoFileDialogOpen = 1,
	msoFileDialogSaveAs = 2, 
	msoFileDialogFilePicker = 3, 
	msoFileDialogFolderPicker = 4, 
} MsoFileDialogType;

// _Application
// {00020970-0000-0000-C000-000000000046}
#undef INTERFACE
#define INTERFACE _Application
DECLARE_INTERFACE_(_Application, IDispatch)
{
#ifndef __cplusplus
	// IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	// IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	// _Application methods:
	STDMETHOD_(HRESULT, Get_Application) (THIS_ WordApplication** prop) PURE;
	STDMETHOD_(HRESULT, Get_Creator) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** prop) PURE;
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* prop) PURE;
	STDMETHOD_(HRESULT, Get_Documents) (THIS_ Documents** prop) PURE;
	STDMETHOD_(HRESULT, Get_Windows) (THIS_ WordWindows** prop) PURE;
	STDMETHOD_(HRESULT, Get_ActiveDocument) (THIS_ WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ActiveWindow) (THIS_ Window** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Selection) (THIS_ Selection** prop) PURE; 
	STDMETHOD_(HRESULT, Get_WordBasic) (THIS_ IDispatch** prop) PURE;
	STDMETHOD_(HRESULT, Get_RecentFiles) (THIS_ RecentFiles** prop) PURE; 
	STDMETHOD_(HRESULT, Get_NormalTemplate) (THIS_ Template** prop) PURE; 
	STDMETHOD_(HRESULT, Get_System) (THIS_ WordSystem** prop) PURE; 
	STDMETHOD_(HRESULT, Get_AutoCorrect) (THIS_ AutoCorrect** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FontNames) (THIS_ FontNames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_LandscapeFontNames) (THIS_ FontNames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_PortraitFontNames) (THIS_ FontNames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Languages) (THIS_ Languages** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Assistant) (THIS_ Assistant** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Browser) (THIS_ Browser** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FileConverters) (THIS_ FileConverters** prop) PURE; 
	STDMETHOD_(HRESULT, Get_MailingLabel) (THIS_ MailingLabel** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Dialogs) (THIS_ Dialogs** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CaptionLabels) (THIS_ CaptionLabels** prop) PURE; 
	STDMETHOD_(HRESULT, Get_AutoCaptions) (THIS_ AutoCaptions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_AddIns) (THIS_ WordAddIns** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Visible) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Visible) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Version) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_ScreenUpdating) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ScreenUpdating) (THIS_ VARIANT_BOOL prop) PURE;
	STDMETHOD_(HRESULT, Get_PrintPreview) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, Set_PrintPreview) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Tasks) (THIS_ Tasks** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisplayStatusBar) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisplayStatusBar) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SpecialMode) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_UsableWidth) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_UsableHeight) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_MathCoprocessorAvailable) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_MouseAvailable) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_International) (THIS_ WdInternationalIndex Index, VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Build) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_CapsLock) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_NumLock) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_UserName) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_UserName) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_UserInitials) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_UserInitials) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_UserAddress) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_UserAddress) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_MacroContainer) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisplayRecentFiles) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisplayRecentFiles) (THIS_ VARIANT_BOOL prop) PURE;
	STDMETHOD_(HRESULT, Get_CommandBars) (THIS_ CommandBars** prop) PURE; 
	STDMETHOD_(HRESULT, Get_SynonymInfo) (THIS_ BSTR Word, VARIANT* LanguageID, SynonymInfo** prop) PURE; 
	STDMETHOD_(HRESULT, Get_VBE) (THIS_ VBE** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DefaultSaveFormat) (THIS_ BSTR* prop) PURE;
	STDMETHOD_(HRESULT, Set_DefaultSaveFormat) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_ListGalleries) (THIS_ ListGalleries** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ActivePrinter) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ActivePrinter) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_Templates) (THIS_ Templates** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CustomizationContext) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Set_CustomizationContext) (THIS_ IDispatch* prop) PURE; 
	STDMETHOD_(HRESULT, Get_KeyBindings) (THIS_ KeyBindings** prop) PURE; 
	STDMETHOD_(HRESULT, Get_KeysBoundTo) (THIS_ WdKeyCategory KeyCategory, BSTR Command, VARIANT* CommandParameter, KeysBoundTo** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FindKey) (THIS_ long KeyCode, VARIANT* KeyCode2, KeyBinding** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Caption) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Caption) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_Path) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisplayScrollBars) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisplayScrollBars) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_StartupPath) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_StartupPath) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_BackgroundSavingStatus) (THIS_ long* prop) PURE;
	STDMETHOD_(HRESULT, Get_BackgroundPrintingStatus) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Left) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Left) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_Top) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Top) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_Width) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Width) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_Height) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Height) (THIS_ long prop) PURE;
	STDMETHOD_(HRESULT, Get_WindowState) (THIS_ WdWindowState* prop) PURE; 
	STDMETHOD_(HRESULT, Set_WindowState) (THIS_ WdWindowState prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisplayAutoCompleteTips) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisplayAutoCompleteTips) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Options) (THIS_ Options** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisplayAlerts) (THIS_ WdAlertLevel* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisplayAlerts) (THIS_ WdAlertLevel prop) PURE; 
	STDMETHOD_(HRESULT, Get_CustomDictionaries) (THIS_ Dictionaries** prop) PURE; 
	STDMETHOD_(HRESULT, Get_PathSeparator) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_StatusBar) (THIS_ BSTR ) PURE; 
	STDMETHOD_(HRESULT, Get_MAPIAvailable) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisplayScreenTips) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisplayScreenTips) (THIS_ VARIANT_BOOL prop) PURE;
	STDMETHOD_(HRESULT, Get_EnableCancelKey) (THIS_ WdEnableCancelKey* prop) PURE; 
	STDMETHOD_(HRESULT, Set_EnableCancelKey) (THIS_ WdEnableCancelKey prop) PURE; 
	STDMETHOD_(HRESULT, Get_UserControl) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_FileSearch) (THIS_ WordFileSearch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_MailSystem) (THIS_ WdMailSystem* prop) PURE; 
	STDMETHOD_(HRESULT, Get_DefaultTableSeparator) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DefaultTableSeparator) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_ShowVisualBasicEditor) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowVisualBasicEditor) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_BrowseExtraFileTypes) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_BrowseExtraFileTypes) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_IsObjectValid) (THIS_ IDispatch* Object, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_HangulHanjaDictionaries) (THIS_ HangulHanjaConversionDictionaries** prop) PURE; 
	STDMETHOD_(HRESULT, Get_MailMessage) (THIS_ MailMessage** prop) PURE;
	STDMETHOD_(HRESULT, Get_FocusInMailHeader) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Quit) (THIS_ VARIANT* SaveChanges, VARIANT* OriginalFormat, VARIANT* RouteDocument) PURE; 
	STDMETHOD_(HRESULT, ScreenRefresh) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PrintOutOld) (THIS_ VARIANT* Background, VARIANT* Append, VARIANT* WordRange, VARIANT* OutputFileName, VARIANT* From, VARIANT* To, VARIANT* Item, VARIANT* Copies, VARIANT* Pages, VARIANT* PageType, VARIANT* PrintToFile, VARIANT* Collate, VARIANT* FileName, VARIANT* ActivePrinterMacGX, VARIANT* ManualDuplexPrint) PURE; 
	STDMETHOD_(HRESULT, LookupNameProperties) (THIS_ BSTR Name) PURE; 
	STDMETHOD_(HRESULT, SubstituteFont) (THIS_ BSTR UnavailableFont, BSTR SubstituteFont) PURE; 
	STDMETHOD_(HRESULT, Repeat) (THIS_ VARIANT* Times, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, DDEExecute) (THIS_ long Channel, BSTR Command) PURE;
	STDMETHOD_(HRESULT, DDEInitiate) (THIS_ BSTR App, BSTR Topic, long* prop) PURE; 
	STDMETHOD_(HRESULT, DDEPoke) (THIS_ long Channel, BSTR Item, BSTR Data) PURE; 
	STDMETHOD_(HRESULT, DDERequest) (THIS_ long Channel, BSTR Item, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, DDETerminate) (THIS_ long Channel) PURE; 
	STDMETHOD_(HRESULT, DDETerminateAll) (THIS ) PURE; 
	STDMETHOD_(HRESULT, BuildKeyCode) (THIS_ WdKey Arg1, VARIANT* Arg2, VARIANT* Arg3, VARIANT* Arg4, long* prop) PURE; 
	STDMETHOD_(HRESULT, KeyString) (THIS_ long KeyCode, VARIANT* KeyCode2, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, OrganizerCopy) (THIS_ BSTR Source, BSTR Destination, BSTR Name, WdOrganizerObject Object) PURE; 
	STDMETHOD_(HRESULT, OrganizerDelete) (THIS_ BSTR Source, BSTR Name, WdOrganizerObject Object) PURE; 
	STDMETHOD_(HRESULT, OrganizerRename) (THIS_ BSTR Source, BSTR Name, BSTR NewName, WdOrganizerObject Object) PURE; 
	STDMETHOD_(HRESULT, AddAddress) (THIS_ SAFEARRAY** TagID, SAFEARRAY** Value) PURE; 
	STDMETHOD_(HRESULT, GetAddress) (THIS_ VARIANT* Name, VARIANT* AddressProperties, VARIANT* UseAutoText, VARIANT* DisplaySelectDialog, VARIANT* SelectDialog, VARIANT* CheckNamesDialog, VARIANT* RecentAddressesChoice, VARIANT* UpdateRecentAddresses, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, CheckGrammar) (THIS_ BSTR String, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, CheckSpelling) (THIS_ BSTR Word, VARIANT* CustomDictionary, VARIANT* IgnoreUppercase, VARIANT* MainDictionary, VARIANT* CustomDictionary2, VARIANT* CustomDictionary3, VARIANT* CustomDictionary4, VARIANT* CustomDictionary5, VARIANT* CustomDictionary6, VARIANT* CustomDictionary7, VARIANT* CustomDictionary8, VARIANT* CustomDictionary9, VARIANT* CustomDictionary10, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, ResetIgnoreAll) (THIS ) PURE; 
	STDMETHOD_(HRESULT, GetSpellingSuggestions) (THIS_ BSTR Word, VARIANT* CustomDictionary, VARIANT* IgnoreUppercase, VARIANT* MainDictionary, VARIANT* SuggestionMode, VARIANT* CustomDictionary2, VARIANT* CustomDictionary3, VARIANT* CustomDictionary4, VARIANT* CustomDictionary5, VARIANT* CustomDictionary6, VARIANT* CustomDictionary7, VARIANT* CustomDictionary8, VARIANT* CustomDictionary9, VARIANT* CustomDictionary10, SpellingSuggestions** prop) PURE; 
	STDMETHOD_(HRESULT, GoBack) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Help) (THIS_ VARIANT* HelpType) PURE; 
	STDMETHOD_(HRESULT, AutomaticChange) (THIS ) PURE;
	STDMETHOD_(HRESULT, ShowMe) (THIS ) PURE; 
	STDMETHOD_(HRESULT, HelpTool) (THIS ) PURE; 
	STDMETHOD_(HRESULT, NewWindow) (THIS_ Window** prop) PURE;
	STDMETHOD_(HRESULT, ListCommands) (THIS_ VARIANT_BOOL ListAllCommands) PURE; 
	STDMETHOD_(HRESULT, ShowClipboard) (THIS ) PURE; 
	STDMETHOD_(HRESULT, OnTime) (THIS_ VARIANT* When, BSTR Name, VARIANT* Tolerance) PURE; 
	STDMETHOD_(HRESULT, NextLetter) (THIS ) PURE; 
	STDMETHOD_(HRESULT, MountVolume) (THIS_ BSTR Zone, BSTR Server, BSTR Volume, VARIANT* User, VARIANT* UserPassword, VARIANT* VolumePassword, short* prop) PURE; 
	STDMETHOD_(HRESULT, CleanString) (THIS_ BSTR String, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, SendFax) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ChangeFileOpenDirectory) (THIS_ BSTR Path) PURE; 
	STDMETHOD_(HRESULT, RunOld) (THIS_ BSTR MacroName) PURE; 
	STDMETHOD_(HRESULT, GoForward) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Move) (THIS_ long Left, long Top) PURE; 
	STDMETHOD_(HRESULT, Resize) (THIS_ long Width, long Height) PURE; 
	STDMETHOD_(HRESULT, InchesToPoints) (THIS_ float Inches, float* prop) PURE; 
	STDMETHOD_(HRESULT, CentimetersToPoints) (THIS_ float Centimeters, float* prop) PURE; 
	STDMETHOD_(HRESULT, MillimetersToPoints) (THIS_ float Millimeters, float* prop) PURE; 
	STDMETHOD_(HRESULT, PicasToPoints) (THIS_ float Picas, float* prop) PURE; 
	STDMETHOD_(HRESULT, LinesToPoints) (THIS_ float Lines, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToInches) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToCentimeters) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToMillimeters) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToPicas) (THIS_ float Points, float* prop) PURE; 
	STDMETHOD_(HRESULT, PointsToLines) (THIS_ float Points, float* prop) PURE;
	STDMETHOD_(HRESULT, Activate) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PointsToPixels) (THIS_ float Points, VARIANT* fVertical, float* prop) PURE;
	STDMETHOD_(HRESULT, PixelsToPoints) (THIS_ float Pixels, VARIANT* fVertical, float* prop) PURE; 
	STDMETHOD_(HRESULT, KeyboardLatin) (THIS ) PURE; 
	STDMETHOD_(HRESULT, KeyboardBidi) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ToggleKeyboard) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Keyboard) (THIS_ long LangId, long* prop) PURE; 
	STDMETHOD_(HRESULT, ProductCode) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, DefaultWebOptions) (THIS_ DefaultWebOptions** prop) PURE; 
	STDMETHOD_(HRESULT, DiscussionSupport) (THIS_ VARIANT* WordRange, VARIANT* cid, VARIANT* piCSE) PURE; 
	STDMETHOD_(HRESULT, SetDefaultTheme) (THIS_ BSTR Name, WdDocumentMedium DocumentType) PURE; 
	STDMETHOD_(HRESULT, GetDefaultTheme) (THIS_ WdDocumentMedium DocumentType, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_EmailOptions) (THIS_ EmailOptions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Language) (THIS_ MsoLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Get_COMAddIns) (THIS_ COMAddIns** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CheckLanguage) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_CheckLanguage) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageSettings) (THIS_ LanguageSettings** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Dummy1) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_AnswerWizard) (THIS_ AnswerWizard** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FeatureInstall) (THIS_ MsoFeatureInstall* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FeatureInstall) (THIS_ MsoFeatureInstall prop) PURE;
	STDMETHOD_(HRESULT, PrintOut2000) (THIS_ VARIANT* Background, VARIANT* Append, VARIANT* WordRange, VARIANT* OutputFileName, VARIANT* From, VARIANT* To, VARIANT* Item, VARIANT* Copies, VARIANT* Pages, VARIANT* PageType, VARIANT* PrintToFile, VARIANT* Collate, VARIANT* FileName, VARIANT* ActivePrinterMacGX, VARIANT* ManualDuplexPrint, VARIANT* PrintZoomColumn, VARIANT* PrintZoomRow, VARIANT* PrintZoomPaperWidth, VARIANT* PrintZoomPaperHeight) PURE; 
	STDMETHOD_(HRESULT, Run) (THIS_ BSTR MacroName, VARIANT* varg1, VARIANT* varg2, VARIANT* varg3, VARIANT* varg4, VARIANT* varg5, VARIANT* varg6, VARIANT* varg7, VARIANT* varg8, VARIANT* varg9, VARIANT* varg10, VARIANT* varg11, VARIANT* varg12, VARIANT* varg13, VARIANT* varg14, VARIANT* varg15, VARIANT* varg16, VARIANT* varg17, VARIANT* varg18, VARIANT* varg19, VARIANT* varg20, VARIANT* varg21, VARIANT* varg22, VARIANT* varg23, VARIANT* varg24, VARIANT* varg25, VARIANT* varg26, VARIANT* varg27, VARIANT* varg28, VARIANT* varg29, VARIANT* varg30, VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, PrintOut) (THIS_ VARIANT* Background, VARIANT* Append, VARIANT* WordRange, VARIANT* OutputFileName, VARIANT* From, VARIANT* To, VARIANT* Item, VARIANT* Copies, VARIANT* Pages, VARIANT* PageType, VARIANT* PrintToFile, VARIANT* Collate, VARIANT* FileName, VARIANT* ActivePrinterMacGX, VARIANT* ManualDuplexPrint, VARIANT* PrintZoomColumn, VARIANT* PrintZoomRow, VARIANT* PrintZoomPaperWidth, VARIANT* PrintZoomPaperHeight) PURE; 
	STDMETHOD_(HRESULT, Get_AutomationSecurity) (THIS_ MsoAutomationSecurity* prop) PURE; 
	STDMETHOD_(HRESULT, Set_AutomationSecurity) (THIS_ MsoAutomationSecurity prop) PURE; 
	STDMETHOD_(HRESULT, Get_FileDialog) (THIS_ MsoFileDialogType FileDialogType, FileDialog** prop) PURE; 
	STDMETHOD_(HRESULT, Get_EmailTemplate) (THIS_ BSTR* prop) PURE;
	STDMETHOD_(HRESULT, Set_EmailTemplate) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_ShowWindowsInTaskbar) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowWindowsInTaskbar) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_NewDocument) (THIS_ NewFile** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ShowStartupDialog) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowStartupDialog) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_AutoCorrectEmail) (THIS_ AutoCorrect** prop) PURE; 
	STDMETHOD_(HRESULT, Get_TaskPanes) (THIS_ TaskPanes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DefaultLegalBlackline) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DefaultLegalBlackline) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Dummy2) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_SmartTagRecognizers) (THIS_ SmartTagRecognizers** prop) PURE; 
	STDMETHOD_(HRESULT, Get_SmartTagTypes) (THIS_ SmartTagTypes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLNamespaces) (THIS_ XMLNamespaces** prop) PURE; 
	STDMETHOD_(HRESULT, PutFocusInMailHeader) (THIS ) PURE;
	STDMETHOD_(HRESULT, Get_ArbitraryXMLSupportAvailable) (THIS_ VARIANT_BOOL* prop) PURE; 
};
typedef _Application* LPAPPLICATION;
#ifdef __cplusplus
// _Application  {00020970-0000-0000-C000-000000000046}
//  [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS T_ApplicationProxy : public __OCF TAutoProxy
{
public:
	T_ApplicationProxy() : TAutoProxy(0x0) {}

	// _Application:   [dispid 1000]
	WordApplication* _Application();

	// Creator:   [dispid 1001]
	long Creator();

	// Parent:   [dispid 1002]
	IDispatch* Parent();

	// Name:   [dispid 0]
	__OCF TAutoString Name();

	// _Documents:   [dispid 6]
	void _Documents(TDocumentsProxy& Obj);

	// _Windows:   [dispid 2]
	void _GetWindows(TWindowsProxy& Obj);

	// ActiveDocument:   [dispid 3]
	T_DocumentProxy* ActiveDocument();

	// ActiveWindow:   [dispid 4]
	void ActiveWindow(TWindowProxy& Obj);

	// _Selection:   [dispid 5]
	void _Selection(TSelectionProxy& Obj);

	// WordBasic:   [dispid 1]
	IDispatch* WordBasic();

	// _RecentFiles:   [dispid 7]
	void _RecentFiles(TRecentFilesProxy& Obj);

	// NormalTemplate:   [dispid 8]
	void NormalTemplate(TTemplateProxy& Obj);

	// _System:   [dispid 9]
	void _System(TSystemProxy& Obj);

	// _AutoCorrect:   [dispid 10]
	void _AutoCorrect(TAutoCorrectProxy& Obj);

	// _FontNames:   [dispid 11]
	void _FontNames(TFontNamesProxy& Obj);

	// LandscapeFontNames:   [dispid 12]
	void LandscapeFontNames(TFontNamesProxy& Obj);

	// PortraitFontNames:   [dispid 13]
	void PortraitFontNames(TFontNamesProxy& Obj);

	// _Languages:   [dispid 14]
	void _Languages(TLanguagesProxy& Obj);

	// _Assistant:   [dispid 15]
	void _Assistant(TAssistantProxy& Obj);

	// _Browser:   [dispid 16]
	void _Browser(TBrowserProxy& Obj);

	// _FileConverters:   [dispid 17]
	void _FileConverters(TFileConvertersProxy& Obj);

	// _MailingLabel:   [dispid 18]
	void _MailingLabel(TMailingLabelProxy& Obj);

	// _Dialogs:   [dispid 19]
	void _Dialogs(TDialogsProxy& Obj);

	// _CaptionLabels:   [dispid 20]
	void _CaptionLabels(TCaptionLabelsProxy& Obj);

	// _AutoCaptions:   [dispid 21]
	void _AutoCaptions(TAutoCaptionsProxy& Obj);

	// _AddIns:   [dispid 22]
	void _AddIns(TAddInsProxy& Obj);

	// Visible:   [dispid 23]
	/*__OWL*/ TBool Visible();

	// Visible:   [dispid 23]
	void Visible(/*__OWL*/ TBool arg0);

	// Version:   [dispid 24]
	/*__OCF*/ TString Version();

	// ScreenUpdating:   [dispid 26]
	/*__OWL*/ TBool ScreenUpdating();

	// ScreenUpdating:   [dispid 26]
	void ScreenUpdating(/*__OWL*/ TBool arg0);

	// PrintPreview:   [dispid 27]
	/*__OWL*/ TBool PrintPreview();

	// PrintPreview:   [dispid 27]
	void PrintPreview(/*__OWL*/ TBool arg0);

	// _Tasks:   [dispid 28]
	void _Tasks(TTasksProxy& Obj);

	// DisplayStatusBar:   [dispid 29]
	/*__OWL*/ TBool DisplayStatusBar();

	// DisplayStatusBar:   [dispid 29]
	void DisplayStatusBar(/*__OWL*/ TBool arg0);

	// SpecialMode:   [dispid 30]
	/*__OWL*/ TBool SpecialMode();

	// UsableWidth:   [dispid 33]
	long UsableWidth();

	// UsableHeight:   [dispid 34]
	long UsableHeight();

	// MathCoprocessorAvailable:   [dispid 36]
	/*__OWL*/ TBool MathCoprocessorAvailable();

	// MouseAvailable:   [dispid 37]
	/*__OWL*/ TBool MouseAvailable();

	// International:   [dispid 46]
	__OCF TAutoVal International(WdInternationalIndex Index);

	// Build:   [dispid 47]
	__OCF TAutoString Build();

	// CapsLock:   [dispid 48]
	/*__OWL*/ TBool CapsLock();

	// NumLock:   [dispid 49]
	/*__OWL*/ TBool NumLock();

	// UserName:   [dispid 52]
	__OCF TAutoString UserName();

	// UserName:   [dispid 52]
	void UserName(__OCF TAutoString arg0);

	// UserInitials:   [dispid 53]
	__OCF TAutoString UserInitials();

	// UserInitials:   [dispid 53]
	void UserInitials(__OCF TAutoString arg0);

	// UserAddress:   [dispid 54]
	__OCF TAutoString UserAddress();

	// UserAddress:   [dispid 54]
	void UserAddress(__OCF TAutoString arg0);

	// MacroContainer:   [dispid 55]
	IDispatch* MacroContainer();

	// DisplayRecentFiles:   [dispid 56]
	/*__OWL*/ TBool DisplayRecentFiles();

	// DisplayRecentFiles:   [dispid 56]
	void DisplayRecentFiles(/*__OWL*/ TBool arg0);

	// _CommandBars:   [dispid 57]
	CommandBars* _CommandBars();

	// _SynonymInfo:   [dispid 59]
	void _SynonymInfo(TSynonymInfoProxy& Obj, __OCF TAutoString Word, __OCF TAutoVal* LanguageID = 0);

	// _VBE:   [dispid 61]
	void _VBE(TVBEProxy& Obj);

	// DefaultSaveFormat:   [dispid 64]
	__OCF TAutoString DefaultSaveFormat();

	// DefaultSaveFormat:   [dispid 64]
	void DefaultSaveFormat(__OCF TAutoString arg0);

	// _ListGalleries:   [dispid 65]
	void _ListGalleries(TListGalleriesProxy& Obj);

	// ActivePrinter:   [dispid 66]
	__OCF TAutoString ActivePrinter();

	// ActivePrinter:   [dispid 66]
	void ActivePrinter(__OCF TAutoString arg0);

	// _Templates:   [dispid 67]
	void _Templates(TTemplatesProxy& Obj);

	// CustomizationContext:   [dispid 68]
	IDispatch* CustomizationContext();

	// CustomizationContext:   [dispid 68]
	void CustomizationContext(IDispatch* arg0);

	// _KeyBindings:   [dispid 69]
	void _KeyBindings(TKeyBindingsProxy& Obj);

	// _KeysBoundTo:   [dispid 70]
	void _KeysBoundTo(TKeysBoundToProxy& Obj, WdKeyCategory KeyCategory, __OCF TAutoString Command, __OCF TAutoVal* CommandParameter = 0);

	// FindKey:   [dispid 71]
	void FindKey(TKeyBindingProxy& Obj, long KeyCode, __OCF TAutoVal* KeyCode2 = 0);

	// Caption:   [dispid 80]
	__OCF TAutoString Caption();

	// Caption:   [dispid 80]
	void Caption(__OCF TAutoString arg0);

	// Path:   [dispid 81]
	__OCF TAutoString Path();

	// DisplayScrollBars:   [dispid 82]
	/*__OWL*/ TBool DisplayScrollBars();

	// DisplayScrollBars:   [dispid 82]
	void DisplayScrollBars(/*__OWL*/ TBool arg0);

	// StartupPath:   [dispid 83]
	__OCF TAutoString StartupPath();

	// StartupPath:   [dispid 83]
	void StartupPath(__OCF TAutoString arg0);

	// BackgroundSavingStatus:   [dispid 85]
	long BackgroundSavingStatus();

	// BackgroundPrintingStatus:   [dispid 86]
	long BackgroundPrintingStatus();

	// Left:   [dispid 87]
	long Left();

	// Left:   [dispid 87]
	void Left(long arg0);

	// Top:   [dispid 88]
	long Top();

	// Top:   [dispid 88]
	void Top(long arg0);

	// Width:   [dispid 89]
	long Width();

	// Width:   [dispid 89]
	void Width(long arg0);

	// Height:   [dispid 90]
	long Height();

	// Height:   [dispid 90]
	void Height(long arg0);

	// WindowState:   [dispid 91]
	WdWindowState WindowState();

	// WindowState:   [dispid 91]
	void WindowState(WdWindowState arg0);

	// DisplayAutoCompleteTips:   [dispid 92]
	/*__OWL*/ TBool DisplayAutoCompleteTips();

	// DisplayAutoCompleteTips:   [dispid 92]
	void DisplayAutoCompleteTips(/*__OWL*/ TBool arg0);

	// _Options:   [dispid 93]
	void _Options(TOptionsProxy& Obj);

	// DisplayAlerts:   [dispid 94]
	WdAlertLevel DisplayAlerts();

	// DisplayAlerts:   [dispid 94]
	void DisplayAlerts(WdAlertLevel arg0);

	// CustomDictionaries:   [dispid 95]
	void CustomDictionaries(TDictionariesProxy& Obj);

	// PathSeparator:   [dispid 96]
	__OCF TAutoString PathSeparator();

	// StatusBar:   [dispid 97]
	void StatusBar(__OCF TAutoString arg0);

	// MAPIAvailable:   [dispid 98]
	/*__OWL*/ TBool MAPIAvailable();

	// DisplayScreenTips:   [dispid 99]
	/*__OWL*/ TBool DisplayScreenTips();

	// DisplayScreenTips:   [dispid 99]
	void DisplayScreenTips(/*__OWL*/ TBool arg0);

	// EnableCancelKey:   [dispid 100]
	WdEnableCancelKey EnableCancelKey();

	// EnableCancelKey:   [dispid 100]
	void EnableCancelKey(WdEnableCancelKey arg0);

	// UserControl:   [dispid 101]
	/*__OWL*/ TBool UserControl();

	// _FileSearch:   [dispid 103]
	void _FileSearch(TFileSearchProxy& Obj);

	// MailSystem:   [dispid 104]
	WdMailSystem MailSystem();

	// DefaultTableSeparator:   [dispid 105]
	__OCF TAutoString DefaultTableSeparator();

	// DefaultTableSeparator:   [dispid 105]
	void DefaultTableSeparator(__OCF TAutoString arg0);

	// ShowVisualBasicEditor:   [dispid 106]
	/*__OWL*/ TBool ShowVisualBasicEditor();

	// ShowVisualBasicEditor:   [dispid 106]
	void ShowVisualBasicEditor(/*__OWL*/ TBool arg0);

	// BrowseExtraFileTypes:   [dispid 108]
	__OCF TAutoString BrowseExtraFileTypes();

	// BrowseExtraFileTypes:   [dispid 108]
	void BrowseExtraFileTypes(__OCF TAutoString arg0);

	// IsObjectValid:   [dispid 109]
	/*__OWL*/ TBool IsObjectValid(IDispatch* Object);

	// HangulHanjaDictionaries:   [dispid 110]
	void HangulHanjaDictionaries(THangulHanjaConversionDictionariesProxy& Obj);

	// _MailMessage:   [dispid 348]
	void _MailMessage(TMailMessageProxy& Obj);

	// FocusInMailHeader:   [dispid 386]
	/*__OWL*/ TBool FocusInMailHeader();

	// Quit:   [dispid 1105]
	void Quit(__OCF TAutoVal* SaveChanges = 0, __OCF TAutoVal* OriginalFormat = 0, __OCF TAutoVal* RouteDocument = 0);

	// ScreenRefresh:   [dispid 301]
	void ScreenRefresh();

	// PrintOutOld:   [dispid 302]
	void PrintOutOld(__OCF TAutoVal* Background = 0, __OCF TAutoVal* Append = 0, __OCF TAutoVal* WordRange = 0, __OCF TAutoVal* OutputFileName = 0, __OCF TAutoVal* From = 0, __OCF TAutoVal* To = 0, __OCF TAutoVal* Item = 0, __OCF TAutoVal* Copies = 0, __OCF TAutoVal* Pages = 0, __OCF TAutoVal* PageType = 0, __OCF TAutoVal* PrintToFile = 0, __OCF TAutoVal* Collate = 0, __OCF TAutoVal* FileName = 0, __OCF TAutoVal* ActivePrinterMacGX = 0, __OCF TAutoVal* ManualDuplexPrint = 0);

	// LookupNameProperties:   [dispid 303]
	void LookupNameProperties(__OCF TAutoString Name);

	// SubstituteFont:   [dispid 304]
	void SubstituteFont(__OCF TAutoString UnavailableFont, __OCF TAutoString SubstituteFont);

	// Repeat:   [dispid 305]
	/*__OWL*/ TBool Repeat(__OCF TAutoVal* Times = 0);

	// DDEExecute:   [dispid 310]
	void DDEExecute(long Channel, __OCF TAutoString Command);

	// DDEInitiate:   [dispid 311]
	long DDEInitiate(__OCF TAutoString App, __OCF TAutoString Topic);

	// DDEPoke:   [dispid 312]
	void DDEPoke(long Channel, __OCF TAutoString Item, __OCF TAutoString Data);

	// DDERequest:   [dispid 313]
	__OCF TAutoString DDERequest(long Channel, __OCF TAutoString Item);

	// DDETerminate:   [dispid 314]
	void DDETerminate(long Channel);

	// DDETerminateAll:   [dispid 315]
	void DDETerminateAll();

	// BuildKeyCode:   [dispid 316]
	long BuildKeyCode(WdKey Arg1, __OCF TAutoVal* Arg2 = 0, __OCF TAutoVal* Arg3 = 0, __OCF TAutoVal* Arg4 = 0);

	// KeyString:   [dispid 317]
	__OCF TAutoString KeyString(long KeyCode, __OCF TAutoVal* KeyCode2 = 0);

	// OrganizerCopy:   [dispid 318]
	void OrganizerCopy(__OCF TAutoString Source, __OCF TAutoString Destination, __OCF TAutoString Name, WdOrganizerObject Object);

	// OrganizerDelete:   [dispid 319]
	void OrganizerDelete(__OCF TAutoString Source, __OCF TAutoString Name, WdOrganizerObject Object);

	// OrganizerRename:   [dispid 320]
	void OrganizerRename(__OCF TAutoString Source, __OCF TAutoString Name, __OCF TAutoString NewName, WdOrganizerObject Object);

	// AddAddress:   [dispid 321]
	void AddAddress(wordObjects::SafeArray<__OCF TAutoString>* TagID, wordObjects::SafeArray<__OCF TAutoString>* Value);

	// GetAddress:   [dispid 322]
	__OCF TAutoString GetAddress(__OCF TAutoVal* Name = 0, __OCF TAutoVal* AddressProperties = 0, __OCF TAutoVal* UseAutoText = 0, __OCF TAutoVal* DisplaySelectDialog = 0, __OCF TAutoVal* SelectDialog = 0, __OCF TAutoVal* CheckNamesDialog = 0, __OCF TAutoVal* RecentAddressesChoice = 0, __OCF TAutoVal* UpdateRecentAddresses = 0);

	// CheckGrammar:   [dispid 323]
	/*__OWL*/ TBool CheckGrammar(__OCF TAutoString String);

	// CheckSpelling:   [dispid 324]
	/*__OWL*/ TBool CheckSpelling(__OCF TAutoString Word, __OCF TAutoVal* CustomDictionary = 0, __OCF TAutoVal* IgnoreUppercase = 0, __OCF TAutoVal* MainDictionary = 0, __OCF TAutoVal* CustomDictionary2 = 0, __OCF TAutoVal* CustomDictionary3 = 0, __OCF TAutoVal* CustomDictionary4 = 0, __OCF TAutoVal* CustomDictionary5 = 0, __OCF TAutoVal* CustomDictionary6 = 0, __OCF TAutoVal* CustomDictionary7 = 0, __OCF TAutoVal* CustomDictionary8 = 0, __OCF TAutoVal* CustomDictionary9 = 0, __OCF TAutoVal* CustomDictionary10 = 0);

	// ResetIgnoreAll:   [dispid 326]
	void ResetIgnoreAll();

	// GetSpellingSuggestions:   [dispid 327]
	void GetSpellingSuggestions(TSpellingSuggestionsProxy& Obj, __OCF TAutoString Word, __OCF TAutoVal* CustomDictionary = 0, __OCF TAutoVal* IgnoreUppercase = 0, __OCF TAutoVal* MainDictionary = 0, __OCF TAutoVal* SuggestionMode = 0, __OCF TAutoVal* CustomDictionary2 = 0, __OCF TAutoVal* CustomDictionary3 = 0, __OCF TAutoVal* CustomDictionary4 = 0, __OCF TAutoVal* CustomDictionary5 = 0, __OCF TAutoVal* CustomDictionary6 = 0, __OCF TAutoVal* CustomDictionary7 = 0, __OCF TAutoVal* CustomDictionary8 = 0, __OCF TAutoVal* CustomDictionary9 = 0, __OCF TAutoVal* CustomDictionary10 = 0);

	// GoBack:   [dispid 328]
	void GoBack();

	// Help:   [dispid 329]
	void Help(__OCF TAutoVal* HelpType);

	// AutomaticChange:   [dispid 330]
	void AutomaticChange();

	// ShowMe:   [dispid 331]
	void ShowMe();

	// HelpTool:   [dispid 332]
	void HelpTool();

	// NewWindow:   [dispid 345]
	void NewWindow(TWindowProxy& Obj);

	// ListCommands:   [dispid 346]
	void ListCommands(/*__OWL*/ TBool ListAllCommands);

	// ShowClipboard:   [dispid 349]
	void ShowClipboard();

	// OnTime:   [dispid 350]
	void OnTime(__OCF TAutoVal* When, __OCF TAutoString Name, __OCF TAutoVal* Tolerance = 0);

	// NextLetter:   [dispid 351]
	void NextLetter();

	// MountVolume:   [dispid 353]
	short MountVolume(__OCF TAutoString Zone, __OCF TAutoString Server, __OCF TAutoString Volume, __OCF TAutoVal* User = 0, __OCF TAutoVal* UserPassword = 0, __OCF TAutoVal* VolumePassword = 0);

	// CleanString:   [dispid 354]
	__OCF TAutoString CleanString(__OCF TAutoString String);

	// SendFax:   [dispid 356]
	void SendFax();

	// ChangeFileOpenDirectory:   [dispid 357]
	void ChangeFileOpenDirectory(__OCF TAutoString Path);

	// RunOld:   [dispid 358]
	void RunOld(__OCF TAutoString MacroName);

	// GoForward:   [dispid 359]
	void GoForward();

	// Move:   [dispid 360]
	void Move(long Left, long Top);

	// Resize:   [dispid 361]
	void Resize(long Width, long Height);

	// InchesToPoints:   [dispid 370]
	float InchesToPoints(float Inches);

	// CentimetersToPoints:   [dispid 371]
	float CentimetersToPoints(float Centimeters);

	// MillimetersToPoints:   [dispid 372]
	float MillimetersToPoints(float Millimeters);

	// PicasToPoints:   [dispid 373]
	float PicasToPoints(float Picas);

	// LinesToPoints:   [dispid 374]
	float LinesToPoints(float Lines);

	// PointsToInches:   [dispid 380]
	float PointsToInches(float Points);

	// PointsToCentimeters:   [dispid 381]
	float PointsToCentimeters(float Points);

	// PointsToMillimeters:   [dispid 382]
	float PointsToMillimeters(float Points);

	// PointsToPicas:   [dispid 383]
	float PointsToPicas(float Points);

	// PointsToLines:   [dispid 384]
	float PointsToLines(float Points);

	// Activate:   [dispid 385]
	void Activate();

	// PointsToPixels:   [dispid 387]
	float PointsToPixels(float Points, __OCF TAutoVal* fVertical = 0);

	// PixelsToPoints:   [dispid 388]
	float PixelsToPoints(float Pixels, __OCF TAutoVal* fVertical = 0);

	// KeyboardLatin:   [dispid 400]
	void KeyboardLatin();

	// KeyboardBidi:   [dispid 401]
	void KeyboardBidi();

	// ToggleKeyboard:   [dispid 402]
	void ToggleKeyboard();

	// Keyboard:   [dispid 446]
	long Keyboard(long LangId);

	// ProductCode:   [dispid 404]
	__OCF TAutoString ProductCode();

	// _DefaultWebOptions:   [dispid 405]
	void _DefaultWebOptions(TDefaultWebOptionsProxy& Obj);

	// DiscussionSupport:   [dispid 407]
	void DiscussionSupport(__OCF TAutoVal* WordRange, __OCF TAutoVal* cid, __OCF TAutoVal* piCSE);

	// SetDefaultTheme:   [dispid 414]
	void SetDefaultTheme(__OCF TAutoString Name, WdDocumentMedium DocumentType);

	// GetDefaultTheme:   [dispid 416]
	__OCF TAutoString GetDefaultTheme(WdDocumentMedium DocumentType);

	// _EmailOptions:   [dispid 389]
	void _EmailOptions(TEmailOptionsProxy& Obj);

	// Language:   [dispid 391]
	MsoLanguageID Language();

	// _COMAddIns:   [dispid 111]
	void _COMAddIns(TCOMAddInsProxy& Obj);

	// CheckLanguage:   [dispid 112]
	/*__OWL*/ TBool CheckLanguage();

	// CheckLanguage:   [dispid 112]
	void CheckLanguage(/*__OWL*/ TBool arg0);

	// _LanguageSettings:   [dispid 403]
	void _LanguageSettings(TLanguageSettingsProxy& Obj);

	// Dummy1:   [dispid 406]
	/*__OWL*/ TBool Dummy1();

	// _AnswerWizard:   [dispid 409]
	void _AnswerWizard(TAnswerWizardProxy& Obj);

	// FeatureInstall:   [dispid 447]
	MsoFeatureInstall FeatureInstall();

	// FeatureInstall:   [dispid 447]
	void FeatureInstall(MsoFeatureInstall arg0);

	// PrintOut2000:   [dispid 444]
	void PrintOut2000(__OCF TAutoVal* Background = 0, __OCF TAutoVal* Append = 0, __OCF TAutoVal* WordRange = 0, __OCF TAutoVal* OutputFileName = 0, __OCF TAutoVal* From = 0, __OCF TAutoVal* To = 0, __OCF TAutoVal* Item = 0, __OCF TAutoVal* Copies = 0, __OCF TAutoVal* Pages = 0, __OCF TAutoVal* PageType = 0, __OCF TAutoVal* PrintToFile = 0, __OCF TAutoVal* Collate = 0, __OCF TAutoVal* FileName = 0, __OCF TAutoVal* ActivePrinterMacGX = 0, __OCF TAutoVal* ManualDuplexPrint = 0, __OCF TAutoVal* PrintZoomColumn = 0, __OCF TAutoVal* PrintZoomRow = 0, __OCF TAutoVal* PrintZoomPaperWidth = 0, __OCF TAutoVal* PrintZoomPaperHeight = 0);

	// Run:   [dispid 445]
	__OCF TAutoVal Run(__OCF TAutoString MacroName, __OCF TAutoVal* varg1 = 0, __OCF TAutoVal* varg2 = 0, __OCF TAutoVal* varg3 = 0, __OCF TAutoVal* varg4 = 0, __OCF TAutoVal* varg5 = 0, __OCF TAutoVal* varg6 = 0, __OCF TAutoVal* varg7 = 0, __OCF TAutoVal* varg8 = 0, __OCF TAutoVal* varg9 = 0, __OCF TAutoVal* varg10 = 0, __OCF TAutoVal* varg11 = 0, __OCF TAutoVal* varg12 = 0, __OCF TAutoVal* varg13 = 0, __OCF TAutoVal* varg14 = 0, __OCF TAutoVal* varg15 = 0, __OCF TAutoVal* varg16 = 0, __OCF TAutoVal* varg17 = 0, __OCF TAutoVal* varg18 = 0, __OCF TAutoVal* varg19 = 0, __OCF TAutoVal* varg20 = 0, __OCF TAutoVal* varg21 = 0, __OCF TAutoVal* varg22 = 0, __OCF TAutoVal* varg23 = 0, __OCF TAutoVal* varg24 = 0, __OCF TAutoVal* varg25 = 0, __OCF TAutoVal* varg26 = 0, __OCF TAutoVal* varg27 = 0, __OCF TAutoVal* varg28 = 0, __OCF TAutoVal* varg29 = 0, __OCF TAutoVal* varg30 = 0);

	// PrintOut:   [dispid 448]
	void PrintOut(__OCF TAutoVal* Background = 0, __OCF TAutoVal* Append = 0, __OCF TAutoVal* WordRange = 0, __OCF TAutoVal* OutputFileName = 0, __OCF TAutoVal* From = 0, __OCF TAutoVal* To = 0, __OCF TAutoVal* Item = 0, __OCF TAutoVal* Copies = 0, __OCF TAutoVal* Pages = 0, __OCF TAutoVal* PageType = 0, __OCF TAutoVal* PrintToFile = 0, __OCF TAutoVal* Collate = 0, __OCF TAutoVal* FileName = 0, __OCF TAutoVal* ActivePrinterMacGX = 0, __OCF TAutoVal* ManualDuplexPrint = 0, __OCF TAutoVal* PrintZoomColumn = 0, __OCF TAutoVal* PrintZoomRow = 0, __OCF TAutoVal* PrintZoomPaperWidth = 0, __OCF TAutoVal* PrintZoomPaperHeight = 0);

	// AutomationSecurity:   [dispid 449]
	MsoAutomationSecurity AutomationSecurity();

	// AutomationSecurity:   [dispid 449]
	void AutomationSecurity(MsoAutomationSecurity arg0);

	// _FileDialog:   [dispid 450]
	void _FileDialog(TFileDialogProxy& Obj, MsoFileDialogType FileDialogType);

	// EmailTemplate:   [dispid 451]
	__OCF TAutoString EmailTemplate();

	// EmailTemplate:   [dispid 451]
	void EmailTemplate(__OCF TAutoString arg0);

	// ShowWindowsInTaskbar:   [dispid 452]
	/*__OWL*/ TBool ShowWindowsInTaskbar();

	// ShowWindowsInTaskbar:   [dispid 452]
	void ShowWindowsInTaskbar(/*__OWL*/ TBool arg0);

	// NewDocument:   [dispid 454]
	void NewDocument(TNewFileProxy& Obj);

	// ShowStartupDialog:   [dispid 455]
	/*__OWL*/ TBool ShowStartupDialog();

	// ShowStartupDialog:   [dispid 455]
	void ShowStartupDialog(/*__OWL*/ TBool arg0);

	// AutoCorrectEmail:   [dispid 456]
	void AutoCorrectEmail(TAutoCorrectProxy& Obj);

	// _TaskPanes:   [dispid 457]
	void _TaskPanes(TTaskPanesProxy& Obj);

	// DefaultLegalBlackline:   [dispid 459]
	/*__OWL*/ TBool DefaultLegalBlackline();

	// DefaultLegalBlackline:   [dispid 459]
	void DefaultLegalBlackline(/*__OWL*/ TBool arg0);

	// Dummy2:   [dispid 458]
	/*__OWL*/ TBool Dummy2();

	// _SmartTagRecognizers:   [dispid 460]
	void _SmartTagRecognizers(TSmartTagRecognizersProxy& Obj);

	// _SmartTagTypes:   [dispid 461]
	void _SmartTagTypes(TSmartTagTypesProxy& Obj);

	// _XMLNamespaces:   [dispid 463]
	void _XMLNamespaces(TXMLNamespacesProxy& Obj);

	// PutFocusInMailHeader:   [dispid 464]
	void PutFocusInMailHeader();

	// ArbitraryXMLSupportAvailable:   [dispid 465]
	/*__OWL*/ TBool ArbitraryXMLSupportAvailable();
};
#endif

// WdDocumentType
typedef enum tagWdDocumentType
{
	wdTypeDocument = 0, 
	wdTypeTemplate = 1, 
	wdTypeFrameset = 2, 
} WdDocumentType;

// WdDocumentKind
typedef enum tagWdDocumentKind
{
	wdDocumentNotSpecified = 0,
	wdDocumentLetter = 1, 
	wdDocumentEmail = 2, 
} WdDocumentKind;

// WdCompatibility
typedef enum tagWdCompatibility
{
	wdNoTabHangIndent = 1,
	wdNoSpaceRaiseLower = 2, 
	wdPrintColBlack = 3, 
	wdWrapTrailSpaces = 4, 
	wdNoColumnBalance = 5, 
	wdConvMailMergeEsc = 6, 
	wdSuppressSpBfAfterPgBrk = 7, 
	wdSuppressTopSpacing = 8, 
	wdOrigWordTableRules = 9, 
	wdTransparentMetafiles = 10, 
	wdShowBreaksInFrames = 11,
	wdSwapBordersFacingPages = 12, 
	wdLeaveBackslashAlone = 13, 
	wdExpandShiftReturn = 14, 
	wdDontULTrailSpace = 15, 
	wdDontBalanceSingleByteDoubleByteWidth = 16, 
	wdSuppressTopSpacingMac5 = 17, 
	wdSpacingInWholePoints = 18, 
	wdPrintBodyTextBeforeHeader = 19, 
	wdNoLeading = 20, 
	wdNoSpaceForUL = 21, 
	wdMWSmallCaps = 22, 
	wdNoExtraLineSpacing = 23,
	wdTruncateFontHeight = 24, 
	wdSubFontBySize = 25, 
	wdUsePrinterMetrics = 26, 
	wdWW6BorderRules = 27, 
	wdExactOnTop = 28,
	wdSuppressBottomSpacing = 29, 
	wdWPSpaceWidth = 30, 
	wdWPJustification = 31, 
	wdLineWrapLikeWord6 = 32, 
	wdShapeLayoutLikeWW8 = 33,
	wdFootnoteLayoutLikeWW8 = 34, 
	wdDontUseHTMLParagraphAutoSpacing = 35, 
	wdDontAdjustLineHeightInTable = 36, 
	wdForgetLastTabAlignment = 37, 
	wdAutospaceLikeWW7 = 38, 
	wdAlignTablesRowByRow = 39, 
	wdLayoutRawTableWidth = 40, 
	wdLayoutTableRowsApart = 41, 
	wdUseWord97LineBreakingRules = 42, 
	wdDontBreakWrappedTables = 43, 
	wdDontSnapTextToGridInTableWithObjects = 44, 
	wdSelectFieldWithFirstOrLastCharacter = 45,
	wdApplyBreakingRules = 46, 
	wdDontWrapTextWithPunctuation = 47, 
	wdDontUseAsianBreakRulesInGrid = 48, 
	wdUseWord2002TableStyleRules = 49, 
	wdGrowAutofit = 50, 
} WdCompatibility;

// WdProtectionType
typedef enum tagWdProtectionType
{
	wdNoProtection = -1, 
	wdAllowOnlyRevisions = 0, 
	wdAllowOnlyComments = 1, 
	wdAllowOnlyFormFields = 2, 
	wdAllowOnlyReading = 3, 
} WdProtectionType;

// WdSummaryMode
typedef enum tagWdSummaryMode
{
	wdSummaryModeHighlight = 0, 
	wdSummaryModeHideAllButSummary = 1,
	wdSummaryModeInsert = 2, 
	wdSummaryModeCreateNew = 3, 
} WdSummaryMode;

// WdJustificationMode
typedef enum tagWdJustificationMode
{
	wdJustificationModeExpand = 0, 
	wdJustificationModeCompress = 1, 
	wdJustificationModeCompressKana = 2,
} WdJustificationMode;

// WdFarEastLineBreakLevel
typedef enum tagWdFarEastLineBreakLevel
{
	wdFarEastLineBreakLevelNormal = 0, 
	wdFarEastLineBreakLevelStrict = 1, 
	wdFarEastLineBreakLevelCustom = 2, 
} WdFarEastLineBreakLevel;

// WdAutoMacros
typedef enum tagWdAutoMacros
{
	wdAutoExec = 0, 
	wdAutoNew = 1, 
	wdAutoOpen = 2, 
	wdAutoClose = 3, 
	wdAutoExit = 4, 
	wdAutoSync = 5, 
} WdAutoMacros;

// WdStatistic
typedef enum tagWdStatistic
{
	wdStatisticWords = 0, 
	wdStatisticLines = 1, 
	wdStatisticPages = 2, 
	wdStatisticCharacters = 3, 
	wdStatisticParagraphs = 4, 
	wdStatisticCharactersWithSpaces = 5, 
	wdStatisticFarEastCharacters = 6, 
} WdStatistic;

// WdEditionType
typedef enum tagWdEditionType
{
	wdPublisher = 0, 
	wdSubscriber = 1, 
} WdEditionType;

// WdEditionOption
typedef enum tagWdEditionOption
{
	wdCancelPublisher = 0,
	wdSendPublisher = 1, 
	wdSelectPublisher = 2, 
	wdAutomaticUpdate = 3, 
	wdManualUpdate = 4, 
	wdChangeAttributes = 5, 
	wdUpdateSubscriber = 6, 
	wdOpenSource = 7, 
} WdEditionOption;

// WdLetterStyle
typedef enum tagWdLetterStyle
{
	wdFullBlock = 0, 
	wdModifiedBlock = 1, 
	wdSemiBlock = 2,
} WdLetterStyle;

// WdLetterheadLocation
typedef enum tagWdLetterheadLocation
{
	wdLetterTop = 0, 
	wdLetterBottom = 1,
	wdLetterLeft = 2, 
	wdLetterRight = 3, 
} WdLetterheadLocation;

// WdSalutationType
typedef enum tagWdSalutationType
{
	wdSalutationInformal = 0, 
	wdSalutationFormal = 1, 
	wdSalutationBusiness = 2, 
	wdSalutationOther = 3, 
} WdSalutationType;

// MsoEncoding
typedef enum tagMsoEncoding
{
	msoEncodingThai = 874, 
	msoEncodingJapaneseShiftJIS = 932, 
	msoEncodingSimplifiedChineseGBK = 936, 
	msoEncodingKorean = 949,
	msoEncodingTraditionalChineseBig5 = 950, 
	msoEncodingUnicodeLittleEndian = 1200,
	msoEncodingUnicodeBigEndian = 1201, 
	msoEncodingCentralEuropean = 1250, 
	msoEncodingCyrillic = 1251, 
	msoEncodingWestern = 1252, 
	msoEncodingGreek = 1253, 
	msoEncodingTurkish = 1254, 
	msoEncodingHebrew = 1255, 
	msoEncodingArabic = 1256, 
	msoEncodingBaltic = 1257, 
	msoEncodingVietnamese = 1258, 
	msoEncodingAutoDetect = 50001, 
	msoEncodingJapaneseAutoDetect = 50932,
	msoEncodingSimplifiedChineseAutoDetect = 50936, 
	msoEncodingKoreanAutoDetect = 50949, 
	msoEncodingTraditionalChineseAutoDetect = 50950, 
	msoEncodingCyrillicAutoDetect = 51251, 
	msoEncodingGreekAutoDetect = 51253, 
	msoEncodingArabicAutoDetect = 51256, 
	msoEncodingISO88591Latin1 = 28591, 
	msoEncodingISO88592CentralEurope = 28592, 
	msoEncodingISO88593Latin3 = 28593, 
	msoEncodingISO88594Baltic = 28594,
	msoEncodingISO88595Cyrillic = 28595, 
	msoEncodingISO88596Arabic = 28596, 
	msoEncodingISO88597Greek = 28597,
	msoEncodingISO88598Hebrew = 28598, 
	msoEncodingISO88599Turkish = 28599, 
	msoEncodingISO885915Latin9 = 28605, 
	msoEncodingISO88598HebrewLogical = 38598, 
	msoEncodingISO2022JPNoHalfwidthKatakana = 50220, 
	msoEncodingISO2022JPJISX02021984 = 50221, 
	msoEncodingISO2022JPJISX02011989 = 50222, 
	msoEncodingISO2022KR = 50225, 
	msoEncodingISO2022CNTraditionalChinese = 50227,
	msoEncodingISO2022CNSimplifiedChinese = 50229, 
	msoEncodingMacRoman = 10000, 
	msoEncodingMacJapanese = 10001, 
	msoEncodingMacTraditionalChineseBig5 = 10002, 
	msoEncodingMacKorean = 10003, 
	msoEncodingMacArabic = 10004, 
	msoEncodingMacHebrew = 10005, 
	msoEncodingMacGreek1 = 10006, 
	msoEncodingMacCyrillic = 10007, 
	msoEncodingMacSimplifiedChineseGB2312 = 10008,
	msoEncodingMacRomania = 10010, 
	msoEncodingMacUkraine = 10017, 
	msoEncodingMacLatin2 = 10029, 
	msoEncodingMacIcelandic = 10079, 
	msoEncodingMacTurkish = 10081, 
	msoEncodingMacCroatia = 10082, 
	msoEncodingEBCDICUSCanada = 37, 
	msoEncodingEBCDICInternational = 500,
	msoEncodingEBCDICMultilingualROECELatin2 = 870, 
	msoEncodingEBCDICGreekModern = 875, 
	msoEncodingEBCDICTurkishLatin5 = 1026, 
	msoEncodingEBCDICGermany = 20273,
	msoEncodingEBCDICDenmarkNorway = 20277, 
	msoEncodingEBCDICFinlandSweden = 20278, 
	msoEncodingEBCDICItaly = 20280, 
	msoEncodingEBCDICLatinAmericaSpain = 20284, 
	msoEncodingEBCDICUnitedKingdom = 20285, 
	msoEncodingEBCDICJapaneseKatakanaExtended = 20290, 
	msoEncodingEBCDICFrance = 20297, 
	msoEncodingEBCDICArabic = 20420, 
	msoEncodingEBCDICGreek = 20423, 
	msoEncodingEBCDICHebrew = 20424,
	msoEncodingEBCDICKoreanExtended = 20833, 
	msoEncodingEBCDICThai = 20838, 
	msoEncodingEBCDICIcelandic = 20871, 
	msoEncodingEBCDICTurkish = 20905, 
	msoEncodingEBCDICRussian = 20880, 
	msoEncodingEBCDICSerbianBulgarian = 21025, 
	msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930, 
	msoEncodingEBCDICUSCanadaAndJapanese = 50931, 
	msoEncodingEBCDICKoreanExtendedAndKorean = 50933, 
	msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935, 
	msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937, 
	msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939,
	msoEncodingOEMUnitedStates = 437,
	msoEncodingOEMGreek437G = 737, 
	msoEncodingOEMBaltic = 775, 
	msoEncodingOEMMultilingualLatinI = 850, 
	msoEncodingOEMMultilingualLatinII = 852, 
	msoEncodingOEMCyrillic = 855, 
	msoEncodingOEMTurkish = 857, 
	msoEncodingOEMPortuguese = 860, 
	msoEncodingOEMIcelandic = 861, 
	msoEncodingOEMHebrew = 862,
	msoEncodingOEMCanadianFrench = 863, 
	msoEncodingOEMArabic = 864, 
	msoEncodingOEMNordic = 865, 
	msoEncodingOEMCyrillicII = 866, 
	msoEncodingOEMModernGreek = 869, 
	msoEncodingEUCJapanese = 51932, 
	msoEncodingEUCChineseSimplifiedChinese = 51936, 
	msoEncodingEUCKorean = 51949, 
	msoEncodingEUCTaiwaneseTraditionalChinese = 51950, 
	msoEncodingISCIIDevanagari = 57002, 
	msoEncodingISCIIBengali = 57003, 
	msoEncodingISCIITamil = 57004,
	msoEncodingISCIITelugu = 57005, 
	msoEncodingISCIIAssamese = 57006, 
	msoEncodingISCIIOriya = 57007, 
	msoEncodingISCIIKannada = 57008, 
	msoEncodingISCIIMalayalam = 57009, 
	msoEncodingISCIIGujarati = 57010,
	msoEncodingISCIIPunjabi = 57011, 
	msoEncodingArabicASMO = 708, 
	msoEncodingArabicTransparentASMO = 720, 
	msoEncodingKoreanJohab = 1361,
	msoEncodingTaiwanCNS = 20000, 
	msoEncodingTaiwanTCA = 20001, 
	msoEncodingTaiwanEten = 20002, 
	msoEncodingTaiwanIBM5550 = 20003, 
	msoEncodingTaiwanTeleText = 20004, 
	msoEncodingTaiwanWang = 20005, 
	msoEncodingIA5IRV = 20105, 
	msoEncodingIA5German = 20106, 
	msoEncodingIA5Swedish = 20107, 
	msoEncodingIA5Norwegian = 20108, 
	msoEncodingUSASCII = 20127, 
	msoEncodingT61 = 20261,
	msoEncodingISO6937NonSpacingAccent = 20269, 
	msoEncodingKOI8R = 20866, 
	msoEncodingExtAlphaLowercase = 21027, 
	msoEncodingKOI8U = 21866, 
	msoEncodingEuropa3 = 29001, 
	msoEncodingHZGBSimplifiedChinese = 52936, 
	msoEncodingSimplifiedChineseGB18030 = 54936, 
	msoEncodingUTF7 = 65000, 
	msoEncodingUTF8 = 65001, 
} MsoEncoding;

// WdFarEastLineBreakLanguageID
typedef enum tagWdFarEastLineBreakLanguageID
{
	wdLineBreakJapanese = 1041, 
	wdLineBreakKorean = 1042, 
	wdLineBreakSimplifiedChinese = 2052, 
	wdLineBreakTraditionalChinese = 1028, 
} WdFarEastLineBreakLanguageID;

// WdDisableFeaturesIntroducedAfter
typedef enum tagWdDisableFeaturesIntroducedAfter
{
	wd70 = 0, 
	wd70FE = 1, 
	wd80 = 2, 
} WdDisableFeaturesIntroducedAfter;

// WdLineEndingType
typedef enum tagWdLineEndingType
{
	wdCRLF = 0,
	wdCROnly = 1, 
	wdLFOnly = 2, 
	wdLFCR = 3, 
	wdLSPS = 4, 
} WdLineEndingType;

// WdShowFilter
typedef enum tagWdShowFilter
{
	wdShowFilterStylesAvailable = 0, 
	wdShowFilterStylesInUse = 1, 
	wdShowFilterStylesAll = 2,
	wdShowFilterFormattingInUse = 3, 
	wdShowFilterFormattingAvailable = 4, 
} WdShowFilter;

// WdSaveOptions
typedef enum tagWdSaveOptions
{
	wdDoNotSaveChanges = 0,
	wdSaveChanges = -1,
	wdPromptToSaveChanges = -2,
} WdSaveOptions;

// WdSaveFormat
typedef enum tagWdSaveFormat
{
	wdFormatDocument = 0,
	wdFormatTemplate = 1,
	wdFormatText = 2,
	wdFormatTextLineBreaks = 3,
	wdFormatDOSText = 4,
	wdFormatDOSTextLineBreaks = 5,
	wdFormatRTF = 6,
	wdFormatUnicodeText = 7,
	wdFormatEncodedText = 7,
	wdFormatHTML = 8,
	wdFormatWebArchive = 9,
	wdFormatFilteredHTML = 10,
	wdFormatXML = 11,
} WdSaveFormat;

// _Documen<t
// {0002096B-0000-0000-C000-000000000046}
#undef INTERFACE
#define INTERFACE _Document
DECLARE_INTERFACE_(_Document, IDispatch)
{
#ifndef __cplusplus
	// IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	// IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	// _Document methods:
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Application) (THIS_ WordApplication** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Creator) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_BuiltInDocumentProperties) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CustomDocumentProperties) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Path) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Bookmarks) (THIS_ Bookmarks** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Tables) (THIS_ Tables** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Footnotes) (THIS_ Footnotes** prop) PURE;
	STDMETHOD_(HRESULT, Get_Endnotes) (THIS_ Endnotes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Comments) (THIS_ Comments** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Type) (THIS_ WdDocumentType* prop) PURE;
	STDMETHOD_(HRESULT, Get_AutoHyphenation) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_AutoHyphenation) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_HyphenateCaps) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_HyphenateCaps) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_HyphenationZone) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_HyphenationZone) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_ConsecutiveHyphensLimit) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ConsecutiveHyphensLimit) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_Sections) (THIS_ Sections** prop) PURE;
	STDMETHOD_(HRESULT, Get_Paragraphs) (THIS_ Paragraphs** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Words) (THIS_ Words** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Sentences) (THIS_ Sentences** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Characters) (THIS_ Characters** prop) PURE;
	STDMETHOD_(HRESULT, Get_Fields) (THIS_ Fields** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormFields) (THIS_ FormFields** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Styles) (THIS_ Styles** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Frames) (THIS_ Frames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_TablesOfFigures) (THIS_ TablesOfFigures** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Variables) (THIS_ Variables** prop) PURE;
	STDMETHOD_(HRESULT, Get_MailMerge) (THIS_ MailMerge** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Envelope) (THIS_ Envelope** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FullName) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Revisions) (THIS_ Revisions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_TablesOfContents) (THIS_ TablesOfContents** prop) PURE; 
	STDMETHOD_(HRESULT, Get_TablesOfAuthorities) (THIS_ TablesOfAuthorities** prop) PURE; 
	STDMETHOD_(HRESULT, Get_PageSetup) (THIS_ PageSetup** prop) PURE; 
	STDMETHOD_(HRESULT, Set_PageSetup) (THIS_ PageSetup* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Windows) (THIS_ WordWindows** prop) PURE; 
	STDMETHOD_(HRESULT, Get_HasRoutingSlip) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, Set_HasRoutingSlip) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_RoutingSlip) (THIS_ RoutingSlip** prop) PURE;
	STDMETHOD_(HRESULT, Get_Routed) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_TablesOfAuthoritiesCategories) (THIS_ TablesOfAuthoritiesCategories** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Indexes) (THIS_ Indexes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Saved) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Saved) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Content) (THIS_ WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ActiveWindow) (THIS_ Window** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Kind) (THIS_ WdDocumentKind* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Kind) (THIS_ WdDocumentKind prop) PURE;
	STDMETHOD_(HRESULT, Get_ReadOnly) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, Get_Subdocuments) (THIS_ Subdocuments** prop) PURE; 
	STDMETHOD_(HRESULT, Get_IsMasterDocument) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_DefaultTabStop) (THIS_ float* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DefaultTabStop) (THIS_ float prop) PURE; 
	STDMETHOD_(HRESULT, Get_EmbedTrueTypeFonts) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_EmbedTrueTypeFonts) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SaveFormsData) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_SaveFormsData) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_ReadOnlyRecommended) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ReadOnlyRecommended) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SaveSubsetFonts) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_SaveSubsetFonts) (THIS_ VARIANT_BOOL prop) PURE;
	STDMETHOD_(HRESULT, Get_Compatibility) (THIS_ WdCompatibility Type, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Compatibility) (THIS_ WdCompatibility Type, VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_StoryRanges) (THIS_ StoryRanges** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CommandBars) (THIS_ CommandBars** prop) PURE; 
	STDMETHOD_(HRESULT, Get_IsSubdocument) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, Get_SaveFormat) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_ProtectionType) (THIS_ WdProtectionType* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Hyperlinks) (THIS_ Hyperlinks** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Shapes) (THIS_ Shapes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ListTemplates) (THIS_ ListTemplates** prop) PURE;
	STDMETHOD_(HRESULT, Get_Lists) (THIS_ Lists** prop) PURE; 
	STDMETHOD_(HRESULT, Get_UpdateStylesOnOpen) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_UpdateStylesOnOpen) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_AttachedTemplate) (THIS_ VARIANT* prop) PURE;
	STDMETHOD_(HRESULT, Set_AttachedTemplate) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_InlineShapes) (THIS_ InlineShapes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Background) (THIS_ WordShape** prop) PURE; 
	STDMETHOD_(HRESULT, Set_Background) (THIS_ WordShape* prop) PURE; 
	STDMETHOD_(HRESULT, Get_GrammarChecked) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GrammarChecked) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SpellingChecked) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_SpellingChecked) (THIS_ VARIANT_BOOL prop) PURE;
	STDMETHOD_(HRESULT, Get_ShowGrammaticalErrors) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowGrammaticalErrors) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_ShowSpellingErrors) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowSpellingErrors) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Versions) (THIS_ Versions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ShowSummary) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowSummary) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SummaryViewMode) (THIS_ WdSummaryMode* prop) PURE; 
	STDMETHOD_(HRESULT, Set_SummaryViewMode) (THIS_ WdSummaryMode prop) PURE; 
	STDMETHOD_(HRESULT, Get_SummaryLength) (THIS_ long* prop) PURE;
	STDMETHOD_(HRESULT, Set_SummaryLength) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_PrintFractionalWidths) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, Set_PrintFractionalWidths) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_PrintPostScriptOverText) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_PrintPostScriptOverText) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Container) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_PrintFormsData) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_PrintFormsData) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_ListParagraphs) (THIS_ ListParagraphs** prop) PURE;
	STDMETHOD_(HRESULT, Set_Password) (THIS_ BSTR ) PURE; 
	STDMETHOD_(HRESULT, Set_WritePassword) (THIS_ BSTR ) PURE; 
	STDMETHOD_(HRESULT, Get_HasPassword) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, Get_WriteReserved) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_ActiveWritingStyle) (THIS_ VARIANT* LanguageID, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ActiveWritingStyle) (THIS_ VARIANT* LanguageID, BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_UserControl) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_UserControl) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_HasMailer) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_HasMailer) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Mailer) (THIS_ Mailer** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ReadabilityStatistics) (THIS_ ReadabilityStatistics** prop) PURE; 
	STDMETHOD_(HRESULT, Get_GrammaticalErrors) (THIS_ ProofreadingErrors** prop) PURE;
	STDMETHOD_(HRESULT, Get_SpellingErrors) (THIS_ ProofreadingErrors** prop) PURE; 
	STDMETHOD_(HRESULT, Get_VBProject) (THIS_ VBProject** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormsDesign) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get__CodeName) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set__CodeName) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_CodeName) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_SnapToGrid) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_SnapToGrid) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SnapToShapes) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, Set_SnapToShapes) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_GridDistanceHorizontal) (THIS_ float* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GridDistanceHorizontal) (THIS_ float prop) PURE;
	STDMETHOD_(HRESULT, Get_GridDistanceVertical) (THIS_ float* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GridDistanceVertical) (THIS_ float prop) PURE;
	STDMETHOD_(HRESULT, Get_GridOriginHorizontal) (THIS_ float* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GridOriginHorizontal) (THIS_ float prop) PURE; 
	STDMETHOD_(HRESULT, Get_GridOriginVertical) (THIS_ float* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GridOriginVertical) (THIS_ float prop) PURE; 
	STDMETHOD_(HRESULT, Get_GridSpaceBetweenHorizontalLines) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GridSpaceBetweenHorizontalLines) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_GridSpaceBetweenVerticalLines) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GridSpaceBetweenVerticalLines) (THIS_ long prop) PURE;
	STDMETHOD_(HRESULT, Get_GridOriginFromMargin) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GridOriginFromMargin) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_KerningByAlgorithm) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_KerningByAlgorithm) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_JustificationMode) (THIS_ WdJustificationMode* prop) PURE; 
	STDMETHOD_(HRESULT, Set_JustificationMode) (THIS_ WdJustificationMode prop) PURE; 
	STDMETHOD_(HRESULT, Get_FarEastLineBreakLevel) (THIS_ WdFarEastLineBreakLevel* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FarEastLineBreakLevel) (THIS_ WdFarEastLineBreakLevel prop) PURE; 
	STDMETHOD_(HRESULT, Get_NoLineBreakBefore) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_NoLineBreakBefore) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_NoLineBreakAfter) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_NoLineBreakAfter) (THIS_ BSTR prop) PURE;
	STDMETHOD_(HRESULT, Get_TrackRevisions) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_TrackRevisions) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_PrintRevisions) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_PrintRevisions) (THIS_ VARIANT_BOOL prop) PURE;
	STDMETHOD_(HRESULT, Get_ShowRevisions) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowRevisions) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Close) (THIS_ VARIANT* SaveChanges, VARIANT* OriginalFormat, VARIANT* RouteDocument) PURE;
	STDMETHOD_(HRESULT, SaveAs2000) (THIS_ VARIANT* FileName, VARIANT* FileFormat, VARIANT* LockComments, VARIANT* Password, VARIANT* AddToRecentFiles, VARIANT* WritePassword, VARIANT* ReadOnlyRecommended, VARIANT* EmbedTrueTypeFonts, VARIANT* SaveNativePictureFormat, VARIANT* SaveFormsData, VARIANT* SaveAsAOCELetter) PURE; 
	STDMETHOD_(HRESULT, Repaginate) (THIS ) PURE; 
	STDMETHOD_(HRESULT, FitToPages) (THIS ) PURE;
	STDMETHOD_(HRESULT, ManualHyphenation) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Select) (THIS ) PURE; 
	STDMETHOD_(HRESULT, DataForm) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Route) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Save) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PrintOutOld) (THIS_ VARIANT* Background, VARIANT* Append, VARIANT* , VARIANT* OutputFileName, VARIANT* From, VARIANT* To, VARIANT* Item, VARIANT* Copies, VARIANT* Pages, VARIANT* PageType, VARIANT* PrintToFile, VARIANT* Collate, VARIANT* ActivePrinterMacGX, VARIANT* ManualDuplexPrint) PURE; 
	STDMETHOD_(HRESULT, SendMail) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Range) (THIS_ VARIANT* Start, VARIANT* End, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, RunAutoMacro) (THIS_ WdAutoMacros Which) PURE; 
	STDMETHOD_(HRESULT, Activate) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PrintPreview) (THIS ) PURE; 
	STDMETHOD_(HRESULT, GoTo) (THIS_ VARIANT* What, VARIANT* Which, VARIANT* Count, VARIANT* Name, WordRange** prop) PURE;
	STDMETHOD_(HRESULT, Undo) (THIS_ VARIANT* Times, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Redo) (THIS_ VARIANT* Times, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, ComputeStatistics) (THIS_ WdStatistic Statistic, VARIANT* IncludeFootnotesAndEndnotes, long* prop) PURE; 
	STDMETHOD_(HRESULT, MakeCompatibilityDefault) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Protect2002) (THIS_ WdProtectionType Type, VARIANT* NoReset, VARIANT* Password) PURE; 
	STDMETHOD_(HRESULT, Unprotect) (THIS_ VARIANT* Password) PURE; 
	STDMETHOD_(HRESULT, EditionOptions) (THIS_ WdEditionType Type, WdEditionOption Option, BSTR Name, VARIANT* Format) PURE; 
	STDMETHOD_(HRESULT, RunLetterWizard) (THIS_ VARIANT* , VARIANT* WizardMode) PURE; 
	STDMETHOD_(HRESULT, GetLetterContent) (THIS_ LetterContent** prop) PURE; 
	STDMETHOD_(HRESULT, SetLetterContent) (THIS_ VARIANT* ) PURE;
	STDMETHOD_(HRESULT, CopyStylesFromTemplate) (THIS_ BSTR ) PURE;
	STDMETHOD_(HRESULT, UpdateStyles) (THIS ) PURE;
	STDMETHOD_(HRESULT, CheckGrammar) (THIS ) PURE; 
	STDMETHOD_(HRESULT, CheckSpelling) (THIS_ VARIANT* CustomDictionary, VARIANT* IgnoreUppercase, VARIANT* AlwaysSuggest, VARIANT* CustomDictionary2, VARIANT* CustomDictionary3, VARIANT* CustomDictionary4, VARIANT* CustomDictionary5, VARIANT* CustomDictionary6, VARIANT* CustomDictionary7, VARIANT* CustomDictionary8, VARIANT* CustomDictionary9, VARIANT* CustomDictionary10) PURE;
	STDMETHOD_(HRESULT, FollowHyperlink) (THIS_ VARIANT* Address, VARIANT* SubAddress, VARIANT* NewWindow, VARIANT* AddHistory, VARIANT* ExtraInfo, VARIANT* Method, VARIANT* HeaderInfo) PURE; 
	STDMETHOD_(HRESULT, AddToFavorites) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Reload) (THIS ) PURE; 
	STDMETHOD_(HRESULT, AutoSummarize) (THIS_ VARIANT* Length, VARIANT* Mode, VARIANT* UpdateProperties, WordRange **prop) PURE;
	STDMETHOD_(HRESULT, RemoveNumbers) (THIS_ VARIANT* NumberType) PURE; 
	STDMETHOD_(HRESULT, ConvertNumbersToText) (THIS_ VARIANT* NumberType) PURE; 
	STDMETHOD_(HRESULT, CountNumberedItems) (THIS_ VARIANT* NumberType, VARIANT* Level, long* prop) PURE; 
	STDMETHOD_(HRESULT, Post) (THIS ) PURE;
	STDMETHOD_(HRESULT, ToggleFormsDesign) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Compare2000) (THIS_ BSTR Name) PURE; 
	STDMETHOD_(HRESULT, UpdateSummaryProperties) (THIS ) PURE; 
	STDMETHOD_(HRESULT, GetCrossReferenceItems) (THIS_ VARIANT* ReferenceType, VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, AutoFormat) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ViewCode) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ViewPropertyBrowser) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ForwardMailer) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Reply) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ReplyAll) (THIS ) PURE;
	STDMETHOD_(HRESULT, SendMailer) (THIS_ VARIANT* FileFormat, VARIANT* Priority) PURE; 
	STDMETHOD_(HRESULT, UndoClear) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PresentIt) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SendFax) (THIS_ BSTR Address, VARIANT* Subject) PURE; 
	STDMETHOD_(HRESULT, Merge2000) (THIS_ BSTR FileName) PURE; 
	STDMETHOD_(HRESULT, ClosePrintPreview) (THIS ) PURE; 
	STDMETHOD_(HRESULT, CheckConsistency) (THIS ) PURE;
	STDMETHOD_(HRESULT, CreateLetterContent) (THIS_ BSTR DateFormat, VARIANT_BOOL IncludeHeaderFooter, BSTR PageDesign, WdLetterStyle LetterStyle, VARIANT_BOOL Letterhead, WdLetterheadLocation LetterheadLocation, float LetterheadSize, BSTR RecipientName, BSTR RecipientAddress, BSTR Salutation, WdSalutationType SalutationType, BSTR RecipientReference, BSTR MailingInstructions, BSTR AttentionLine, BSTR Subject, BSTR CCList, BSTR ReturnAddress, BSTR SenderName, BSTR Closing, BSTR SenderCompany, BSTR SenderJobTitle, BSTR SenderInitials, long EnclosureNumber, VARIANT* InfoBlock, VARIANT* RecipientCode, VARIANT* RecipientGender, VARIANT* ReturnAddressShortForm, VARIANT* SenderCity, VARIANT* SenderCode, VARIANT* SenderGender, VARIANT* SenderReference, LetterContent** prop) PURE;
	STDMETHOD_(HRESULT, AcceptAllRevisions) (THIS ) PURE; 
	STDMETHOD_(HRESULT, RejectAllRevisions) (THIS ) PURE; 
	STDMETHOD_(HRESULT, DetectLanguage) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ApplyTheme) (THIS_ BSTR Name) PURE;
	STDMETHOD_(HRESULT, RemoveTheme) (THIS ) PURE; 
	STDMETHOD_(HRESULT, WebPagePreview) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ReloadAs) (THIS_ MsoEncoding Encoding) PURE; 
	STDMETHOD_(HRESULT, Get_ActiveTheme) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_ActiveThemeDisplayName) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Email) (THIS_ Email** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Scripts) (THIS_ Scripts** prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageDetected) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageDetected) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_FarEastLineBreakLanguage) (THIS_ WdFarEastLineBreakLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FarEastLineBreakLanguage) (THIS_ WdFarEastLineBreakLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Get_Frameset) (THIS_ Frameset** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ClickAndTypeParagraphStyle) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ClickAndTypeParagraphStyle) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_HTMLProject) (THIS_ HTMLProject** prop) PURE; 
	STDMETHOD_(HRESULT, Get_WebOptions) (THIS_ WebOptions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_OpenEncoding) (THIS_ MsoEncoding* prop) PURE; 
	STDMETHOD_(HRESULT, Get_SaveEncoding) (THIS_ MsoEncoding* prop) PURE; 
	STDMETHOD_(HRESULT, Set_SaveEncoding) (THIS_ MsoEncoding prop) PURE; 
	STDMETHOD_(HRESULT, Get_OptimizeForWord97) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_OptimizeForWord97) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_VBASigned) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, PrintOut2000) (THIS_ VARIANT* Background, VARIANT* Append, VARIANT* , VARIANT* OutputFileName, VARIANT* From, VARIANT* To, VARIANT* Item, VARIANT* Copies, VARIANT* Pages, VARIANT* PageType, VARIANT* PrintToFile, VARIANT* Collate, VARIANT* ActivePrinterMacGX, VARIANT* ManualDuplexPrint, VARIANT* PrintZoomColumn, VARIANT* PrintZoomRow, VARIANT* PrintZoomPaperWidth, VARIANT* PrintZoomPaperHeight) PURE; 
	STDMETHOD_(HRESULT, sblt) (THIS_ BSTR s) PURE; 
	STDMETHOD_(HRESULT, ConvertVietDoc) (THIS_ long CodePageOrigin) PURE;
	STDMETHOD_(HRESULT, PrintOut) (THIS_ VARIANT* Background, VARIANT* Append, VARIANT* , VARIANT* OutputFileName, VARIANT* From, VARIANT* To, VARIANT* Item, VARIANT* Copies, VARIANT* Pages, VARIANT* PageType, VARIANT* PrintToFile, VARIANT* Collate, VARIANT* ActivePrinterMacGX, VARIANT* ManualDuplexPrint, VARIANT* PrintZoomColumn, VARIANT* PrintZoomRow, VARIANT* PrintZoomPaperWidth, VARIANT* PrintZoomPaperHeight) PURE; 
	STDMETHOD_(HRESULT, Get_MailEnvelope) (THIS_ MsoEnvelope** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisableFeatures) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisableFeatures) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_DoNotEmbedSystemFonts) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DoNotEmbedSystemFonts) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Signatures) (THIS_ SignatureSet** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DefaultTargetFrame) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DefaultTargetFrame) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_HTMLDivisions) (THIS_ HTMLDivisions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisableFeaturesIntroducedAfter) (THIS_ WdDisableFeaturesIntroducedAfter* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisableFeaturesIntroducedAfter) (THIS_ WdDisableFeaturesIntroducedAfter prop) PURE; 
	STDMETHOD_(HRESULT, Get_RemovePersonalInformation) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_RemovePersonalInformation) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SmartTags) (THIS_ SmartTags** prop) PURE; 
	STDMETHOD_(HRESULT, Compare2002) (THIS_ BSTR Name, VARIANT* AuthorName, VARIANT* CompareTarget, VARIANT* DetectFormatChanges, VARIANT* IgnoreAllComparisonWarnings, VARIANT* AddToRecentFiles) PURE; 
	STDMETHOD_(HRESULT, CheckIn) (THIS_ VARIANT_BOOL SaveChanges, VARIANT* , VARIANT_BOOL MakePublic) PURE; 
	STDMETHOD_(HRESULT, CanCheckin) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Merge) (THIS_ BSTR FileName, VARIANT* MergeTarget, VARIANT* DetectFormatChanges, VARIANT* UseFormattingFrom, VARIANT* AddToRecentFiles) PURE;
	STDMETHOD_(HRESULT, Get_EmbedSmartTags) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_EmbedSmartTags) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SmartTagsAsXMLProps) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_SmartTagsAsXMLProps) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_TextEncoding) (THIS_ MsoEncoding* prop) PURE;
	STDMETHOD_(HRESULT, Set_TextEncoding) (THIS_ MsoEncoding prop) PURE; 
	STDMETHOD_(HRESULT, Get_TextLineEnding) (THIS_ WdLineEndingType* prop) PURE; 
	STDMETHOD_(HRESULT, Set_TextLineEnding) (THIS_ WdLineEndingType prop) PURE; 
	STDMETHOD_(HRESULT, SendForReview) (THIS_ VARIANT* Recipients, VARIANT* Subject, VARIANT* ShowMessage, VARIANT* IncludeAttachment) PURE; 
	STDMETHOD_(HRESULT, ReplyWithChanges) (THIS_ VARIANT* ShowMessage) PURE;
	STDMETHOD_(HRESULT, EndReview) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Get_StyleSheets) (THIS_ StyleSheets** prop) PURE; 
	STDMETHOD_(HRESULT, Get_DefaultTableStyle) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_PasswordEncryptionProvider) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_PasswordEncryptionAlgorithm) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_PasswordEncryptionKeyLength) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_PasswordEncryptionFileProperties) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, SetPasswordEncryptionOptions) (THIS_ BSTR PasswordEncryptionProvider, BSTR PasswordEncryptionAlgorithm, long PasswordEncryptionKeyLength, VARIANT* PasswordEncryptionFileProperties) PURE; 
	STDMETHOD_(HRESULT, RecheckSmartTags) (THIS ) PURE; 
	STDMETHOD_(HRESULT, RemoveSmartTags) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SetDefaultTableStyle) (THIS_ VARIANT* Style, VARIANT_BOOL SetInTemplate) PURE; 
	STDMETHOD_(HRESULT, DeleteAllComments) (THIS ) PURE;
	STDMETHOD_(HRESULT, AcceptAllRevisionsShown) (THIS ) PURE; 
	STDMETHOD_(HRESULT, RejectAllRevisionsShown) (THIS ) PURE; 
	STDMETHOD_(HRESULT, DeleteAllCommentsShown) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ResetFormFields) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SaveAs) (THIS_ VARIANT* FileName, VARIANT* FileFormat, VARIANT* LockComments, VARIANT* Password, VARIANT* AddToRecentFiles, VARIANT* WritePassword, VARIANT* ReadOnlyRecommended, VARIANT* EmbedTrueTypeFonts, VARIANT* SaveNativePictureFormat, VARIANT* SaveFormsData, VARIANT* SaveAsAOCELetter, VARIANT* Encoding, VARIANT* InsertLineBreaks, VARIANT* AllowSubstitutions, VARIANT* LineEnding, VARIANT* AddBiDiMarks) PURE; 
	STDMETHOD_(HRESULT, Get_EmbedLinguisticData) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_EmbedLinguisticData) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormattingShowFont) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FormattingShowFont) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormattingShowClear) (THIS_ VARIANT_BOOL* prop) PURE;
	STDMETHOD_(HRESULT, Set_FormattingShowClear) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormattingShowParagraph) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FormattingShowParagraph) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormattingShowNumbering) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FormattingShowNumbering) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormattingShowFilter) (THIS_ WdShowFilter* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FormattingShowFilter) (THIS_ WdShowFilter prop) PURE;
	STDMETHOD_(HRESULT, CheckNewSmartTags) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Get_Permission) (THIS_ Permission** prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLNodes) (THIS_ XMLNodes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLSchemaReferences) (THIS_ XMLSchemaReferences** prop) PURE; 
	STDMETHOD_(HRESULT, Get_SmartDocument) (THIS_ SmartDocument** prop) PURE;
	STDMETHOD_(HRESULT, Get_SharedWorkspace) (THIS_ SharedWorkspace** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Sync) (THIS_ Sync** prop) PURE; 
	STDMETHOD_(HRESULT, Get_EnforceStyle) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_EnforceStyle) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_AutoFormatOverride) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_AutoFormatOverride) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLSaveDataOnly) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_XMLSaveDataOnly) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLHideNamespaces) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_XMLHideNamespaces) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLShowAdvancedErrors) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_XMLShowAdvancedErrors) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLUseXSLTWhenSaving) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_XMLUseXSLTWhenSaving) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLSaveThroughXSLT) (THIS_ BSTR* prop) PURE;
	STDMETHOD_(HRESULT, Set_XMLSaveThroughXSLT) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_DocumentLibraryVersions) (THIS_ DocumentLibraryVersions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ReadingModeLayoutFrozen) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ReadingModeLayoutFrozen) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_RemoveDateAndTime) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_RemoveDateAndTime) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, SendFaxOverInternet) (THIS_ VARIANT* Recipients, VARIANT* Subject, VARIANT* ShowMessage) PURE;
	STDMETHOD_(HRESULT, TransformDocument) (THIS_ BSTR Path, VARIANT_BOOL DataOnly) PURE; 
	STDMETHOD_(HRESULT, Protect) (THIS_ WdProtectionType Type, VARIANT* NoReset, VARIANT* Password, VARIANT* UseIRM, VARIANT* EnforceStyleLock) PURE;
	STDMETHOD_(HRESULT, SelectAllEditableRanges) (THIS_ VARIANT* EditorID) PURE;
	STDMETHOD_(HRESULT, DeleteAllEditableRanges) (THIS_ VARIANT* EditorID) PURE;
	STDMETHOD_(HRESULT, DeleteAllInkAnnotations) (THIS ) PURE;
	STDMETHOD_(HRESULT, AddDocumentWorkspaceHeader) (THIS_ VARIANT_BOOL RichFormat, BSTR Url, BSTR Title, BSTR Description, BSTR ID) PURE;
	STDMETHOD_(HRESULT, RemoveDocumentWorkspaceHeader) (THIS_ BSTR ID) PURE;
	STDMETHOD_(HRESULT, Compare) (THIS_ BSTR Name, VARIANT* AuthorName, VARIANT* CompareTarget, VARIANT* DetectFormatChanges, VARIANT* IgnoreAllComparisonWarnings, VARIANT* AddToRecentFiles, VARIANT* RemovePersonalInformation, VARIANT* RemoveDateAndTime) PURE;
	STDMETHOD_(HRESULT, RemoveLockedStyles) (THIS ) PURE;
	STDMETHOD_(HRESULT, Get_ChildNodeSuggestions) (THIS_ XMLChildNodeSuggestions** prop) PURE;
	STDMETHOD_(HRESULT, SelectSingleNode) (THIS_ BSTR XPath, BSTR PrefixMapping, VARIANT_BOOL FastSearchSkippingTextNodes, XMLNode** prop) PURE;
	STDMETHOD_(HRESULT, SelectNodes) (THIS_ BSTR XPath, BSTR PrefixMapping, VARIANT_BOOL FastSearchSkippingTextNodes, XMLNodes** prop) PURE;
	STDMETHOD_(HRESULT, Get_XMLSchemaViolations) (THIS_ XMLNodes** prop) PURE;
	STDMETHOD_(HRESULT, Get_ReadingLayoutSizeX) (THIS_ long* prop) PURE;
	STDMETHOD_(HRESULT, Set_ReadingLayoutSizeX) (THIS_ long prop) PURE;
	STDMETHOD_(HRESULT, Get_ReadingLayoutSizeY) (THIS_ long* prop) PURE;
	STDMETHOD_(HRESULT, Set_ReadingLayoutSizeY) (THIS_ long prop) PURE; 
};
typedef _Document* LPDOCUMENT;
#ifdef __cplusplus
// _Document  {0002096B-0000-0000-C000-000000000046}
//  [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS T_DocumentProxy : public __OCF TAutoProxy
{
public:
	T_DocumentProxy() : TAutoProxy(0x0) {}

	// Name:   [dispid 0]
	__OCF TAutoString Name();

	// _Application:   [dispid 1]
	WordApplication* _Application();

	// Creator:   [dispid 1001]
	long Creator();

	// Parent:   [dispid 1002]
	IDispatch* Parent();

	// BuiltInDocumentProperties:   [dispid 1000]
	IDispatch* BuiltInDocumentProperties();

	// CustomDocumentProperties:   [dispid 2]
	IDispatch* CustomDocumentProperties();

	// Path:   [dispid 3]
	__OCF TAutoString Path();

	// _Bookmarks:   [dispid 4]
	void _Bookmarks(TBookmarksProxy& Obj);

	// _Tables:   [dispid 6]
	void _Tables(TTablesProxy& Obj);

	// _Footnotes:   [dispid 7]
	void _Footnotes(TFootnotesProxy& Obj);

	// _Endnotes:   [dispid 8]
	void _Endnotes(TEndnotesProxy& Obj);

	// _Comments:   [dispid 9]
	void _Comments(TCommentsProxy& Obj);

	// Type:   [dispid 10]
	WdDocumentType Type();

	// AutoHyphenation:   [dispid 11]
	/*__OWL*/ TBool AutoHyphenation();

	// AutoHyphenation:   [dispid 11]
	void AutoHyphenation(/*__OWL*/ TBool arg0);

	// HyphenateCaps:   [dispid 12]
	/*__OWL*/ TBool HyphenateCaps();

	// HyphenateCaps:   [dispid 12]
	void HyphenateCaps(/*__OWL*/ TBool arg0);

	// HyphenationZone:   [dispid 13]
	long HyphenationZone();

	// HyphenationZone:   [dispid 13]
	void HyphenationZone(long arg0);

	// ConsecutiveHyphensLimit:   [dispid 14]
	long ConsecutiveHyphensLimit();

	// ConsecutiveHyphensLimit:   [dispid 14]
	void ConsecutiveHyphensLimit(long arg0);

	// _Sections:   [dispid 15]
	void _Sections(TSectionsProxy& Obj);

	// _Paragraphs:   [dispid 16]
	void _Paragraphs(TParagraphsProxy& Obj);

	// _Words:   [dispid 17]
	void _Words(TWordsProxy& Obj);

	// _Sentences:   [dispid 18]
	void _Sentences(TSentencesProxy& Obj);

	// _Characters:   [dispid 19]
	void _Characters(TCharactersProxy& Obj);

	// _Fields:   [dispid 20]
	void _Fields(TFieldsProxy& Obj);

	// _FormFields:   [dispid 21]
	void _FormFields(TFormFieldsProxy& Obj);

	// _Styles:   [dispid 22]
	void _Styles(TStylesProxy& Obj);

	// _Frames:   [dispid 23]
	void _Frames(TFramesProxy& Obj);

	// _TablesOfFigures:   [dispid 25]
	void _TablesOfFigures(TTablesOfFiguresProxy& Obj);

	// _Variables:   [dispid 26]
	void _Variables(TVariablesProxy& Obj);

	// _MailMerge:   [dispid 27]
	void _MailMerge(TMailMergeProxy& Obj);

	// _Envelope:   [dispid 28]
	void _Envelope(TEnvelopeProxy& Obj);

	// FullName:   [dispid 29]
	__OCF TAutoString FullName();

	// _Revisions:   [dispid 30]
	void _Revisions(TRevisionsProxy& Obj);

	// _TablesOfContents:   [dispid 31]
	void _TablesOfContents(TTablesOfContentsProxy& Obj);

	// _TablesOfAuthorities:   [dispid 32]
	void _TablesOfAuthorities(TTablesOfAuthoritiesProxy& Obj);

	// _PageSetup:   [dispid 1101]
	void _PageSetup(TPageSetupProxy& Obj);

	// _PageSetup:   [dispid 1101]
	void _PageSetup(PageSetup* arg0);

	// _Windows:   [dispid 34]
	void GetWindows(TWindowsProxy& Obj);

	// HasRoutingSlip:   [dispid 35]
	/*__OWL*/ TBool HasRoutingSlip();

	// HasRoutingSlip:   [dispid 35]
	void HasRoutingSlip(/*__OWL*/ TBool arg0);

	// _RoutingSlip:   [dispid 36]
	void _RoutingSlip(TRoutingSlipProxy& Obj);

	// Routed:   [dispid 37]
	/*__OWL*/ TBool Routed();

	// _TablesOfAuthoritiesCategories:   [dispid 38]
	void _TablesOfAuthoritiesCategories(TTablesOfAuthoritiesCategoriesProxy& Obj);

	// _Indexes:   [dispid 39]
	void _Indexes(TIndexesProxy& Obj);

	// Saved:   [dispid 40]
	/*__OWL*/ TBool Saved();

	// Saved:   [dispid 40]
	void Saved(/*__OWL*/ TBool arg0);

	// Content:   [dispid 41]
	void Content(TRangeProxy& Obj);

	// ActiveWindow:   [dispid 42]
	void ActiveWindow(TWindowProxy& Obj);

	// Kind:   [dispid 43]
	WdDocumentKind Kind();

	// Kind:   [dispid 43]
	void Kind(WdDocumentKind arg0);

	// ReadOnly:   [dispid 44]
	/*__OWL*/ TBool ReadOnly();

	// _Subdocuments:   [dispid 45]
	void _Subdocuments(TSubdocumentsProxy& Obj);

	// IsMasterDocument:   [dispid 46]
	/*__OWL*/ TBool IsMasterDocument();

	// DefaultTabStop:   [dispid 48]
	float DefaultTabStop();

	// DefaultTabStop:   [dispid 48]
	void DefaultTabStop(float arg0);

	// EmbedTrueTypeFonts:   [dispid 50]
	/*__OWL*/ TBool EmbedTrueTypeFonts();

	// EmbedTrueTypeFonts:   [dispid 50]
	void EmbedTrueTypeFonts(/*__OWL*/ TBool arg0);

	// SaveFormsData:   [dispid 51]
	/*__OWL*/ TBool SaveFormsData();

	// SaveFormsData:   [dispid 51]
	void SaveFormsData(/*__OWL*/ TBool arg0);

	// ReadOnlyRecommended:   [dispid 52]
	/*__OWL*/ TBool ReadOnlyRecommended();

	// ReadOnlyRecommended:   [dispid 52]
	void ReadOnlyRecommended(/*__OWL*/ TBool arg0);

	// SaveSubsetFonts:   [dispid 53]
	/*__OWL*/ TBool SaveSubsetFonts();

	// SaveSubsetFonts:   [dispid 53]
	void SaveSubsetFonts(/*__OWL*/ TBool arg0);

	// Compatibility:   [dispid 55]
	/*__OWL*/ TBool Compatibility(WdCompatibility Type);

	// Compatibility:   [dispid 55]
	void Compatibility(WdCompatibility Type, /*__OWL*/ TBool arg1);

	// _StoryRanges:   [dispid 56]
	void _StoryRanges(TStoryRangesProxy& Obj);

	// _CommandBars:   [dispid 57]
	CommandBars* _CommandBars();

	// IsSubdocument:   [dispid 58]
	/*__OWL*/ TBool IsSubdocument();

	// SaveFormat:   [dispid 59]
	long SaveFormat();

	// ProtectionType:   [dispid 60]
	WdProtectionType ProtectionType();

	// _Hyperlinks:   [dispid 61]
	void _Hyperlinks(THyperlinksProxy& Obj);

	// _Shapes:   [dispid 62]
	void _Shapes(TShapesProxy& Obj);

	// _ListTemplates:   [dispid 63]
	void _ListTemplates(TListTemplatesProxy& Obj);

	// _Lists:   [dispid 64]
	void _Lists(TListsProxy& Obj);

	// UpdateStylesOnOpen:   [dispid 66]
	/*__OWL*/ TBool UpdateStylesOnOpen();

	// UpdateStylesOnOpen:   [dispid 66]
	void UpdateStylesOnOpen(/*__OWL*/ TBool arg0);

	// AttachedTemplate:   [dispid 67]
	__OCF TAutoVal AttachedTemplate();

	// AttachedTemplate:   [dispid 67]
	void AttachedTemplate(__OCF TAutoVal* arg0);

	// _InlineShapes:   [dispid 68]
	void _InlineShapes(TInlineShapesProxy& Obj);

	// Background:   [dispid 69]
	void Background(TShapeProxy& Obj);

	// Background:   [dispid 69]
	void Background(WordShape* arg0);

	// GrammarChecked:   [dispid 70]
	/*__OWL*/ TBool GrammarChecked();

	// GrammarChecked:   [dispid 70]
	void GrammarChecked(/*__OWL*/ TBool arg0);

	// SpellingChecked:   [dispid 71]
	/*__OWL*/ TBool SpellingChecked();

	// SpellingChecked:   [dispid 71]
	void SpellingChecked(/*__OWL*/ TBool arg0);

	// ShowGrammaticalErrors:   [dispid 72]
	/*__OWL*/ TBool ShowGrammaticalErrors();

	// ShowGrammaticalErrors:   [dispid 72]
	void ShowGrammaticalErrors(/*__OWL*/ TBool arg0);

	// ShowSpellingErrors:   [dispid 73]
	/*__OWL*/ TBool ShowSpellingErrors();

	// ShowSpellingErrors:   [dispid 73]
	void ShowSpellingErrors(/*__OWL*/ TBool arg0);

	// _Versions:   [dispid 75]
	void _Versions(TVersionsProxy& Obj);

	// ShowSummary:   [dispid 76]
	/*__OWL*/ TBool ShowSummary();

	// ShowSummary:   [dispid 76]
	void ShowSummary(/*__OWL*/ TBool arg0);

	// SummaryViewMode:   [dispid 77]
	WdSummaryMode SummaryViewMode();

	// SummaryViewMode:   [dispid 77]
	void SummaryViewMode(WdSummaryMode arg0);

	// SummaryLength:   [dispid 78]
	long SummaryLength();

	// SummaryLength:   [dispid 78]
	void SummaryLength(long arg0);

	// PrintFractionalWidths:   [dispid 79]
	/*__OWL*/ TBool PrintFractionalWidths();

	// PrintFractionalWidths:   [dispid 79]
	void PrintFractionalWidths(/*__OWL*/ TBool arg0);

	// PrintPostScriptOverText:   [dispid 80]
	/*__OWL*/ TBool PrintPostScriptOverText();

	// PrintPostScriptOverText:   [dispid 80]
	void PrintPostScriptOverText(/*__OWL*/ TBool arg0);

	// Container:   [dispid 82]
	IDispatch* Container();

	// PrintFormsData:   [dispid 83]
	/*__OWL*/ TBool PrintFormsData();

	// PrintFormsData:   [dispid 83]
	void PrintFormsData(/*__OWL*/ TBool arg0);

	// _ListParagraphs:   [dispid 84]
	void _ListParagraphs(TListParagraphsProxy& Obj);

	// Password:   [dispid 85]
	void Password(__OCF TAutoString arg0);

	// WritePassword:   [dispid 86]
	void WritePassword(__OCF TAutoString arg0);

	// HasPassword:   [dispid 87]
	/*__OWL*/ TBool HasPassword();

	// WriteReserved:   [dispid 88]
	/*__OWL*/ TBool WriteReserved();

	// ActiveWritingStyle:   [dispid 90]
	__OCF TAutoString ActiveWritingStyle(__OCF TAutoVal* LanguageID);

	// ActiveWritingStyle:   [dispid 90]
	void ActiveWritingStyle(__OCF TAutoVal* LanguageID, __OCF TAutoString arg1);

	// UserControl:   [dispid 92]
	/*__OWL*/ TBool UserControl();

	// UserControl:   [dispid 92]
	void UserControl(/*__OWL*/ TBool arg0);

	// HasMailer:   [dispid 93]
	/*__OWL*/ TBool HasMailer();

	// HasMailer:   [dispid 93]
	void HasMailer(/*__OWL*/ TBool arg0);

	// _Mailer:   [dispid 94]
	void _Mailer(TMailerProxy& Obj);

	// _ReadabilityStatistics:   [dispid 96]
	void _ReadabilityStatistics(TReadabilityStatisticsProxy& Obj);

	// GrammaticalErrors:   [dispid 97]
	void GrammaticalErrors(TProofreadingErrorsProxy& Obj);

	// SpellingErrors:   [dispid 98]
	void SpellingErrors(TProofreadingErrorsProxy& Obj);

	// _VBProject:   [dispid 99]
	VBProject* _VBProject();

	// FormsDesign:   [dispid 100]
	/*__OWL*/ TBool FormsDesign();

	// _CodeName:   [dispid -2147418112]
	__OCF TAutoString _CodeName();

	// _CodeName:   [dispid -2147418112]
	void _CodeName(__OCF TAutoString arg0);

	// CodeName:   [dispid 262]
	__OCF TAutoString CodeName();

	// SnapToGrid:   [dispid 300]
	/*__OWL*/ TBool SnapToGrid();

	// SnapToGrid:   [dispid 300]
	void SnapToGrid(/*__OWL*/ TBool arg0);

	// SnapToShapes:   [dispid 301]
	/*__OWL*/ TBool SnapToShapes();

	// SnapToShapes:   [dispid 301]
	void SnapToShapes(/*__OWL*/ TBool arg0);

	// GridDistanceHorizontal:   [dispid 302]
	float GridDistanceHorizontal();

	// GridDistanceHorizontal:   [dispid 302]
	void GridDistanceHorizontal(float arg0);

	// GridDistanceVertical:   [dispid 303]
	float GridDistanceVertical();

	// GridDistanceVertical:   [dispid 303]
	void GridDistanceVertical(float arg0);

	// GridOriginHorizontal:   [dispid 304]
	float GridOriginHorizontal();

	// GridOriginHorizontal:   [dispid 304]
	void GridOriginHorizontal(float arg0);

	// GridOriginVertical:   [dispid 305]
	float GridOriginVertical();

	// GridOriginVertical:   [dispid 305]
	void GridOriginVertical(float arg0);

	// GridSpaceBetweenHorizontalLines:   [dispid 306]
	long GridSpaceBetweenHorizontalLines();

	// GridSpaceBetweenHorizontalLines:   [dispid 306]
	void GridSpaceBetweenHorizontalLines(long arg0);

	// GridSpaceBetweenVerticalLines:   [dispid 307]
	long GridSpaceBetweenVerticalLines();

	// GridSpaceBetweenVerticalLines:   [dispid 307]
	void GridSpaceBetweenVerticalLines(long arg0);

	// GridOriginFromMargin:   [dispid 308]
	/*__OWL*/ TBool GridOriginFromMargin();

	// GridOriginFromMargin:   [dispid 308]
	void GridOriginFromMargin(/*__OWL*/ TBool arg0);

	// KerningByAlgorithm:   [dispid 309]
	/*__OWL*/ TBool KerningByAlgorithm();

	// KerningByAlgorithm:   [dispid 309]
	void KerningByAlgorithm(/*__OWL*/ TBool arg0);

	// JustificationMode:   [dispid 310]
	WdJustificationMode JustificationMode();

	// JustificationMode:   [dispid 310]
	void JustificationMode(WdJustificationMode arg0);

	// FarEastLineBreakLevel:   [dispid 311]
	WdFarEastLineBreakLevel FarEastLineBreakLevel();

	// FarEastLineBreakLevel:   [dispid 311]
	void FarEastLineBreakLevel(WdFarEastLineBreakLevel arg0);

	// NoLineBreakBefore:   [dispid 312]
	__OCF TAutoString NoLineBreakBefore();

	// NoLineBreakBefore:   [dispid 312]
	void NoLineBreakBefore(__OCF TAutoString arg0);

	// NoLineBreakAfter:   [dispid 313]
	__OCF TAutoString NoLineBreakAfter();

	// NoLineBreakAfter:   [dispid 313]
	void NoLineBreakAfter(__OCF TAutoString arg0);

	// TrackRevisions:   [dispid 314]
	/*__OWL*/ TBool TrackRevisions();

	// TrackRevisions:   [dispid 314]
	void TrackRevisions(/*__OWL*/ TBool arg0);

	// PrintRevisions:   [dispid 315]
	/*__OWL*/ TBool PrintRevisions();

	// PrintRevisions:   [dispid 315]
	void PrintRevisions(/*__OWL*/ TBool arg0);

	// ShowRevisions:   [dispid 316]
	/*__OWL*/ TBool ShowRevisions();

	// ShowRevisions:   [dispid 316]
	void ShowRevisions(/*__OWL*/ TBool arg0);

	// Close:   [dispid 1105]
	void Close(__OCF TAutoVal* SaveChanges = 0, __OCF TAutoVal* OriginalFormat = 0, __OCF TAutoVal* RouteDocument = 0);

	// SaveAs2000:   [dispid 102]
	void SaveAs2000(__OCF TAutoVal* FileName = 0, __OCF TAutoVal* FileFormat = 0, __OCF TAutoVal* LockComments = 0, __OCF TAutoVal* Password = 0, __OCF TAutoVal* AddToRecentFiles = 0, __OCF TAutoVal* WritePassword = 0, __OCF TAutoVal* ReadOnlyRecommended = 0, __OCF TAutoVal* EmbedTrueTypeFonts = 0, __OCF TAutoVal* SaveNativePictureFormat = 0, __OCF TAutoVal* SaveFormsData = 0, __OCF TAutoVal* SaveAsAOCELetter = 0);

	// Repaginate:   [dispid 103]
	void Repaginate();

	// FitToPages:   [dispid 104]
	void FitToPages();

	// ManualHyphenation:   [dispid 105]
	void ManualHyphenation();

	// Select:   [dispid 65535]
	void Select();

	// DataForm:   [dispid 106]
	void DataForm();

	// Route:   [dispid 107]
	void Route();

	// Save:   [dispid 108]
	void Save();

	// PrintOutOld:   [dispid 109]
	void PrintOutOld(__OCF TAutoVal* Background = 0, __OCF TAutoVal* Append = 0, __OCF TAutoVal* arg2 = 0, __OCF TAutoVal* OutputFileName = 0, __OCF TAutoVal* From = 0, __OCF TAutoVal* To = 0, __OCF TAutoVal* Item = 0, __OCF TAutoVal* Copies = 0, __OCF TAutoVal* Pages = 0, __OCF TAutoVal* PageType = 0, __OCF TAutoVal* PrintToFile = 0, __OCF TAutoVal* Collate = 0, __OCF TAutoVal* ActivePrinterMacGX = 0, __OCF TAutoVal* ManualDuplexPrint = 0);

	// SendMail:   [dispid 110]
	void SendMail();

	// _Range:   [dispid 2000]
	void _Range(TRangeProxy& Obj, __OCF TAutoVal* Start = 0, __OCF TAutoVal* End = 0);

	// RunAutoMacro:   [dispid 112]
	void RunAutoMacro(WdAutoMacros Which);

	// Activate:   [dispid 113]
	void Activate();

	// PrintPreview:   [dispid 114]
	void PrintPreview();

	// GoTo:   [dispid 115]
	void GoTo(TRangeProxy& Obj, __OCF TAutoVal* What = 0, __OCF TAutoVal* Which = 0, __OCF TAutoVal* Count = 0, __OCF TAutoVal* Name = 0);

	// Undo:   [dispid 116]
	/*__OWL*/ TBool Undo(__OCF TAutoVal* Times = 0);

	// Redo:   [dispid 117]
	/*__OWL*/ TBool Redo(__OCF TAutoVal* Times = 0);

	// ComputeStatistics:   [dispid 118]
	long ComputeStatistics(WdStatistic Statistic, __OCF TAutoVal* IncludeFootnotesAndEndnotes = 0);

	// MakeCompatibilityDefault:   [dispid 119]
	void MakeCompatibilityDefault();

	// Protect2002:   [dispid 120]
	void Protect2002(WdProtectionType Type, __OCF TAutoVal* NoReset = 0, __OCF TAutoVal* Password = 0);

	// Unprotect:   [dispid 121]
	void Unprotect(__OCF TAutoVal* Password = 0);

	// EditionOptions:   [dispid 122]
	void EditionOptions(WdEditionType Type, WdEditionOption Option, __OCF TAutoString Name, __OCF TAutoVal* Format = 0);

	// RunLetterWizard:   [dispid 123]
	void RunLetterWizard(__OCF TAutoVal* arg0 = 0, __OCF TAutoVal* WizardMode = 0);

	// GetLetterContent:   [dispid 124]
	LetterContent* GetLetterContent();

	// SetLetterContent:   [dispid 125]
	void SetLetterContent(__OCF TAutoVal* arg0);

	// CopyStylesFromTemplate:   [dispid 126]
	void CopyStylesFromTemplate(__OCF TAutoString arg0);

	// UpdateStyles:   [dispid 127]
	void UpdateStyles();

	// CheckGrammar:   [dispid 131]
	void CheckGrammar();

	// CheckSpelling:   [dispid 132]
	void CheckSpelling(__OCF TAutoVal* CustomDictionary = 0, __OCF TAutoVal* IgnoreUppercase = 0, __OCF TAutoVal* AlwaysSuggest = 0, __OCF TAutoVal* CustomDictionary2 = 0, __OCF TAutoVal* CustomDictionary3 = 0, __OCF TAutoVal* CustomDictionary4 = 0, __OCF TAutoVal* CustomDictionary5 = 0, __OCF TAutoVal* CustomDictionary6 = 0, __OCF TAutoVal* CustomDictionary7 = 0, __OCF TAutoVal* CustomDictionary8 = 0, __OCF TAutoVal* CustomDictionary9 = 0, __OCF TAutoVal* CustomDictionary10 = 0);

	// FollowHyperlink:   [dispid 135]
	void FollowHyperlink(__OCF TAutoVal* Address = 0, __OCF TAutoVal* SubAddress = 0, __OCF TAutoVal* NewWindow = 0, __OCF TAutoVal* AddHistory = 0, __OCF TAutoVal* ExtraInfo = 0, __OCF TAutoVal* Method = 0, __OCF TAutoVal* HeaderInfo = 0);

	// AddToFavorites:   [dispid 136]
	void AddToFavorites();

	// Reload:   [dispid 137]
	void Reload();

	// AutoSummarize:   [dispid 138]
	void AutoSummarize(TRangeProxy& Obj, __OCF TAutoVal* Length = 0, __OCF TAutoVal* Mode = 0, __OCF TAutoVal* UpdateProperties = 0);

	// RemoveNumbers:   [dispid 140]
	void RemoveNumbers(__OCF TAutoVal* NumberType = 0);

	// ConvertNumbersToText:   [dispid 141]
	void ConvertNumbersToText(__OCF TAutoVal* NumberType = 0);

	// CountNumberedItems:   [dispid 142]
	long CountNumberedItems(__OCF TAutoVal* NumberType = 0, __OCF TAutoVal* Level = 0);

	// Post:   [dispid 143]
	void Post();

	// ToggleFormsDesign:   [dispid 144]
	void ToggleFormsDesign();

	// Compare2000:   [dispid 145]
	void Compare2000(__OCF TAutoString Name);

	// UpdateSummaryProperties:   [dispid 146]
	void UpdateSummaryProperties();

	// GetCrossReferenceItems:   [dispid 147]
	__OCF TAutoVal GetCrossReferenceItems(__OCF TAutoVal* ReferenceType);

	// AutoFormat:   [dispid 148]
	void AutoFormat();

	// ViewCode:   [dispid 149]
	void ViewCode();

	// ViewPropertyBrowser:   [dispid 150]
	void ViewPropertyBrowser();

	// ForwardMailer:   [dispid 250]
	void ForwardMailer();

	// Reply:   [dispid 251]
	void Reply();

	// ReplyAll:   [dispid 252]
	void ReplyAll();

	// SendMailer:   [dispid 253]
	void SendMailer(__OCF TAutoVal* FileFormat = 0, __OCF TAutoVal* Priority = 0);

	// UndoClear:   [dispid 254]
	void UndoClear();

	// PresentIt:   [dispid 255]
	void PresentIt();

	// SendFax:   [dispid 256]
	void SendFax(__OCF TAutoString Address, __OCF TAutoVal* Subject = 0);

	// Merge2000:   [dispid 257]
	void Merge2000(__OCF TAutoString FileName);

	// ClosePrintPreview:   [dispid 258]
	void ClosePrintPreview();

	// CheckConsistency:   [dispid 259]
	void CheckConsistency();

	// CreateLetterContent:   [dispid 260]
	LetterContent* CreateLetterContent( TAutoString DateFormat, /*__OWL*/ TBool IncludeHeaderFooter,
                                      __OCF TAutoString PageDesign, WdLetterStyle LetterStyle,  TBool Letterhead,
                                      WdLetterheadLocation LetterheadLocation, float LetterheadSize, __OCF TAutoString RecipientName,
                                      __OCF TAutoString RecipientAddress, __OCF TAutoString Salutation, WdSalutationType SalutationType,
                                      __OCF TAutoString RecipientReference, __OCF TAutoString MailingInstructions, __OCF TAutoString AttentionLine,
                                      __OCF TAutoString Subject, __OCF TAutoString CCList, __OCF TAutoString ReturnAddress,
                                      __OCF TAutoString SenderName, __OCF TAutoString Closing, __OCF TAutoString SenderCompany,
                                      __OCF TAutoString SenderJobTitle, __OCF TAutoString SenderInitials, long EnclosureNumber,
                                      __OCF TAutoVal* InfoBlock = 0, __OCF TAutoVal* RecipientCode = 0, __OCF TAutoVal* RecipientGender = 0,
                                      __OCF TAutoVal* ReturnAddressShortForm = 0, __OCF TAutoVal* SenderCity = 0, __OCF TAutoVal* SenderCode = 0,
                                      __OCF TAutoVal* SenderGender = 0, __OCF TAutoVal* SenderReference = 0);

	// AcceptAllRevisions:   [dispid 317]
	void AcceptAllRevisions();

	// RejectAllRevisions:   [dispid 318]
	void RejectAllRevisions();

	// DetectLanguage:   [dispid 151]
	void DetectLanguage();

	// ApplyTheme:   [dispid 322]
	void ApplyTheme(__OCF TAutoString Name);

	// RemoveTheme:   [dispid 323]
	void RemoveTheme();

	// WebPagePreview:   [dispid 325]
	void WebPagePreview();

	// ReloadAs:   [dispid 331]
	void ReloadAs(MsoEncoding Encoding);

	// ActiveTheme:   [dispid 540]
	__OCF TAutoString ActiveTheme();

	// ActiveThemeDisplayName:   [dispid 541]
	__OCF TAutoString ActiveThemeDisplayName();

	// _Email:   [dispid 319]
	void _Email(TEmailProxy& Obj);

	// _Scripts:   [dispid 320]
	void _Scripts(TScriptsProxy& Obj);

	// LanguageDetected:   [dispid 321]
	/*__OWL*/ TBool LanguageDetected();

	// LanguageDetected:   [dispid 321]
	void LanguageDetected(/*__OWL*/ TBool arg0);

	// FarEastLineBreakLanguage:   [dispid 326]
	WdFarEastLineBreakLanguageID FarEastLineBreakLanguage();

	// FarEastLineBreakLanguage:   [dispid 326]
	void FarEastLineBreakLanguage(WdFarEastLineBreakLanguageID arg0);

	// _Frameset:   [dispid 327]
	void _Frameset(TFramesetProxy& Obj);

	// ClickAndTypeParagraphStyle:   [dispid 328]
	__OCF TAutoVal ClickAndTypeParagraphStyle();

	// ClickAndTypeParagraphStyle:   [dispid 328]
	void ClickAndTypeParagraphStyle(__OCF TAutoVal* arg0);

	// _HTMLProject:   [dispid 329]
	void _HTMLProject(THTMLProjectProxy& Obj);

	// _WebOptions:   [dispid 330]
	void _WebOptions(TWebOptionsProxy& Obj);

	// OpenEncoding:   [dispid 332]
	MsoEncoding OpenEncoding();

	// SaveEncoding:   [dispid 333]
	MsoEncoding SaveEncoding();

	// SaveEncoding:   [dispid 333]
	void SaveEncoding(MsoEncoding arg0);

	// OptimizeForWord97:   [dispid 334]
	/*__OWL*/ TBool OptimizeForWord97();

	// OptimizeForWord97:   [dispid 334]
	void OptimizeForWord97(/*__OWL*/ TBool arg0);

	// VBASigned:   [dispid 335]
	/*__OWL*/ TBool VBASigned();

	// PrintOut2000:   [dispid 444]
	void PrintOut2000(__OCF TAutoVal* Background = 0, __OCF TAutoVal* Append = 0, __OCF TAutoVal* arg2 = 0, __OCF TAutoVal* OutputFileName = 0, __OCF TAutoVal* From = 0, __OCF TAutoVal* To = 0, __OCF TAutoVal* Item = 0, __OCF TAutoVal* Copies = 0, __OCF TAutoVal* Pages = 0, __OCF TAutoVal* PageType = 0, __OCF TAutoVal* PrintToFile = 0, __OCF TAutoVal* Collate = 0, __OCF TAutoVal* ActivePrinterMacGX = 0, __OCF TAutoVal* ManualDuplexPrint = 0, __OCF TAutoVal* PrintZoomColumn = 0, __OCF TAutoVal* PrintZoomRow = 0, __OCF TAutoVal* PrintZoomPaperWidth = 0, __OCF TAutoVal* PrintZoomPaperHeight = 0);

	// sblt:   [dispid 445]
	void sblt(__OCF TAutoString s);

	// ConvertVietDoc:   [dispid 447]
	void ConvertVietDoc(long CodePageOrigin);

	// PrintOut:   [dispid 446]
	void PrintOut(__OCF TAutoVal* Background = 0, __OCF TAutoVal* Append = 0, __OCF TAutoVal* arg2 = 0, __OCF TAutoVal* OutputFileName = 0, __OCF TAutoVal* From = 0, __OCF TAutoVal* To = 0, __OCF TAutoVal* Item = 0, __OCF TAutoVal* Copies = 0, __OCF TAutoVal* Pages = 0, __OCF TAutoVal* PageType = 0, __OCF TAutoVal* PrintToFile = 0, __OCF TAutoVal* Collate = 0, __OCF TAutoVal* ActivePrinterMacGX = 0, __OCF TAutoVal* ManualDuplexPrint = 0, __OCF TAutoVal* PrintZoomColumn = 0, __OCF TAutoVal* PrintZoomRow = 0, __OCF TAutoVal* PrintZoomPaperWidth = 0, __OCF TAutoVal* PrintZoomPaperHeight = 0);

	// MailEnvelope:   [dispid 336]
	MsoEnvelope* MailEnvelope();

	// DisableFeatures:   [dispid 337]
	/*__OWL*/ TBool DisableFeatures();

	// DisableFeatures:   [dispid 337]
	void DisableFeatures(/*__OWL*/ TBool arg0);

	// DoNotEmbedSystemFonts:   [dispid 338]
	/*__OWL*/ TBool DoNotEmbedSystemFonts();

	// DoNotEmbedSystemFonts:   [dispid 338]
	void DoNotEmbedSystemFonts(/*__OWL*/ TBool arg0);

	// Signatures:   [dispid 339]
	void Signatures(TSignatureSetProxy& Obj);

	// DefaultTargetFrame:   [dispid 340]
	__OCF TAutoString DefaultTargetFrame();

	// DefaultTargetFrame:   [dispid 340]
	void DefaultTargetFrame(__OCF TAutoString arg0);

	// _HTMLDivisions:   [dispid 342]
	void _HTMLDivisions(THTMLDivisionsProxy& Obj);

	// DisableFeaturesIntroducedAfter:   [dispid 343]
	WdDisableFeaturesIntroducedAfter DisableFeaturesIntroducedAfter();

	// DisableFeaturesIntroducedAfter:   [dispid 343]
	void DisableFeaturesIntroducedAfter(WdDisableFeaturesIntroducedAfter arg0);

	// RemovePersonalInformation:   [dispid 344]
	/*__OWL*/ TBool RemovePersonalInformation();

	// RemovePersonalInformation:   [dispid 344]
	void RemovePersonalInformation(/*__OWL*/ TBool arg0);

	// _SmartTags:   [dispid 346]
	void _SmartTags(TSmartTagsProxy& Obj);

	// Compare2002:   [dispid 345]
	void Compare2002(__OCF TAutoString Name, __OCF TAutoVal* AuthorName = 0, __OCF TAutoVal* CompareTarget = 0, __OCF TAutoVal* DetectFormatChanges = 0, __OCF TAutoVal* IgnoreAllComparisonWarnings = 0, __OCF TAutoVal* AddToRecentFiles = 0);

	// CheckIn:   [dispid 349]
	void CheckIn(/*__OWL*/ TBool SaveChanges, __OCF TAutoVal* arg1, /*__OWL*/ TBool MakePublic);

	// CanCheckin:   [dispid 351]
	/*__OWL*/ TBool CanCheckin();

	// Merge:   [dispid 362]
	void Merge(__OCF TAutoString FileName, __OCF TAutoVal* MergeTarget = 0, __OCF TAutoVal* DetectFormatChanges = 0, __OCF TAutoVal* UseFormattingFrom = 0, __OCF TAutoVal* AddToRecentFiles = 0);

	// EmbedSmartTags:   [dispid 347]
	/*__OWL*/ TBool EmbedSmartTags();

	// EmbedSmartTags:   [dispid 347]
	void EmbedSmartTags(/*__OWL*/ TBool arg0);

	// SmartTagsAsXMLProps:   [dispid 348]
	/*__OWL*/ TBool SmartTagsAsXMLProps();

	// SmartTagsAsXMLProps:   [dispid 348]
	void SmartTagsAsXMLProps(/*__OWL*/ TBool arg0);

	// TextEncoding:   [dispid 357]
	MsoEncoding TextEncoding();

	// TextEncoding:   [dispid 357]
	void TextEncoding(MsoEncoding arg0);

	// TextLineEnding:   [dispid 358]
	WdLineEndingType TextLineEnding();

	// TextLineEnding:   [dispid 358]
	void TextLineEnding(WdLineEndingType arg0);

	// SendForReview:   [dispid 353]
	void SendForReview(__OCF TAutoVal* Recipients = 0, __OCF TAutoVal* Subject = 0, __OCF TAutoVal* ShowMessage = 0, __OCF TAutoVal* IncludeAttachment = 0);

	// ReplyWithChanges:   [dispid 354]
	void ReplyWithChanges(__OCF TAutoVal* ShowMessage = 0);

	// EndReview:   [dispid 356]
	void EndReview();

	// _StyleSheets:   [dispid 360]
	void _StyleSheets(TStyleSheetsProxy& Obj);

	// DefaultTableStyle:   [dispid 365]
	__OCF TAutoVal DefaultTableStyle();

	// PasswordEncryptionProvider:   [dispid 367]
	__OCF TAutoString PasswordEncryptionProvider();

	// PasswordEncryptionAlgorithm:   [dispid 368]
	__OCF TAutoString PasswordEncryptionAlgorithm();

	// PasswordEncryptionKeyLength:   [dispid 369]
	long PasswordEncryptionKeyLength();

	// PasswordEncryptionFileProperties:   [dispid 370]
	/*__OWL*/ TBool PasswordEncryptionFileProperties();

	// SetPasswordEncryptionOptions:   [dispid 361]
	void SetPasswordEncryptionOptions(__OCF TAutoString PasswordEncryptionProvider, __OCF TAutoString PasswordEncryptionAlgorithm, long PasswordEncryptionKeyLength, __OCF TAutoVal* PasswordEncryptionFileProperties = 0);

	// RecheckSmartTags:   [dispid 363]
	void RecheckSmartTags();

	// RemoveSmartTags:   [dispid 364]
	void RemoveSmartTags();

	// SetDefaultTableStyle:   [dispid 366]
	void SetDefaultTableStyle(__OCF TAutoVal* Style, /*__OWL*/ TBool SetInTemplate);

	// DeleteAllComments:   [dispid 371]
	void DeleteAllComments();

	// AcceptAllRevisionsShown:   [dispid 372]
	void AcceptAllRevisionsShown();

	// RejectAllRevisionsShown:   [dispid 373]
	void RejectAllRevisionsShown();

	// DeleteAllCommentsShown:   [dispid 374]
	void DeleteAllCommentsShown();

	// ResetFormFields:   [dispid 375]
	void ResetFormFields();

	// SaveAs:   [dispid 376]
	void SaveAs(__OCF TAutoVal* FileName = 0, __OCF TAutoVal* FileFormat = 0, __OCF TAutoVal* LockComments = 0, __OCF TAutoVal* Password = 0, __OCF TAutoVal* AddToRecentFiles = 0, __OCF TAutoVal* WritePassword = 0, __OCF TAutoVal* ReadOnlyRecommended = 0, __OCF TAutoVal* EmbedTrueTypeFonts = 0, __OCF TAutoVal* SaveNativePictureFormat = 0, __OCF TAutoVal* SaveFormsData = 0, __OCF TAutoVal* SaveAsAOCELetter = 0, __OCF TAutoVal* Encoding = 0, __OCF TAutoVal* InsertLineBreaks = 0, __OCF TAutoVal* AllowSubstitutions = 0, __OCF TAutoVal* LineEnding = 0, __OCF TAutoVal* AddBiDiMarks = 0);

	// EmbedLinguisticData:   [dispid 377]
	/*__OWL*/ TBool EmbedLinguisticData();

	// EmbedLinguisticData:   [dispid 377]
	void EmbedLinguisticData(/*__OWL*/ TBool arg0);

	// FormattingShowFont:   [dispid 448]
	/*__OWL*/ TBool FormattingShowFont();

	// FormattingShowFont:   [dispid 448]
	void FormattingShowFont(/*__OWL*/ TBool arg0);

	// FormattingShowClear:   [dispid 449]
	/*__OWL*/ TBool FormattingShowClear();

	// FormattingShowClear:   [dispid 449]
	void FormattingShowClear(/*__OWL*/ TBool arg0);

	// FormattingShowParagraph:   [dispid 450]
	/*__OWL*/ TBool FormattingShowParagraph();

	// FormattingShowParagraph:   [dispid 450]
	void FormattingShowParagraph(/*__OWL*/ TBool arg0);

	// FormattingShowNumbering:   [dispid 451]
	/*__OWL*/ TBool FormattingShowNumbering();

	// FormattingShowNumbering:   [dispid 451]
	void FormattingShowNumbering(/*__OWL*/ TBool arg0);

	// FormattingShowFilter:   [dispid 452]
	WdShowFilter FormattingShowFilter();

	// FormattingShowFilter:   [dispid 452]
	void FormattingShowFilter(WdShowFilter arg0);

	// CheckNewSmartTags:   [dispid 378]
	void CheckNewSmartTags();

	// _Permission:   [dispid 453]
	void _Permission(TPermissionProxy& Obj);

	// _XMLNodes:   [dispid 460]
	void _XMLNodes(TXMLNodesProxy& Obj);

	// _XMLSchemaReferences:   [dispid 461]
	void _XMLSchemaReferences(TXMLSchemaReferencesProxy& Obj);

	// _SmartDocument:   [dispid 462]
	void _SmartDocument(TSmartDocumentProxy& Obj);

	// _SharedWorkspace:   [dispid 463]
	void _SharedWorkspace(TSharedWorkspaceProxy& Obj);

	// _Sync:   [dispid 466]
	void _Sync(TSyncProxy& Obj);

	// EnforceStyle:   [dispid 471]
	/*__OWL*/ TBool EnforceStyle();

	// EnforceStyle:   [dispid 471]
	void EnforceStyle(/*__OWL*/ TBool arg0);

	// AutoFormatOverride:   [dispid 472]
	/*__OWL*/ TBool AutoFormatOverride();

	// AutoFormatOverride:   [dispid 472]
	void AutoFormatOverride(/*__OWL*/ TBool arg0);

	// XMLSaveDataOnly:   [dispid 473]
	/*__OWL*/ TBool XMLSaveDataOnly();

	// XMLSaveDataOnly:   [dispid 473]
	void XMLSaveDataOnly(/*__OWL*/ TBool arg0);

	// XMLHideNamespaces:   [dispid 477]
	/*__OWL*/ TBool XMLHideNamespaces();

	// XMLHideNamespaces:   [dispid 477]
	void XMLHideNamespaces(/*__OWL*/ TBool arg0);

	// XMLShowAdvancedErrors:   [dispid 478]
	/*__OWL*/ TBool XMLShowAdvancedErrors();

	// XMLShowAdvancedErrors:   [dispid 478]
	void XMLShowAdvancedErrors(/*__OWL*/ TBool arg0);

	// XMLUseXSLTWhenSaving:   [dispid 474]
	/*__OWL*/ TBool XMLUseXSLTWhenSaving();

	// XMLUseXSLTWhenSaving:   [dispid 474]
	void XMLUseXSLTWhenSaving(/*__OWL*/ TBool arg0);

	// XMLSaveThroughXSLT:   [dispid 475]
	__OCF TAutoString XMLSaveThroughXSLT();

	// XMLSaveThroughXSLT:   [dispid 475]
	void XMLSaveThroughXSLT(__OCF TAutoString arg0);

	// _DocumentLibraryVersions:   [dispid 476]
	void _DocumentLibraryVersions(TDocumentLibraryVersionsProxy& Obj);

	// ReadingModeLayoutFrozen:   [dispid 481]
	/*__OWL*/ TBool ReadingModeLayoutFrozen();

	// ReadingModeLayoutFrozen:   [dispid 481]
	void ReadingModeLayoutFrozen(/*__OWL*/ TBool arg0);

	// RemoveDateAndTime:   [dispid 484]
	/*__OWL*/ TBool RemoveDateAndTime();

	// RemoveDateAndTime:   [dispid 484]
	void RemoveDateAndTime(/*__OWL*/ TBool arg0);

	// SendFaxOverInternet:   [dispid 464]
	void SendFaxOverInternet(__OCF TAutoVal* Recipients = 0, __OCF TAutoVal* Subject = 0, __OCF TAutoVal* ShowMessage = 0);

	// TransformDocument:   [dispid 500]
	void TransformDocument(__OCF TAutoString Path, /*__OWL*/ TBool DataOnly);

	// Protect:   [dispid 467]
	void Protect(WdProtectionType Type, __OCF TAutoVal* NoReset = 0, __OCF TAutoVal* Password = 0, __OCF TAutoVal* UseIRM = 0, __OCF TAutoVal* EnforceStyleLock = 0);

	// SelectAllEditableRanges:   [dispid 468]
	void SelectAllEditableRanges(__OCF TAutoVal* EditorID = 0);

	// DeleteAllEditableRanges:   [dispid 469]
	void DeleteAllEditableRanges(__OCF TAutoVal* EditorID = 0);

	// DeleteAllInkAnnotations:   [dispid 479]
	void DeleteAllInkAnnotations();

	// AddDocumentWorkspaceHeader:   [dispid 482]
	void AddDocumentWorkspaceHeader(/*__OWL*/ TBool RichFormat, __OCF TAutoString Url, __OCF TAutoString Title, __OCF TAutoString Description, __OCF TAutoString ID);

	// RemoveDocumentWorkspaceHeader:   [dispid 483]
	void RemoveDocumentWorkspaceHeader(__OCF TAutoString ID);

	// Compare:   [dispid 485]
	void Compare(__OCF TAutoString Name, __OCF TAutoVal* AuthorName = 0, __OCF TAutoVal* CompareTarget = 0, __OCF TAutoVal* DetectFormatChanges = 0, __OCF TAutoVal* IgnoreAllComparisonWarnings = 0, __OCF TAutoVal* AddToRecentFiles = 0, __OCF TAutoVal* RemovePersonalInformation = 0, __OCF TAutoVal* RemoveDateAndTime = 0);

	// RemoveLockedStyles:   [dispid 487]
	void RemoveLockedStyles();

	// ChildNodeSuggestions:   [dispid 486]
	void ChildNodeSuggestions(TXMLChildNodeSuggestionsProxy& Obj);

	// SelectSingleNode:   [dispid 488]
	void SelectSingleNode(TXMLNodeProxy& Obj, __OCF TAutoString XPath, __OCF TAutoString PrefixMapping, /*__OWL*/ TBool FastSearchSkippingTextNodes);

	// SelectNodes:   [dispid 489]
	void SelectNodes(TXMLNodesProxy& Obj, __OCF TAutoString XPath, __OCF TAutoString PrefixMapping, /*__OWL*/ TBool FastSearchSkippingTextNodes);

	// XMLSchemaViolations:   [dispid 490]
	void XMLSchemaViolations(TXMLNodesProxy& Obj);

	// ReadingLayoutSizeX:   [dispid 491]
	long ReadingLayoutSizeX();

	// ReadingLayoutSizeX:   [dispid 491]
	void ReadingLayoutSizeX(long arg0);

	// ReadingLayoutSizeY:   [dispid 492]
	long ReadingLayoutSizeY();

	// ReadingLayoutSizeY:   [dispid 492]
	void ReadingLayoutSizeY(long arg0);
};
#endif

// Documents
// {0002096C-0000-0000-C000-000000000046}
#undef INTERFACE
#define INTERFACE Documents
DECLARE_INTERFACE_(Documents, IDispatch)
{
#ifndef __cplusplus
	// IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	// IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	// Documents methods:
	STDMETHOD_(HRESULT, Get__NewEnum) (THIS_ IUnknown** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Count) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Application) (THIS_ WordApplication** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Creator) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Item) (THIS_ VARIANT* Index, WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, Close) (THIS_ VARIANT* SaveChanges, VARIANT* OriginalFormat, VARIANT* RouteDocument) PURE; 
	STDMETHOD_(HRESULT, AddOld) (THIS_ VARIANT* , VARIANT* NewTemplate, WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, OpenOld) (THIS_ VARIANT* FileName, VARIANT* ConfirmConversions, VARIANT* ReadOnly, VARIANT* AddToRecentFiles, VARIANT* PasswordDocument, VARIANT* PasswordTemplate, VARIANT* Revert, VARIANT* WritePasswordDocument, VARIANT* WritePasswordTemplate, VARIANT* Format, WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, Save) (THIS_ VARIANT* NoPrompt, VARIANT* OriginalFormat) PURE; 
	STDMETHOD_(HRESULT, Add) (THIS_ VARIANT* , VARIANT* NewTemplate, VARIANT* DocumentType, VARIANT* Visible, WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, Open2000) (THIS_ VARIANT* FileName, VARIANT* ConfirmConversions, VARIANT* ReadOnly, VARIANT* AddToRecentFiles, VARIANT* PasswordDocument, VARIANT* PasswordTemplate, VARIANT* Revert, VARIANT* WritePasswordDocument, VARIANT* WritePasswordTemplate, VARIANT* Format, VARIANT* Encoding, VARIANT* Visible, WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, CheckOut) (THIS_ BSTR FileName) PURE; 
	STDMETHOD_(HRESULT, CanCheckOut) (THIS_ BSTR FileName, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Open2002) (THIS_ VARIANT* FileName, VARIANT* ConfirmConversions, VARIANT* ReadOnly, VARIANT* AddToRecentFiles, VARIANT* PasswordDocument, VARIANT* PasswordTemplate, VARIANT* Revert, VARIANT* WritePasswordDocument, VARIANT* WritePasswordTemplate, VARIANT* Format, VARIANT* Encoding, VARIANT* Visible, VARIANT* OpenAndRepair, VARIANT* DocumentDirection, VARIANT* NoEncodingDialog, WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, Open) (THIS_ VARIANT* FileName, VARIANT* ConfirmConversions, VARIANT* ReadOnly, VARIANT* AddToRecentFiles, VARIANT* PasswordDocument, VARIANT* PasswordTemplate, VARIANT* Revert, VARIANT* WritePasswordDocument, VARIANT* WritePasswordTemplate, VARIANT* Format, VARIANT* Encoding, VARIANT* Visible, VARIANT* OpenAndRepair, VARIANT* DocumentDirection, VARIANT* NoEncodingDialog, VARIANT* XMLTransform, WordDocument** prop) PURE; 
};
typedef Documents* LPOCUMENTS;
#ifdef __cplusplus
// Documents  {0002096C-0000-0000-C000-000000000046}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TDocumentsProxy : public __OCF TAutoProxy
{
public:
	TDocumentsProxy() : TAutoProxy(0x0) {}

	// _NewEnum:   [dispid -4]
	void _NewEnum(__OCF TAutoEnumerator<IUnknown*>& Obj);

	// Count:   [dispid 2]
	long Count();

	// _Application:   [dispid 1000]
	WordApplication* _Application();

	// Creator:   [dispid 1001]
	long Creator();

	// Parent:   [dispid 1002]
	IDispatch* Parent();

	// Item:   [dispid 0]
	WordDocument* Item(__OCF TAutoVal* Index);

	// Close:   [dispid 1105]
	void Close(__OCF TAutoVal* SaveChanges = 0, __OCF TAutoVal* OriginalFormat = 0, __OCF TAutoVal* RouteDocument = 0);

	// AddOld:   [dispid 11]
	WordDocument* AddOld(__OCF TAutoVal* arg0 = 0, __OCF TAutoVal* NewTemplate = 0);

	// OpenOld:   [dispid 12]
	WordDocument* OpenOld(__OCF TAutoVal* FileName, __OCF TAutoVal* ConfirmConversions = 0, __OCF TAutoVal* ReadOnly = 0, __OCF TAutoVal* AddToRecentFiles = 0, __OCF TAutoVal* PasswordDocument = 0, __OCF TAutoVal* PasswordTemplate = 0, __OCF TAutoVal* Revert = 0, __OCF TAutoVal* WritePasswordDocument = 0, __OCF TAutoVal* WritePasswordTemplate = 0, __OCF TAutoVal* Format = 0);

	// Save:   [dispid 13]
	void Save(__OCF TAutoVal* NoPrompt = 0, __OCF TAutoVal* OriginalFormat = 0);

	// Add:   [dispid 14]
	T_DocumentProxy* Add(__OCF TAutoVal* arg0 = 0, __OCF TAutoVal* NewTemplate = 0, __OCF TAutoVal* DocumentType = 0, __OCF TAutoVal* Visible = 0);

	// Open2000:   [dispid 15]
	T_DocumentProxy* Open2000(__OCF TAutoVal* FileName, __OCF TAutoVal* ConfirmConversions = 0, __OCF TAutoVal* ReadOnly = 0, __OCF TAutoVal* AddToRecentFiles = 0, __OCF TAutoVal* PasswordDocument = 0, __OCF TAutoVal* PasswordTemplate = 0, __OCF TAutoVal* Revert = 0, __OCF TAutoVal* WritePasswordDocument = 0, __OCF TAutoVal* WritePasswordTemplate = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* Encoding = 0, __OCF TAutoVal* Visible = 0);

	// CheckOut:   [dispid 16]
	void CheckOut(__OCF TAutoString FileName);

	// CanCheckOut:   [dispid 17]
	/*__OWL*/ TBool CanCheckOut(__OCF TAutoString FileName);

	// Open2002:   [dispid 18]
	T_DocumentProxy* Open2002(__OCF TAutoVal* FileName, __OCF TAutoVal* ConfirmConversions = 0, __OCF TAutoVal* ReadOnly = 0, __OCF TAutoVal* AddToRecentFiles = 0, __OCF TAutoVal* PasswordDocument = 0, __OCF TAutoVal* PasswordTemplate = 0, __OCF TAutoVal* Revert = 0, __OCF TAutoVal* WritePasswordDocument = 0, __OCF TAutoVal* WritePasswordTemplate = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* Encoding = 0, __OCF TAutoVal* Visible = 0, __OCF TAutoVal* OpenAndRepair = 0, __OCF TAutoVal* DocumentDirection = 0, __OCF TAutoVal* NoEncodingDialog = 0);

	// Open:   [dispid 19]
	T_DocumentProxy* Open(__OCF TAutoVal* FileName, __OCF TAutoVal* ConfirmConversions = 0, __OCF TAutoVal* ReadOnly = 0, __OCF TAutoVal* AddToRecentFiles = 0, __OCF TAutoVal* PasswordDocument = 0, __OCF TAutoVal* PasswordTemplate = 0, __OCF TAutoVal* Revert = 0, __OCF TAutoVal* WritePasswordDocument = 0, __OCF TAutoVal* WritePasswordTemplate = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* Encoding = 0, __OCF TAutoVal* Visible = 0, __OCF TAutoVal* OpenAndRepair = 0, __OCF TAutoVal* DocumentDirection = 0, __OCF TAutoVal* NoEncodingDialog = 0, __OCF TAutoVal* XMLTransform = 0);
};
#endif

// WdLanguageID
typedef enum tagWdLanguageID
{
	wdLanguageNone = 0,
	wdNoProofing = 1024,
	wdAfrikaans = 1078,
	wdAlbanian = 1052,
	wdAmharic = 1118,
	wdArabicAlgeria = 5121,
	wdArabicBahrain = 15361,
	wdArabicEgypt = 3073,
	wdArabicIraq = 2049,
	wdArabicJordan = 11265,
	wdArabicKuwait = 13313,
	wdArabicLebanon = 12289,
	wdArabicLibya = 4097,
	wdArabicMorocco = 6145,
	wdArabicOman = 8193,
	wdArabicQatar = 16385,
	wdArabic = 1025,
	wdArabicSyria = 10241,
	wdArabicTunisia = 7169,
	wdArabicUAE = 14337,
	wdArabicYemen = 9217,
	wdArmenian = 1067,
	wdAssamese = 1101,
	wdAzeriCyrillic = 2092,
	wdAzeriLatin = 1068,
	wdBasque = 1069,
	wdByelorussian = 1059,
	wdBengali = 1093,
	wdBulgarian = 1026,
	wdBurmese = 1109,
	wdCatalan = 1027,
	wdCherokee = 1116,
	wdChineseHongKongSAR = 3076,
	wdChineseMacaoSAR = 5124,
	wdSimplifiedChinese = 2052,
	wdChineseSingapore = 4100,
	wdTraditionalChinese = 1028,
	wdCroatian = 1050,
	wdCzech = 1029,
	wdDanish = 1030,
	wdDivehi = 1125,
	wdBelgianDutch = 2067,
	wdDutch = 1043,
	wdDzongkhaBhutan = 2129,
	wdEdo = 1126,
	wdEnglishAUS = 3081,
	wdEnglishBelize = 10249,
	wdEnglishCanadian = 4105,
	wdEnglishCaribbean = 9225,
	wdEnglishIreland = 6153,
	wdEnglishJamaica = 8201,
	wdEnglishNewZealand = 5129,
	wdEnglishPhilippines = 13321,
	wdEnglishSouthAfrica = 7177,
	wdEnglishTrinidadTobago = 11273,
	wdEnglishUK = 2057,
	wdEnglishUS = 1033,
	wdEnglishZimbabwe = 12297,
	wdEnglishIndonesia = 14345,
	wdEstonian = 1061,
	wdFaeroese = 1080,
	wdFarsi = 1065,
	wdFilipino = 1124,
	wdFinnish = 1035,
	wdFulfulde = 1127,
	wdBelgianFrench = 2060,
	wdFrenchCameroon = 11276,
	wdFrenchCanadian = 3084,
	wdFrenchCotedIvoire = 12300,
	wdFrench = 1036,
	wdFrenchLuxembourg = 5132,
	wdFrenchMali = 13324,
	wdFrenchMonaco = 6156,
	wdFrenchReunion = 8204,
	wdFrenchSenegal = 10252,
	wdFrenchMorocco = 14348,
	wdFrenchHaiti = 15372,
	wdSwissFrench = 4108,
	wdFrenchWestIndies = 7180,
	wdFrenchZaire = 9228,
	wdFrisianNetherlands = 1122,
	wdGaelicIreland = 2108,
	wdGaelicScotland = 1084,
	wdGalician = 1110,
	wdGeorgian = 1079,
	wdGermanAustria = 3079,
	wdGerman = 1031,
	wdGermanLiechtenstein = 5127,
	wdGermanLuxembourg = 4103,
	wdSwissGerman = 2055,
	wdGreek = 1032,
	wdGuarani = 1140,
	wdGujarati = 1095,
	wdHausa = 1128,
	wdHawaiian = 1141,
	wdHebrew = 1037,
	wdHindi = 1081,
	wdHungarian = 1038,
	wdIbibio = 1129,
	wdIcelandic = 1039,
	wdIgbo = 1136,
	wdIndonesian = 1057,
	wdInuktitut = 1117,
	wdItalian = 1040,
	wdSwissItalian = 2064,
	wdJapanese = 1041,
	wdKannada = 1099,
	wdKanuri = 1137,
	wdKashmiri = 1120,
	wdKazakh = 1087,
	wdKhmer = 1107,
	wdKirghiz = 1088,
	wdKonkani = 1111,
	wdKorean = 1042,
	wdKyrgyz = 1088,
	wdLao = 1108,
	wdLatin = 1142,
	wdLatvian = 1062,
	wdLithuanian = 1063,
	wdMacedonian = 1071,
	wdMalaysian = 1086,
	wdMalayBruneiDarussalam = 2110,
	wdMalayalam = 1100,
	wdMaltese = 1082,
	wdManipuri = 1112,
	wdMarathi = 1102,
	wdMongolian = 1104,
	wdNepali = 1121,
	wdNorwegianBokmol = 1044,
	wdNorwegianNynorsk = 2068,
	wdOriya = 1096,
	wdOromo = 1138,
	wdPashto = 1123,
	wdPolish = 1045,
	wdBrazilianPortuguese = 1046,
	wdPortuguese = 2070,
	wdPunjabi = 1094,
	wdRhaetoRomanic = 1047,
	wdRomanianMoldova = 2072,
	wdRomanian = 1048,
	wdRussianMoldova = 2073,
	wdRussian = 1049,
	wdSamiLappish = 1083,
	wdSanskrit = 1103,
	wdSerbianCyrillic = 3098,
	wdSerbianLatin = 2074,
	wdSinhalese = 1115,
	wdSindhi = 1113,
	wdSindhiPakistan = 2137,
	wdSlovak = 1051,
	wdSlovenian = 1060,
	wdSomali = 1143,
	wdSorbian = 1070,
	wdSpanishArgentina = 11274,
	wdSpanishBolivia = 16394,
	wdSpanishChile = 13322,
	wdSpanishColombia = 9226,
	wdSpanishCostaRica = 5130,
	wdSpanishDominicanRepublic = 7178,
	wdSpanishEcuador = 12298,
	wdSpanishElSalvador = 17418,
	wdSpanishGuatemala = 4106,
	wdSpanishHonduras = 18442,
	wdMexicanSpanish = 2058,
	wdSpanishNicaragua = 19466,
	wdSpanishPanama = 6154,
	wdSpanishParaguay = 15370,
	wdSpanishPeru = 10250,
	wdSpanishPuertoRico = 20490,
	wdSpanishModernSort = 3082,
	wdSpanish = 1034,
	wdSpanishUruguay = 14346,
	wdSpanishVenezuela = 8202,
	wdSesotho = 1072,
	wdSutu = 1072,
	wdSwahili = 1089,
	wdSwedishFinland = 2077,
	wdSwedish = 1053,
	wdSyriac = 1114,
	wdTajik = 1064,
	wdTamazight = 1119,
	wdTamazightLatin = 2143,
	wdTamil = 1097,
	wdTatar = 1092,
	wdTelugu = 1098,
	wdThai = 1054,
	wdTibetan = 1105,
	wdTigrignaEthiopic = 1139,
	wdTigrignaEritrea = 2163,
	wdTsonga = 1073,
	wdTswana = 1074,
	wdTurkish = 1055,
	wdTurkmen = 1090,
	wdUkrainian = 1058,
	wdUrdu = 1056,
	wdUzbekCyrillic = 2115,
	wdUzbekLatin = 1091,
	wdVenda = 1075,
	wdVietnamese = 1066,
	wdWelsh = 1106,
	wdXhosa = 1076,
	wdYi = 1144,
	wdYiddish = 1085,
	wdYoruba = 1130,
	wdZulu = 1077,
} WdLanguageID;

// WdStoryType
typedef enum tagWdStoryType
{
	wdMainTextStory = 1, 
	wdFootnotesStory = 2, 
	wdEndnotesStory = 3, 
	wdCommentsStory = 4, 
	wdTextFrameStory = 5, 
	wdEvenPagesHeaderStory = 6, 
	wdPrimaryHeaderStory = 7, 
	wdEvenPagesFooterStory = 8, 
	wdPrimaryFooterStory = 9, 
	wdFirstPageHeaderStory = 10, 
	wdFirstPageFooterStory = 11, 
	wdFootnoteSeparatorStory = 12, 
	wdFootnoteContinuationSeparatorStory = 13, 
	wdFootnoteContinuationNoticeStory = 14, 
	wdEndnoteSeparatorStory = 15, 
	wdEndnoteContinuationSeparatorStory = 16, 
	wdEndnoteContinuationNoticeStory = 17, 
} WdStoryType;

// WdSelectionType
typedef enum tagWdSelectionType
{
	wdNoSelection = 0, 
	wdSelectionIP = 1, 
	wdSelectionNormal = 2, 
	wdSelectionFrame = 3, 
	wdSelectionColumn = 4, 
	wdSelectionRow = 5, 
	wdSelectionBlock = 6, 
	wdSelectionInlineShape = 7, 
	wdSelectionShape = 8, 
} WdSelectionType;

// WdSelectionFlags
typedef enum tagWdSelectionFlags
{
	wdSelStartActive = 1, 
	wdSelAtEOL = 2, 
	wdSelOvertype = 4, 
	wdSelActive = 8, 
	wdSelReplace = 16, 
} WdSelectionFlags;

// WdInformation
typedef enum tagWdInformation
{
	wdActiveEndAdjustedPageNumber = 1, 
	wdActiveEndSectionNumber = 2, 
	wdActiveEndPageNumber = 3, 
	wdNumberOfPagesInDocument = 4, 
	wdHorizontalPositionRelativeToPage = 5, 
	wdVerticalPositionRelativeToPage = 6, 
	wdHorizontalPositionRelativeToTextBoundary = 7, 
	wdVerticalPositionRelativeToTextBoundary = 8, 
	wdFirstCharacterColumnNumber = 9, 
	wdFirstCharacterLineNumber = 10, 
	wdFrameIsSelected = 11,
	wdWithInTable = 12, 
	wdStartOfRangeRowNumber = 13, 
	wdEndOfRangeRowNumber = 14, 
	wdMaximumNumberOfRows = 15, 
	wdStartOfRangeColumnNumber = 16, 
	wdEndOfRangeColumnNumber = 17, 
	wdMaximumNumberOfColumns = 18, 
	wdZoomPercentage = 19, 
	wdSelectionMode = 20, 
	wdCapsLock = 21, 
	wdNumLock = 22, 
	wdOverType = 23, 
	wdRevisionMarking = 24, 
	wdInFootnoteEndnotePane = 25, 
	wdInCommentPane = 26, 
	wdInHeaderFooter = 28, 
	wdAtEndOfRowMarker = 31, 
	wdReferenceOfType = 32, 
	wdHeaderFooterType = 33, 
	wdInMasterDocument = 34, 
	wdInFootnote = 35, 
	wdInEndnote = 36, 
	wdInWordMail = 37, 
	wdInClipboard = 38, 
} WdInformation;

// WdTextOrientation
typedef enum tagWdTextOrientation
{
	wdTextOrientationHorizontal = 0, 
	wdTextOrientationUpward = 2, 
	wdTextOrientationDownward = 3, 
	wdTextOrientationVerticalFarEast = 1, 
	wdTextOrientationHorizontalRotatedFarEast = 4, 
} WdTextOrientation;

// WdGoToItem
typedef enum tagWdGoToItem
{
	wdGoToBookmark = -1, 
	wdGoToSection = 0, 
	wdGoToPage = 1, 
	wdGoToTable = 2, 
	wdGoToLine = 3, 
	wdGoToFootnote = 4, 
	wdGoToEndnote = 5, 
	wdGoToComment = 6, 
	wdGoToField = 7, 
	wdGoToGraphic = 8, 
	wdGoToObject = 9, 
	wdGoToEquation = 10, 
	wdGoToHeading = 11, 
	wdGoToPercent = 12, 
	wdGoToSpellingError = 13, 
	wdGoToGrammaticalError = 14, 
	wdGoToProofreadingError = 15, 
} WdGoToItem;

// WdReferenceKind
typedef enum tagWdReferenceKind
{
	wdContentText = -1, 
	wdNumberRelativeContext = -2, 
	wdNumberNoContext = -3, 
	wdNumberFullContext = -4, 
	wdEntireCaption = 2, 
	wdOnlyLabelAndNumber = 3, 
	wdOnlyCaptionText = 4, 
	wdFootnoteNumber = 5, 
	wdEndnoteNumber = 6, 
	wdPageNumber = 7, 
	wdPosition = 15, 
	wdFootnoteNumberFormatted = 16, 
	wdEndnoteNumberFormatted = 17, 
} WdReferenceKind;

// WdRecoveryType
typedef enum tagWdRecoveryType
{
	wdPasteDefault = 0, 
	wdSingleCellText = 5, 
	wdSingleCellTable = 6, 
	wdListContinueNumbering = 7,
	wdListRestartNumbering = 8, 
	wdTableInsertAsRows = 11, 
	wdTableAppendTable = 10, 
	wdTableOriginalFormatting = 12, 
	wdChartPicture = 13, 
	wdChart = 14, 
	wdChartLinked = 15, 
	wdFormatOriginalFormatting = 16, 
	wdFormatSurroundingFormattingWithEmphasis = 20, 
	wdFormatPlainText = 22, 
	wdTableOverwriteCells = 23, 
	wdListCombineWithExistingList = 24, 
	wdListDontMerge = 25, 
} WdRecoveryType;

// WdCollapseDirection
typedef enum tagWdCollapseDirection
{
	wdCollapseStart = 1,
	wdCollapseEnd = 0,
} WdCollapseDirection;

// Selection
// {00020975-0000-0000-C000-000000000046}
#undef INTERFACE
#define INTERFACE Selection
DECLARE_INTERFACE_(Selection, IDispatch)
{
#ifndef __cplusplus
	// IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	// IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	// Selection methods:
	STDMETHOD_(HRESULT, Get_Text) (THIS_ BSTR* prop) PURE;
	STDMETHOD_(HRESULT, Set_Text) (THIS_ BSTR prop) PURE;
	STDMETHOD_(HRESULT, Get_FormattedText) (THIS_ WordRange** prop) PURE;
	STDMETHOD_(HRESULT, Set_FormattedText) (THIS_ WordRange* prop) PURE;
	STDMETHOD_(HRESULT, Get_Start) (THIS_ long* prop) PURE;
	STDMETHOD_(HRESULT, Set_Start) (THIS_ long prop) PURE;
	STDMETHOD_(HRESULT, Get_End) (THIS_ long* prop) PURE;
	STDMETHOD_(HRESULT, Set_End) (THIS_ long prop) PURE;
	STDMETHOD_(HRESULT, Get_Font) (THIS_ Font** prop) PURE;
	STDMETHOD_(HRESULT, Set_Font) (THIS_ Font* prop) PURE;
	STDMETHOD_(HRESULT, Get_Type) (THIS_ WdSelectionType* prop) PURE;
	STDMETHOD_(HRESULT, Get_StoryType) (THIS_ WdStoryType* prop) PURE;
	STDMETHOD_(HRESULT, Get_Style) (THIS_ VARIANT* prop) PURE;
	STDMETHOD_(HRESULT, Set_Style) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Tables) (THIS_ Tables** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Words) (THIS_ Words** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Sentences) (THIS_ Sentences** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Characters) (THIS_ Characters** prop) PURE;
	STDMETHOD_(HRESULT, Get_Footnotes) (THIS_ Footnotes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Endnotes) (THIS_ Endnotes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Comments) (THIS_ Comments** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Cells) (THIS_ Cells** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Sections) (THIS_ Sections** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Paragraphs) (THIS_ Paragraphs** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Borders) (THIS_ Borders** prop) PURE; 
	STDMETHOD_(HRESULT, Set_Borders) (THIS_ Borders* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Shading) (THIS_ Shading** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Fields) (THIS_ Fields** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormFields) (THIS_ FormFields** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Frames) (THIS_ Frames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ParagraphFormat) (THIS_ ParagraphFormat** prop) PURE; 
	STDMETHOD_(HRESULT, Set_ParagraphFormat) (THIS_ ParagraphFormat* prop) PURE; 
	STDMETHOD_(HRESULT, Get_PageSetup) (THIS_ PageSetup** prop) PURE; 
	STDMETHOD_(HRESULT, Set_PageSetup) (THIS_ PageSetup* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Bookmarks) (THIS_ Bookmarks** prop) PURE; 
	STDMETHOD_(HRESULT, Get_StoryLength) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageID) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageID) (THIS_ WdLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageIDFarEast) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageIDFarEast) (THIS_ WdLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageIDOther) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageIDOther) (THIS_ WdLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Get_Hyperlinks) (THIS_ Hyperlinks** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Columns) (THIS_ Columns** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Rows) (THIS_ Rows** prop) PURE;
	STDMETHOD_(HRESULT, Get_HeaderFooter) (THIS_ HeaderFooter** prop) PURE; 
	STDMETHOD_(HRESULT, Get_IsEndOfRowMark) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_BookmarkID) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_PreviousBookmarkID) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Find) (THIS_ Find** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Range) (THIS_ WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Information) (THIS_ WdInformation Type, VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Flags) (THIS_ WdSelectionFlags* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Flags) (THIS_ WdSelectionFlags prop) PURE; 
	STDMETHOD_(HRESULT, Get_Active) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_StartIsActive) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_StartIsActive) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_IPAtEndOfLine) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_ExtendMode) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ExtendMode) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_ColumnSelectMode) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ColumnSelectMode) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Orientation) (THIS_ WdTextOrientation* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Orientation) (THIS_ WdTextOrientation prop) PURE; 
	STDMETHOD_(HRESULT, Get_InlineShapes) (THIS_ InlineShapes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Application) (THIS_ WordApplication** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Creator) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Document) (THIS_ WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ShapeRange) (THIS_ ShapeRange** prop) PURE; 
	STDMETHOD_(HRESULT, Select) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SetRange) (THIS_ long Start, long End) PURE;
	STDMETHOD_(HRESULT, Collapse) (THIS_ VARIANT* Direction) PURE; 
	STDMETHOD_(HRESULT, InsertBefore) (THIS_ BSTR Text) PURE; 
	STDMETHOD_(HRESULT, InsertAfter) (THIS_ BSTR Text) PURE; 
	STDMETHOD_(HRESULT, Next) (THIS_ VARIANT* Unit, VARIANT* Count, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, Previous) (THIS_ VARIANT* Unit, VARIANT* Count, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, StartOf) (THIS_ VARIANT* Unit, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, EndOf) (THIS_ VARIANT* Unit, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, Move) (THIS_ VARIANT* Unit, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveStart) (THIS_ VARIANT* Unit, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveEnd) (THIS_ VARIANT* Unit, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveWhile) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveStartWhile) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveEndWhile) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveUntil) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveStartUntil) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveEndUntil) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, Cut) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Copy) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Paste) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertBreak) (THIS_ VARIANT* Type) PURE; 
	STDMETHOD_(HRESULT, InsertFile) (THIS_ BSTR FileName, VARIANT* , VARIANT* ConfirmConversions, VARIANT* Link, VARIANT* Attachment) PURE; 
	STDMETHOD_(HRESULT, InStory) (THIS_ WordRange* , VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, InRange) (THIS_ WordRange* , VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Delete) (THIS_ VARIANT* Unit, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, Expand) (THIS_ VARIANT* Unit, long* prop) PURE; 
	STDMETHOD_(HRESULT, InsertParagraph) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertParagraphAfter) (THIS ) PURE;
	STDMETHOD_(HRESULT, ConvertToTableOld) (THIS_ VARIANT* Separator, VARIANT* NumRows, VARIANT* NumColumns, VARIANT* InitialColumnWidth, VARIANT* Format, VARIANT* ApplyBorders, VARIANT* ApplyShading, VARIANT* ApplyFont, VARIANT* ApplyColor, VARIANT* ApplyHeadingRows, VARIANT* ApplyLastRow, VARIANT* ApplyFirstColumn, VARIANT* ApplyLastColumn, VARIANT* AutoFit, Table** prop) PURE; 
	STDMETHOD_(HRESULT, InsertDateTimeOld) (THIS_ VARIANT* DateTimeFormat, VARIANT* InsertAsField, VARIANT* InsertAsFullWidth) PURE; 
	STDMETHOD_(HRESULT, InsertSymbol) (THIS_ long CharacterNumber, VARIANT* , VARIANT* Unicode, VARIANT* Bias) PURE; 
	STDMETHOD_(HRESULT, InsertCrossReference_2002) (THIS_ VARIANT* ReferenceType, WdReferenceKind ReferenceKind, VARIANT* ReferenceItem, VARIANT* InsertAsHyperlink, VARIANT* IncludePosition) PURE; 
	STDMETHOD_(HRESULT, InsertCaptionXP) (THIS_ VARIANT* Label, VARIANT* Title, VARIANT* TitleAutoText, VARIANT* Position) PURE; 
	STDMETHOD_(HRESULT, CopyAsPicture) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SortOld) (THIS_ VARIANT* ExcludeHeader, VARIANT* FieldNumber, VARIANT* SortFieldType, VARIANT* SortOrder, VARIANT* FieldNumber2, VARIANT* SortFieldType2, VARIANT* SortOrder2, VARIANT* FieldNumber3, VARIANT* SortFieldType3, VARIANT* SortOrder3, VARIANT* SortColumn, VARIANT* Separator, VARIANT* CaseSensitive, VARIANT* LanguageID) PURE; 
	STDMETHOD_(HRESULT, SortAscending) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SortDescending) (THIS ) PURE; 
	STDMETHOD_(HRESULT, IsEqual) (THIS_ WordRange* , VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Calculate) (THIS_ float* prop) PURE; 
	STDMETHOD_(HRESULT, GoTo) (THIS_ VARIANT* What, VARIANT* Which, VARIANT* Count, VARIANT* Name, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, GoToNext) (THIS_ WdGoToItem What, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, GoToPrevious) (THIS_ WdGoToItem What, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, PasteSpecial) (THIS_ VARIANT* IconIndex, VARIANT* Link, VARIANT* Placement, VARIANT* DisplayAsIcon, VARIANT* DataType, VARIANT* IconFileName, VARIANT* IconLabel) PURE; 
	STDMETHOD_(HRESULT, PreviousField) (THIS_ Field** prop) PURE; 
	STDMETHOD_(HRESULT, NextField) (THIS_ Field** prop) PURE; 
	STDMETHOD_(HRESULT, InsertParagraphBefore) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertCells) (THIS_ VARIANT* ShiftCells) PURE; 
	STDMETHOD_(HRESULT, Extend) (THIS_ VARIANT* Character) PURE; 
	STDMETHOD_(HRESULT, Shrink) (THIS ) PURE; 
	STDMETHOD_(HRESULT, MoveLeft) (THIS_ VARIANT* Unit, VARIANT* Count, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveRight) (THIS_ VARIANT* Unit, VARIANT* Count, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveUp) (THIS_ VARIANT* Unit, VARIANT* Count, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveDown) (THIS_ VARIANT* Unit, VARIANT* Count, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, HomeKey) (THIS_ VARIANT* Unit, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, EndKey) (THIS_ VARIANT* Unit, VARIANT* Extend, long* prop) PURE;
	STDMETHOD_(HRESULT, EscapeKey) (THIS ) PURE; 
	STDMETHOD_(HRESULT, TypeText) (THIS_ BSTR Text) PURE; 
	STDMETHOD_(HRESULT, CopyFormat) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PasteFormat) (THIS ) PURE; 
	STDMETHOD_(HRESULT, TypeParagraph) (THIS ) PURE; 
	STDMETHOD_(HRESULT, TypeBackspace) (THIS ) PURE; 
	STDMETHOD_(HRESULT, NextSubdocument) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PreviousSubdocument) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SelectColumn) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SelectCurrentFont) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SelectCurrentAlignment) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SelectCurrentSpacing) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SelectCurrentIndent) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SelectCurrentTabs) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SelectCurrentColor) (THIS ) PURE; 
	STDMETHOD_(HRESULT, CreateTextbox) (THIS ) PURE; 
	STDMETHOD_(HRESULT, WholeStory) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SelectRow) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SplitTable) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertRows) (THIS_ VARIANT* NumRows) PURE; 
	STDMETHOD_(HRESULT, InsertColumns) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertFormula) (THIS_ VARIANT* Formula, VARIANT* NumberFormat) PURE; 
	STDMETHOD_(HRESULT, NextRevision) (THIS_ VARIANT* Wrap, Revision** prop) PURE; 
	STDMETHOD_(HRESULT, PreviousRevision) (THIS_ VARIANT* Wrap, Revision** prop) PURE; 
	STDMETHOD_(HRESULT, PasteAsNestedTable) (THIS ) PURE; 
	STDMETHOD_(HRESULT, CreateAutoTextEntry) (THIS_ BSTR Name, BSTR StyleName, AutoTextEntry** prop) PURE; 
	STDMETHOD_(HRESULT, DetectLanguage) (THIS ) PURE;
	STDMETHOD_(HRESULT, SelectCell) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertRowsBelow) (THIS_ VARIANT* NumRows) PURE; 
	STDMETHOD_(HRESULT, InsertColumnsRight) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertRowsAbove) (THIS_ VARIANT* NumRows) PURE; 
	STDMETHOD_(HRESULT, RtlRun) (THIS ) PURE; 
	STDMETHOD_(HRESULT, LtrRun) (THIS ) PURE; 
	STDMETHOD_(HRESULT, BoldRun) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ItalicRun) (THIS ) PURE; 
	STDMETHOD_(HRESULT, RtlPara) (THIS ) PURE; 
	STDMETHOD_(HRESULT, LtrPara) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertDateTime) (THIS_ VARIANT* DateTimeFormat, VARIANT* InsertAsField, VARIANT* InsertAsFullWidth, VARIANT* DateLanguage, VARIANT* CalendarType) PURE; 
	STDMETHOD_(HRESULT, Sort2000) (THIS_ VARIANT* ExcludeHeader, VARIANT* FieldNumber, VARIANT* SortFieldType, VARIANT* SortOrder, VARIANT* FieldNumber2, VARIANT* SortFieldType2, VARIANT* SortOrder2, VARIANT* FieldNumber3, VARIANT* SortFieldType3, VARIANT* SortOrder3, VARIANT* SortColumn, VARIANT* Separator, VARIANT* CaseSensitive, VARIANT* BidiSort, VARIANT* IgnoreThe, VARIANT* IgnoreKashida, VARIANT* IgnoreDiacritics, VARIANT* IgnoreHe, VARIANT* LanguageID) PURE; 
	STDMETHOD_(HRESULT, ConvertToTable) (THIS_ VARIANT* Separator, VARIANT* NumRows, VARIANT* NumColumns, VARIANT* InitialColumnWidth, VARIANT* Format, VARIANT* ApplyBorders, VARIANT* ApplyShading, VARIANT* ApplyFont, VARIANT* ApplyColor, VARIANT* ApplyHeadingRows, VARIANT* ApplyLastRow, VARIANT* ApplyFirstColumn, VARIANT* ApplyLastColumn, VARIANT* AutoFit, VARIANT* AutoFitBehavior, VARIANT* DefaultTableBehavior, Table** prop) PURE; 
	STDMETHOD_(HRESULT, Get_NoProofing) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_NoProofing) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_TopLevelTables) (THIS_ Tables** prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageDetected) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageDetected) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_FitTextWidth) (THIS_ float* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FitTextWidth) (THIS_ float prop) PURE; 
	STDMETHOD_(HRESULT, ClearFormatting) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PasteAppendTable) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Get_HTMLDivisions) (THIS_ HTMLDivisions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_SmartTags) (THIS_ SmartTags** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ChildShapeRange) (THIS_ ShapeRange** prop) PURE; 
	STDMETHOD_(HRESULT, Get_HasChildShapeRange) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_FootnoteOptions) (THIS_ FootnoteOptions** prop) PURE;
	STDMETHOD_(HRESULT, Get_EndnoteOptions) (THIS_ EndnoteOptions** prop) PURE; 
	STDMETHOD_(HRESULT, ToggleCharacterCode) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PasteAndFormat) (THIS_ WdRecoveryType Type) PURE; 
	STDMETHOD_(HRESULT, PasteExcelTable) (THIS_ VARIANT_BOOL LinkedToExcel, VARIANT_BOOL WordFormatting, VARIANT_BOOL RTF) PURE; 
	STDMETHOD_(HRESULT, ShrinkDiscontiguousSelection) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertStyleSeparator) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Sort) (THIS_ VARIANT* ExcludeHeader, VARIANT* FieldNumber, VARIANT* SortFieldType, VARIANT* SortOrder, VARIANT* FieldNumber2, VARIANT* SortFieldType2, VARIANT* SortOrder2, VARIANT* FieldNumber3, VARIANT* SortFieldType3, VARIANT* SortOrder3, VARIANT* SortColumn, VARIANT* Separator, VARIANT* CaseSensitive, VARIANT* BidiSort, VARIANT* IgnoreThe, VARIANT* IgnoreKashida, VARIANT* IgnoreDiacritics, VARIANT* IgnoreHe, VARIANT* LanguageID, VARIANT* SubFieldNumber, VARIANT* SubFieldNumber2, VARIANT* SubFieldNumber3) PURE; 
	STDMETHOD_(HRESULT, Get_XMLNodes) (THIS_ XMLNodes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLParentNode) (THIS_ XMLNode** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Editors) (THIS_ Editors** prop) PURE; 
	STDMETHOD_(HRESULT, Get_XML) (THIS_ VARIANT_BOOL DataOnly, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_EnhMetaFileBits) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, GoToEditableRange) (THIS_ VARIANT* EditorID, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, InsertXML) (THIS_ BSTR XML, VARIANT* Transform) PURE;
	STDMETHOD_(HRESULT, InsertCaption) (THIS_ VARIANT* Label, VARIANT* Title, VARIANT* TitleAutoText, VARIANT* Position, VARIANT* ExcludeLabel) PURE;
	STDMETHOD_(HRESULT, InsertCrossReference) (THIS_ VARIANT* ReferenceType, WdReferenceKind ReferenceKind, VARIANT* ReferenceItem, VARIANT* InsertAsHyperlink, VARIANT* IncludePosition, VARIANT* SeparateNumbers, VARIANT* SeparatorString) PURE;
};
typedef Selection* LPELECTION;
#ifdef __cplusplus
// Selection  {00020975-0000-0000-C000-000000000046}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TSelectionProxy : public __OCF TAutoProxy
{
public:
	TSelectionProxy() : TAutoProxy(0x0) {}

	// Text:   [dispid 0]
	__OCF TAutoString Text();

	// Text:   [dispid 0]
	void Text(__OCF TAutoString arg0);

	// FormattedText:   [dispid 2]
	void FormattedText(TRangeProxy& Obj);

	// FormattedText:   [dispid 2]
	void FormattedText(WordRange* arg0);

	// Start:   [dispid 3]
	long Start();

	// Start:   [dispid 3]
	void Start(long arg0);

	// End:   [dispid 4]
	long End();

	// End:   [dispid 4]
	void End(long arg0);

	// _Font:   [dispid 5]
	Font* _Font();

	// _Font:   [dispid 5]
	void _Font(Font* arg0);

	// Type:   [dispid 6]
	WdSelectionType Type();

	// StoryType:   [dispid 7]
	WdStoryType StoryType();

	// _Style:   [dispid 8]
	__OCF TAutoVal _Style();

	// _Style:   [dispid 8]
	void _Style(__OCF TAutoVal* arg0);

	// _Tables:   [dispid 50]
	void _Tables(TTablesProxy& Obj);

	// _Words:   [dispid 51]
	void _Words(TWordsProxy& Obj);

	// _Sentences:   [dispid 52]
	void _Sentences(TSentencesProxy& Obj);

	// _Characters:   [dispid 53]
	void _Characters(TCharactersProxy& Obj);

	// _Footnotes:   [dispid 54]
	void _Footnotes(TFootnotesProxy& Obj);

	// _Endnotes:   [dispid 55]
	void _Endnotes(TEndnotesProxy& Obj);

	// _Comments:   [dispid 56]
	void _Comments(TCommentsProxy& Obj);

	// _Cells:   [dispid 57]
	void _Cells(TCellsProxy& Obj);

	// _Sections:   [dispid 58]
	void _Sections(TSectionsProxy& Obj);

	// _Paragraphs:   [dispid 59]
	void _Paragraphs(TParagraphsProxy& Obj);

	// _Borders:   [dispid 1100]
	void _Borders(TBordersProxy& Obj);

	// _Borders:   [dispid 1100]
	void _Borders(Borders* arg0);

	// _Shading:   [dispid 61]
	void _Shading(TShadingProxy& Obj);

	// _Fields:   [dispid 64]
	void _Fields(TFieldsProxy& Obj);

	// _FormFields:   [dispid 65]
	void _FormFields(TFormFieldsProxy& Obj);

	// _Frames:   [dispid 66]
	void _Frames(TFramesProxy& Obj);

	// _ParagraphFormat:   [dispid 1102]
	ParagraphFormat* _ParagraphFormat();

	// _ParagraphFormat:   [dispid 1102]
	void _ParagraphFormat(ParagraphFormat* arg0);

	// _PageSetup:   [dispid 1101]
	void _PageSetup(TPageSetupProxy& Obj);

	// _PageSetup:   [dispid 1101]
	void _PageSetup(PageSetup* arg0);

	// _Bookmarks:   [dispid 75]
	void _Bookmarks(TBookmarksProxy& Obj);

	// StoryLength:   [dispid 152]
	long StoryLength();

	// LanguageID:   [dispid 153]
	WdLanguageID LanguageID();

	// LanguageID:   [dispid 153]
	void LanguageID(WdLanguageID arg0);

	// LanguageIDFarEast:   [dispid 154]
	WdLanguageID LanguageIDFarEast();

	// LanguageIDFarEast:   [dispid 154]
	void LanguageIDFarEast(WdLanguageID arg0);

	// LanguageIDOther:   [dispid 155]
	WdLanguageID LanguageIDOther();

	// LanguageIDOther:   [dispid 155]
	void LanguageIDOther(WdLanguageID arg0);

	// _Hyperlinks:   [dispid 156]
	void _Hyperlinks(THyperlinksProxy& Obj);

	// _Columns:   [dispid 302]
	void _Columns(TColumnsProxy& Obj);

	// _Rows:   [dispid 303]
	void _Rows(TRowsProxy& Obj);

	// _HeaderFooter:   [dispid 306]
	void _HeaderFooter(THeaderFooterProxy& Obj);

	// IsEndOfRowMark:   [dispid 307]
	/*__OWL*/ TBool IsEndOfRowMark();

	// BookmarkID:   [dispid 308]
	long BookmarkID();

	// PreviousBookmarkID:   [dispid 309]
	long PreviousBookmarkID();

	// _Find:   [dispid 262]
	void _Find(TFindProxy& Obj);

	// _Range:   [dispid 400]
	void _Range(TRangeProxy& Obj);

	// Information:   [dispid 401]
	__OCF TAutoVal Information(WdInformation Type);

	// Flags:   [dispid 402]
	WdSelectionFlags Flags();

	// Flags:   [dispid 402]
	void Flags(WdSelectionFlags arg0);

	// Active:   [dispid 403]
	/*__OWL*/ TBool Active();

	// StartIsActive:   [dispid 404]
	/*__OWL*/ TBool StartIsActive();

	// StartIsActive:   [dispid 404]
	void StartIsActive(/*__OWL*/ TBool arg0);

	// IPAtEndOfLine:   [dispid 405]
	/*__OWL*/ TBool IPAtEndOfLine();

	// ExtendMode:   [dispid 406]
	/*__OWL*/ TBool ExtendMode();

	// ExtendMode:   [dispid 406]
	void ExtendMode(/*__OWL*/ TBool arg0);

	// ColumnSelectMode:   [dispid 407]
	/*__OWL*/ TBool ColumnSelectMode();

	// ColumnSelectMode:   [dispid 407]
	void ColumnSelectMode(/*__OWL*/ TBool arg0);

	// Orientation:   [dispid 410]
	WdTextOrientation Orientation();

	// Orientation:   [dispid 410]
	void Orientation(WdTextOrientation arg0);

	// _InlineShapes:   [dispid 411]
	void _InlineShapes(TInlineShapesProxy& Obj);

	// _Application:   [dispid 1000]
	WordApplication* _Application();

	// Creator:   [dispid 1001]
	long Creator();

	// Parent:   [dispid 1002]
	IDispatch* Parent();

	// _Document:   [dispid 1003]
	WordDocument* _Document();

	// _ShapeRange:   [dispid 1004]
	void _ShapeRange(TShapeRangeProxy& Obj);

	// Select:   [dispid 65535]
	void Select();

	// SetRange:   [dispid 100]
	void SetRange(long Start, long End);

	// Collapse:   [dispid 101]
	void Collapse(__OCF TAutoVal* Direction = 0);

	// InsertBefore:   [dispid 102]
	void InsertBefore(__OCF TAutoString Text);

	// InsertAfter:   [dispid 104]
	void InsertAfter(__OCF TAutoString Text);

	// Next:   [dispid 105]
	void Next(TRangeProxy& Obj, __OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// Previous:   [dispid 106]
	void Previous(TRangeProxy& Obj, __OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// StartOf:   [dispid 107]
	long StartOf(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Extend = 0);

	// EndOf:   [dispid 108]
	long EndOf(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Extend = 0);

	// Move:   [dispid 109]
	long Move(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// MoveStart:   [dispid 110]
	long MoveStart(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// MoveEnd:   [dispid 111]
	long MoveEnd(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// MoveWhile:   [dispid 112]
	long MoveWhile(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveStartWhile:   [dispid 113]
	long MoveStartWhile(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveEndWhile:   [dispid 114]
	long MoveEndWhile(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveUntil:   [dispid 115]
	long MoveUntil(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveStartUntil:   [dispid 116]
	long MoveStartUntil(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveEndUntil:   [dispid 117]
	long MoveEndUntil(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// Cut:   [dispid 119]
	void Cut();

	// Copy:   [dispid 120]
	void Copy();

	// Paste:   [dispid 121]
	void Paste();

	// InsertBreak:   [dispid 122]
	void InsertBreak(__OCF TAutoVal* Type = 0);

	// InsertFile:   [dispid 123]
	void InsertFile(__OCF TAutoString FileName, __OCF TAutoVal* arg1 = 0, __OCF TAutoVal* ConfirmConversions = 0, __OCF TAutoVal* Link = 0, __OCF TAutoVal* Attachment = 0);

	// InStory:   [dispid 125]
	/*__OWL*/ TBool InStory(WordRange* arg0);

	// InRange:   [dispid 126]
	/*__OWL*/ TBool InRange(WordRange* arg0);

	// Delete:   [dispid 127]
	long Delete(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// Expand:   [dispid 129]
	long Expand(__OCF TAutoVal* Unit = 0);

	// InsertParagraph:   [dispid 160]
	void InsertParagraph();

	// InsertParagraphAfter:   [dispid 161]
	void InsertParagraphAfter();

	// ConvertToTableOld:   [dispid 162]
	void ConvertToTableOld(TTableProxy& Obj, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* NumRows = 0, __OCF TAutoVal* NumColumns = 0, __OCF TAutoVal* InitialColumnWidth = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* ApplyBorders = 0, __OCF TAutoVal* ApplyShading = 0, __OCF TAutoVal* ApplyFont = 0, __OCF TAutoVal* ApplyColor = 0, __OCF TAutoVal* ApplyHeadingRows = 0, __OCF TAutoVal* ApplyLastRow = 0, __OCF TAutoVal* ApplyFirstColumn = 0, __OCF TAutoVal* ApplyLastColumn = 0, __OCF TAutoVal* AutoFit = 0);

	// InsertDateTimeOld:   [dispid 163]
	void InsertDateTimeOld(__OCF TAutoVal* DateTimeFormat = 0, __OCF TAutoVal* InsertAsField = 0, __OCF TAutoVal* InsertAsFullWidth = 0);

	// InsertSymbol:   [dispid 164]
	void InsertSymbol(long CharacterNumber, __OCF TAutoVal* arg1 = 0, __OCF TAutoVal* Unicode = 0, __OCF TAutoVal* Bias = 0);

	// InsertCrossReference_2002:   [dispid 165]
	void InsertCrossReference_2002(__OCF TAutoVal* ReferenceType, WdReferenceKind ReferenceKind, __OCF TAutoVal* ReferenceItem, __OCF TAutoVal* InsertAsHyperlink = 0, __OCF TAutoVal* IncludePosition = 0);

	// InsertCaptionXP:   [dispid 166]
	void InsertCaptionXP(__OCF TAutoVal* Label, __OCF TAutoVal* Title = 0, __OCF TAutoVal* TitleAutoText = 0, __OCF TAutoVal* Position = 0);

	// CopyAsPicture:   [dispid 167]
	void CopyAsPicture();

	// SortOld:   [dispid 168]
	void SortOld(__OCF TAutoVal* ExcludeHeader = 0, __OCF TAutoVal* FieldNumber = 0, __OCF TAutoVal* SortFieldType = 0, __OCF TAutoVal* SortOrder = 0, __OCF TAutoVal* FieldNumber2 = 0, __OCF TAutoVal* SortFieldType2 = 0, __OCF TAutoVal* SortOrder2 = 0, __OCF TAutoVal* FieldNumber3 = 0, __OCF TAutoVal* SortFieldType3 = 0, __OCF TAutoVal* SortOrder3 = 0, __OCF TAutoVal* SortColumn = 0, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* CaseSensitive = 0, __OCF TAutoVal* LanguageID = 0);

	// SortAscending:   [dispid 169]
	void SortAscending();

	// SortDescending:   [dispid 170]
	void SortDescending();

	// IsEqual:   [dispid 171]
	/*__OWL*/ TBool IsEqual(WordRange* arg0);

	// Calculate:   [dispid 172]
	float Calculate();

	// GoTo:   [dispid 173]
	void GoTo(TRangeProxy& Obj, __OCF TAutoVal* What = 0, __OCF TAutoVal* Which = 0, __OCF TAutoVal* Count = 0, __OCF TAutoVal* Name = 0);

	// GoToNext:   [dispid 174]
	void GoToNext(TRangeProxy& Obj, WdGoToItem What);

	// GoToPrevious:   [dispid 175]
	void GoToPrevious(TRangeProxy& Obj, WdGoToItem What);

	// PasteSpecial:   [dispid 176]
	void PasteSpecial(__OCF TAutoVal* IconIndex = 0, __OCF TAutoVal* Link = 0, __OCF TAutoVal* Placement = 0, __OCF TAutoVal* DisplayAsIcon = 0, __OCF TAutoVal* DataType = 0, __OCF TAutoVal* IconFileName = 0, __OCF TAutoVal* IconLabel = 0);

	// PreviousField:   [dispid 177]
	void PreviousField(TFieldProxy& Obj);

	// NextField:   [dispid 178]
	void NextField(TFieldProxy& Obj);

	// InsertParagraphBefore:   [dispid 212]
	void InsertParagraphBefore();

	// InsertCells:   [dispid 214]
	void InsertCells(__OCF TAutoVal* ShiftCells = 0);

	// Extend:   [dispid 300]
	void Extend(__OCF TAutoVal* Character = 0);

	// Shrink:   [dispid 301]
	void Shrink();

	// MoveLeft:   [dispid 500]
	long MoveLeft(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0, __OCF TAutoVal* Extend = 0);

	// MoveRight:   [dispid 501]
	long MoveRight(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0, __OCF TAutoVal* Extend = 0);

	// MoveUp:   [dispid 502]
	long MoveUp(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0, __OCF TAutoVal* Extend = 0);

	// MoveDown:   [dispid 503]
	long MoveDown(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0, __OCF TAutoVal* Extend = 0);

	// HomeKey:   [dispid 504]
	long HomeKey(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Extend = 0);

	// EndKey:   [dispid 505]
	long EndKey(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Extend = 0);

	// EscapeKey:   [dispid 506]
	void EscapeKey();

	// TypeText:   [dispid 507]
	void TypeText(__OCF TAutoString Text);

	// CopyFormat:   [dispid 509]
	void CopyFormat();

	// PasteFormat:   [dispid 510]
	void PasteFormat();

	// TypeParagraph:   [dispid 512]
	void TypeParagraph();

	// TypeBackspace:   [dispid 513]
	void TypeBackspace();

	// NextSubdocument:   [dispid 514]
	void NextSubdocument();

	// PreviousSubdocument:   [dispid 515]
	void PreviousSubdocument();

	// SelectColumn:   [dispid 516]
	void SelectColumn();

	// SelectCurrentFont:   [dispid 517]
	void SelectCurrentFont();

	// SelectCurrentAlignment:   [dispid 518]
	void SelectCurrentAlignment();

	// SelectCurrentSpacing:   [dispid 519]
	void SelectCurrentSpacing();

	// SelectCurrentIndent:   [dispid 520]
	void SelectCurrentIndent();

	// SelectCurrentTabs:   [dispid 521]
	void SelectCurrentTabs();

	// SelectCurrentColor:   [dispid 522]
	void SelectCurrentColor();

	// CreateTextbox:   [dispid 523]
	void CreateTextbox();

	// WholeStory:   [dispid 524]
	void WholeStory();

	// SelectRow:   [dispid 525]
	void SelectRow();

	// SplitTable:   [dispid 526]
	void SplitTable();

	// InsertRows:   [dispid 528]
	void InsertRows(__OCF TAutoVal* NumRows = 0);

	// InsertColumns:   [dispid 529]
	void InsertColumns();

	// InsertFormula:   [dispid 530]
	void InsertFormula(__OCF TAutoVal* Formula = 0, __OCF TAutoVal* NumberFormat = 0);

	// NextRevision:   [dispid 531]
	void NextRevision(TRevisionProxy& Obj, __OCF TAutoVal* Wrap = 0);

	// PreviousRevision:   [dispid 532]
	void PreviousRevision(TRevisionProxy& Obj, __OCF TAutoVal* Wrap = 0);

	// PasteAsNestedTable:   [dispid 533]
	void PasteAsNestedTable();

	// CreateAutoTextEntry:   [dispid 534]
	void CreateAutoTextEntry(TAutoTextEntryProxy& Obj, __OCF TAutoString Name, __OCF TAutoString StyleName);

	// DetectLanguage:   [dispid 535]
	void DetectLanguage();

	// SelectCell:   [dispid 536]
	void SelectCell();

	// InsertRowsBelow:   [dispid 537]
	void InsertRowsBelow(__OCF TAutoVal* NumRows = 0);

	// InsertColumnsRight:   [dispid 538]
	void InsertColumnsRight();

	// InsertRowsAbove:   [dispid 539]
	void InsertRowsAbove(__OCF TAutoVal* NumRows = 0);

	// RtlRun:   [dispid 600]
	void RtlRun();

	// LtrRun:   [dispid 601]
	void LtrRun();

	// BoldRun:   [dispid 602]
	void BoldRun();

	// ItalicRun:   [dispid 603]
	void ItalicRun();

	// RtlPara:   [dispid 605]
	void RtlPara();

	// LtrPara:   [dispid 606]
	void LtrPara();

	// InsertDateTime:   [dispid 444]
	void InsertDateTime(__OCF TAutoVal* DateTimeFormat = 0, __OCF TAutoVal* InsertAsField = 0, __OCF TAutoVal* InsertAsFullWidth = 0, __OCF TAutoVal* DateLanguage = 0, __OCF TAutoVal* CalendarType = 0);

	// Sort2000:   [dispid 445]
	void Sort2000(__OCF TAutoVal* ExcludeHeader = 0, __OCF TAutoVal* FieldNumber = 0, __OCF TAutoVal* SortFieldType = 0, __OCF TAutoVal* SortOrder = 0, __OCF TAutoVal* FieldNumber2 = 0, __OCF TAutoVal* SortFieldType2 = 0, __OCF TAutoVal* SortOrder2 = 0, __OCF TAutoVal* FieldNumber3 = 0, __OCF TAutoVal* SortFieldType3 = 0, __OCF TAutoVal* SortOrder3 = 0, __OCF TAutoVal* SortColumn = 0, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* CaseSensitive = 0, __OCF TAutoVal* BidiSort = 0, __OCF TAutoVal* IgnoreThe = 0, __OCF TAutoVal* IgnoreKashida = 0, __OCF TAutoVal* IgnoreDiacritics = 0, __OCF TAutoVal* IgnoreHe = 0, __OCF TAutoVal* LanguageID = 0);

	// ConvertToTable:   [dispid 457]
	void ConvertToTable(TTableProxy& Obj, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* NumRows = 0, __OCF TAutoVal* NumColumns = 0, __OCF TAutoVal* InitialColumnWidth = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* ApplyBorders = 0, __OCF TAutoVal* ApplyShading = 0, __OCF TAutoVal* ApplyFont = 0, __OCF TAutoVal* ApplyColor = 0, __OCF TAutoVal* ApplyHeadingRows = 0, __OCF TAutoVal* ApplyLastRow = 0, __OCF TAutoVal* ApplyFirstColumn = 0, __OCF TAutoVal* ApplyLastColumn = 0, __OCF TAutoVal* AutoFit = 0, __OCF TAutoVal* AutoFitBehavior = 0, __OCF TAutoVal* DefaultTableBehavior = 0);

	// NoProofing:   [dispid 1005]
	long NoProofing();

	// NoProofing:   [dispid 1005]
	void NoProofing(long arg0);

	// TopLevelTables:   [dispid 1006]
	void TopLevelTables(TTablesProxy& Obj);

	// LanguageDetected:   [dispid 1007]
	/*__OWL*/ TBool LanguageDetected();

	// LanguageDetected:   [dispid 1007]
	void LanguageDetected(/*__OWL*/ TBool arg0);

	// FitTextWidth:   [dispid 1008]
	float FitTextWidth();

	// FitTextWidth:   [dispid 1008]
	void FitTextWidth(float arg0);

	// ClearFormatting:   [dispid 1009]
	void ClearFormatting();

	// PasteAppendTable:   [dispid 1010]
	void PasteAppendTable();

	// _HTMLDivisions:   [dispid 1011]
	void _HTMLDivisions(THTMLDivisionsProxy& Obj);

	// _SmartTags:   [dispid 1015]
	void _SmartTags(TSmartTagsProxy& Obj);

	// ChildShapeRange:   [dispid 1021]
	void ChildShapeRange(TShapeRangeProxy& Obj);

	// HasChildShapeRange:   [dispid 1022]
	/*__OWL*/ TBool HasChildShapeRange();

	// _FootnoteOptions:   [dispid 1024]
	void _FootnoteOptions(TFootnoteOptionsProxy& Obj);

	// _EndnoteOptions:   [dispid 1025]
	void _EndnoteOptions(TEndnoteOptionsProxy& Obj);

	// ToggleCharacterCode:   [dispid 1012]
	void ToggleCharacterCode();

	// PasteAndFormat:   [dispid 1013]
	void PasteAndFormat(WdRecoveryType Type);

	// PasteExcelTable:   [dispid 1014]
	void PasteExcelTable(/*__OWL*/ TBool LinkedToExcel, /*__OWL*/ TBool WordFormatting, /*__OWL*/ TBool RTF);

	// ShrinkDiscontiguousSelection:   [dispid 1019]
	void ShrinkDiscontiguousSelection();

	// InsertStyleSeparator:   [dispid 1020]
	void InsertStyleSeparator();

	// Sort:   [dispid 1023]
	void Sort(__OCF TAutoVal* ExcludeHeader = 0, __OCF TAutoVal* FieldNumber = 0, __OCF TAutoVal* SortFieldType = 0, __OCF TAutoVal* SortOrder = 0, __OCF TAutoVal* FieldNumber2 = 0, __OCF TAutoVal* SortFieldType2 = 0, __OCF TAutoVal* SortOrder2 = 0, __OCF TAutoVal* FieldNumber3 = 0, __OCF TAutoVal* SortFieldType3 = 0, __OCF TAutoVal* SortOrder3 = 0, __OCF TAutoVal* SortColumn = 0, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* CaseSensitive = 0, __OCF TAutoVal* BidiSort = 0, __OCF TAutoVal* IgnoreThe = 0, __OCF TAutoVal* IgnoreKashida = 0, __OCF TAutoVal* IgnoreDiacritics = 0, __OCF TAutoVal* IgnoreHe = 0, __OCF TAutoVal* LanguageID = 0, __OCF TAutoVal* SubFieldNumber = 0, __OCF TAutoVal* SubFieldNumber2 = 0, __OCF TAutoVal* SubFieldNumber3 = 0);

	// _XMLNodes:   [dispid 310]
	void _XMLNodes(TXMLNodesProxy& Obj);

	// XMLParentNode:   [dispid 311]
	void XMLParentNode(TXMLNodeProxy& Obj);

	// _Editors:   [dispid 313]
	void _Editors(TEditorsProxy& Obj);

	// XML:   [dispid 314]
	__OCF TAutoString XML(/*__OWL*/ TBool DataOnly);

	// EnhMetaFileBits:   [dispid 315]
	__OCF TAutoVal EnhMetaFileBits();

	// GoToEditableRange:   [dispid 1027]
	void GoToEditableRange(TRangeProxy& Obj, __OCF TAutoVal* EditorID = 0);

	// InsertXML:   [dispid 1028]
	void InsertXML(__OCF TAutoString XML, __OCF TAutoVal* Transform = 0);

	// InsertCaption:   [dispid 417]
	void InsertCaption(__OCF TAutoVal* Label, __OCF TAutoVal* Title = 0, __OCF TAutoVal* TitleAutoText = 0, __OCF TAutoVal* Position = 0, __OCF TAutoVal* ExcludeLabel = 0);

	// InsertCrossReference:   [dispid 418]
	void InsertCrossReference(__OCF TAutoVal* ReferenceType, WdReferenceKind ReferenceKind, __OCF TAutoVal* ReferenceItem, __OCF TAutoVal* InsertAsHyperlink = 0, __OCF TAutoVal* IncludePosition = 0, __OCF TAutoVal* SeparateNumbers = 0, __OCF TAutoVal* SeparatorString = 0);
};
#endif

// WdUnderline
typedef enum tagWdUnderline
{
	wdUnderlineNone = 0, 
	wdUnderlineSingle = 1, 
	wdUnderlineWords = 2,
	wdUnderlineDouble = 3, 
	wdUnderlineDotted = 4, 
	wdUnderlineThick = 6, 
	wdUnderlineDash = 7, 
	wdUnderlineDotDash = 9, 
	wdUnderlineDotDotDash = 10, 
	wdUnderlineWavy = 11, 
	wdUnderlineWavyHeavy = 27, 
	wdUnderlineDottedHeavy = 20, 
	wdUnderlineDashHeavy = 23, 
	wdUnderlineDotDashHeavy = 25, 
	wdUnderlineDotDotDashHeavy = 26, 
	wdUnderlineDashLong = 39, 
	wdUnderlineDashLongHeavy = 55, 
	wdUnderlineWavyDouble = 43, 
} WdUnderline;

// WdEmphasisMark
typedef enum tagWdEmphasisMark
{
	wdEmphasisMarkNone = 0, 
	wdEmphasisMarkOverSolidCircle = 1, 
	wdEmphasisMarkOverComma = 2, 
	wdEmphasisMarkOverWhiteCircle = 3, 
	wdEmphasisMarkUnderSolidCircle = 4, 
} WdEmphasisMark;

// WdColorIndex
typedef enum tagWdColorIndex
{
	wdAuto = 0, 
	wdBlack = 1, 
	wdBlue = 2, 
	wdTurquoise = 3, 
	wdBrightGreen = 4, 
	wdPink = 5, 
	wdRed = 6, 
	wdYellow = 7, 
	wdWhite = 8, 
	wdDarkBlue = 9, 
	wdTeal = 10, 
	wdGreen = 11, 
	wdViolet = 12, 
	wdDarkRed = 13, 
	wdDarkYellow = 14, 
	wdGray50 = 15, 
	wdGray25 = 16, 
	wdByAuthor = -1, 
	wdNoHighlight = 0, 
} WdColorIndex;

// WdCharacterCase
typedef enum tagWdCharacterCase
{
	wdNextCase = -1, 
	wdLowerCase = 0, 
	wdUpperCase = 1,
	wdTitleWord = 2, 
	wdTitleSentence = 4, 
	wdToggleCase = 5, 
	wdHalfWidth = 6, 
	wdFullWidth = 7, 
	wdKatakana = 8, 
	wdHiragana = 9,
} WdCharacterCase;

// WdPhoneticGuideAlignmentType
typedef enum tagWdPhoneticGuideAlignmentType
{
	wdPhoneticGuideAlignmentCenter = 0, 
	wdPhoneticGuideAlignmentZeroOneZero = 1,
	wdPhoneticGuideAlignmentOneTwoOne = 2, 
	wdPhoneticGuideAlignmentLeft = 3, 
	wdPhoneticGuideAlignmentRight = 4, 
	wdPhoneticGuideAlignmentRightVertical = 5, 
} WdPhoneticGuideAlignmentType;

// WdHorizontalInVerticalType
typedef enum tagWdHorizontalInVerticalType
{
	wdHorizontalInVerticalNone = 0, 
	wdHorizontalInVerticalFitInLine = 1, 
	wdHorizontalInVerticalResizeLine = 2, 
} WdHorizontalInVerticalType;

// WdTwoLinesInOneType
typedef enum tagWdTwoLinesInOneType
{
	wdTwoLinesInOneNone = 0, 
	wdTwoLinesInOneNoBrackets = 1,
	wdTwoLinesInOneParentheses = 2, 
	wdTwoLinesInOneSquareBrackets = 3, 
	wdTwoLinesInOneAngleBrackets = 4, 
	wdTwoLinesInOneCurlyBrackets = 5, 
} WdTwoLinesInOneType;

// WdCharacterWidth
typedef enum tagWdCharacterWidth
{
	wdWidthHalfWidth = 6,
	wdWidthFullWidth = 7,
} WdCharacterWidth;

// WdKana
typedef enum tagWdKana
{
	wdKanaKatakana = 8,
	wdKanaHiragana = 9,
} WdKana;

// WdTCSCConverterDirection
typedef enum tagWdTCSCConverterDirection
{
	wdTCSCConverterDirectionSCTC = 0, 
	wdTCSCConverterDirectionTCSC = 1, 
	wdTCSCConverterDirectionAuto = 2, 
} WdTCSCConverterDirection;

// WdGoToDirection
typedef enum tagWdGoToDirection
{
	wdGoToFirst = 1,
	wdGoToLast = -1,
	wdGoToNext = 2,
	wdGoToRelative = 2,
	wdGoToPrevious = 3,
	wdGoToAbsolute = 1,
} WdGoToDirection;

// WdUnits
typedef enum tagWdUnits
{
	wdCharacter = 1,
	wdWord = 2,
	wdSentence = 3,
	wdParagraph = 4,
	wdLine = 5,
	wdStory = 6,
	wdScreen = 7,
	wdSection = 8,
	wdColumn = 9,
	wdRow = 10,
	wdWindow = 11,
	wdCell = 12,
	wdCharacterFormatting = 13,
	wdParagraphFormatting = 14,
	wdTable = 15,
	wdItem = 16,
} WdUnits;

// Range
// {0002095E-0000-0000-C000-000000000046}
#undef INTERFACE
#define INTERFACE WordRange
DECLARE_INTERFACE_(WordRange, IDispatch)
{
#ifndef __cplusplus
	// IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	// IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	// Range methods:
	STDMETHOD_(HRESULT, Get_Text) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Text) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormattedText) (THIS_ WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, Set_FormattedText) (THIS_ WordRange* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Start) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Start) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_End) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_End) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_Font) (THIS_ Font** prop) PURE; 
	STDMETHOD_(HRESULT, Set_Font) (THIS_ Font* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Duplicate) (THIS_ WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, Get_StoryType) (THIS_ WdStoryType* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Tables) (THIS_ Tables** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Words) (THIS_ Words** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Sentences) (THIS_ Sentences** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Characters) (THIS_ Characters** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Footnotes) (THIS_ Footnotes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Endnotes) (THIS_ Endnotes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Comments) (THIS_ Comments** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Cells) (THIS_ Cells** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Sections) (THIS_ Sections** prop) PURE;
	STDMETHOD_(HRESULT, Get_Paragraphs) (THIS_ Paragraphs** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Borders) (THIS_ Borders** prop) PURE; 
	STDMETHOD_(HRESULT, Set_Borders) (THIS_ Borders* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Shading) (THIS_ Shading** prop) PURE; 
	STDMETHOD_(HRESULT, Get_TextRetrievalMode) (THIS_ TextRetrievalMode** prop) PURE; 
	STDMETHOD_(HRESULT, Set_TextRetrievalMode) (THIS_ TextRetrievalMode* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Fields) (THIS_ Fields** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FormFields) (THIS_ FormFields** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Frames) (THIS_ Frames** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ParagraphFormat) (THIS_ ParagraphFormat** prop) PURE; 
	STDMETHOD_(HRESULT, Set_ParagraphFormat) (THIS_ ParagraphFormat* prop) PURE; 
	STDMETHOD_(HRESULT, Get_ListFormat) (THIS_ ListFormat** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Bookmarks) (THIS_ Bookmarks** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Application) (THIS_ WordApplication** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Creator) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Bold) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Bold) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_Italic) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Italic) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_Underline) (THIS_ WdUnderline* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Underline) (THIS_ WdUnderline prop) PURE; 
	STDMETHOD_(HRESULT, Get_EmphasisMark) (THIS_ WdEmphasisMark* prop) PURE; 
	STDMETHOD_(HRESULT, Set_EmphasisMark) (THIS_ WdEmphasisMark prop) PURE; 
	STDMETHOD_(HRESULT, Get_DisableCharacterSpaceGrid) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_DisableCharacterSpaceGrid) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Revisions) (THIS_ Revisions** prop) PURE;
	STDMETHOD_(HRESULT, Get_Style) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Style) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_StoryLength) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageID) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageID) (THIS_ WdLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Get_SynonymInfo) (THIS_ SynonymInfo** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Hyperlinks) (THIS_ Hyperlinks** prop) PURE; 
	STDMETHOD_(HRESULT, Get_ListParagraphs) (THIS_ ListParagraphs** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Subdocuments) (THIS_ Subdocuments** prop) PURE; 
	STDMETHOD_(HRESULT, Get_GrammarChecked) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_GrammarChecked) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_SpellingChecked) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_SpellingChecked) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_HighlightColorIndex) (THIS_ WdColorIndex* prop) PURE; 
	STDMETHOD_(HRESULT, Set_HighlightColorIndex) (THIS_ WdColorIndex prop) PURE; 
	STDMETHOD_(HRESULT, Get_Columns) (THIS_ Columns** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Rows) (THIS_ Rows** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CanEdit) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_CanPaste) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_IsEndOfRowMark) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_BookmarkID) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_PreviousBookmarkID) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Find) (THIS_ Find** prop) PURE; 
	STDMETHOD_(HRESULT, Get_PageSetup) (THIS_ PageSetup** prop) PURE; 
	STDMETHOD_(HRESULT, Set_PageSetup) (THIS_ PageSetup* prop) PURE; 
	STDMETHOD_(HRESULT, Get_ShapeRange) (THIS_ ShapeRange** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Case) (THIS_ WdCharacterCase* prop) PURE;
	STDMETHOD_(HRESULT, Set_Case) (THIS_ WdCharacterCase prop) PURE; 
	STDMETHOD_(HRESULT, Get_Information) (THIS_ WdInformation Type, VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_ReadabilityStatistics) (THIS_ ReadabilityStatistics** prop) PURE; 
	STDMETHOD_(HRESULT, Get_GrammaticalErrors) (THIS_ ProofreadingErrors** prop) PURE; 
	STDMETHOD_(HRESULT, Get_SpellingErrors) (THIS_ ProofreadingErrors** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Orientation) (THIS_ WdTextOrientation* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Orientation) (THIS_ WdTextOrientation prop) PURE; 
	STDMETHOD_(HRESULT, Get_InlineShapes) (THIS_ InlineShapes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_NextStoryRange) (THIS_ WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageIDFarEast) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageIDFarEast) (THIS_ WdLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageIDOther) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageIDOther) (THIS_ WdLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Select) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SetRange) (THIS_ long Start, long End) PURE; 
	STDMETHOD_(HRESULT, Collapse) (THIS_ VARIANT* Direction) PURE; 
	STDMETHOD_(HRESULT, InsertBefore) (THIS_ BSTR Text) PURE; 
	STDMETHOD_(HRESULT, InsertAfter) (THIS_ BSTR Text) PURE; 
	STDMETHOD_(HRESULT, Next) (THIS_ VARIANT* Unit, VARIANT* Count, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, Previous) (THIS_ VARIANT* Unit, VARIANT* Count, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, StartOf) (THIS_ VARIANT* Unit, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, EndOf) (THIS_ VARIANT* Unit, VARIANT* Extend, long* prop) PURE; 
	STDMETHOD_(HRESULT, Move) (THIS_ VARIANT* Unit, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveStart) (THIS_ VARIANT* Unit, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveEnd) (THIS_ VARIANT* Unit, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveWhile) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveStartWhile) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE;
	STDMETHOD_(HRESULT, MoveEndWhile) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveUntil) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveStartUntil) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, MoveEndUntil) (THIS_ VARIANT* Cset, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, Cut) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Copy) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Paste) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertBreak) (THIS_ VARIANT* Type) PURE; 
	STDMETHOD_(HRESULT, InsertFile) (THIS_ BSTR FileName, VARIANT* , VARIANT* ConfirmConversions, VARIANT* Link, VARIANT* Attachment) PURE; 
	STDMETHOD_(HRESULT, InStory) (THIS_ WordRange* , VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, InRange) (THIS_ WordRange* , VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Delete) (THIS_ VARIANT* Unit, VARIANT* Count, long* prop) PURE; 
	STDMETHOD_(HRESULT, WholeStory) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Expand) (THIS_ VARIANT* Unit, long* prop) PURE; 
	STDMETHOD_(HRESULT, InsertParagraph) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertParagraphAfter) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ConvertToTableOld) (THIS_ VARIANT* Separator, VARIANT* NumRows, VARIANT* NumColumns, VARIANT* InitialColumnWidth, VARIANT* Format, VARIANT* ApplyBorders, VARIANT* ApplyShading, VARIANT* ApplyFont, VARIANT* ApplyColor, VARIANT* ApplyHeadingRows, VARIANT* ApplyLastRow, VARIANT* ApplyFirstColumn, VARIANT* ApplyLastColumn, VARIANT* AutoFit, Table** prop) PURE; 
	STDMETHOD_(HRESULT, InsertDateTimeOld) (THIS_ VARIANT* DateTimeFormat, VARIANT* InsertAsField, VARIANT* InsertAsFullWidth) PURE; 
	STDMETHOD_(HRESULT, InsertSymbol) (THIS_ long CharacterNumber, VARIANT* , VARIANT* Unicode, VARIANT* Bias) PURE; 
	STDMETHOD_(HRESULT, InsertCrossReference_2002) (THIS_ VARIANT* ReferenceType, WdReferenceKind ReferenceKind, VARIANT* ReferenceItem, VARIANT* InsertAsHyperlink, VARIANT* IncludePosition) PURE; 
	STDMETHOD_(HRESULT, InsertCaptionXP) (THIS_ VARIANT* Label, VARIANT* Title, VARIANT* TitleAutoText, VARIANT* Position) PURE; 
	STDMETHOD_(HRESULT, CopyAsPicture) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SortOld) (THIS_ VARIANT* ExcludeHeader, VARIANT* FieldNumber, VARIANT* SortFieldType, VARIANT* SortOrder, VARIANT* FieldNumber2, VARIANT* SortFieldType2, VARIANT* SortOrder2, VARIANT* FieldNumber3, VARIANT* SortFieldType3, VARIANT* SortOrder3, VARIANT* SortColumn, VARIANT* Separator, VARIANT* CaseSensitive, VARIANT* LanguageID) PURE; 
	STDMETHOD_(HRESULT, SortAscending) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SortDescending) (THIS ) PURE; 
	STDMETHOD_(HRESULT, IsEqual) (THIS_ WordRange* , VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Calculate) (THIS_ float* prop) PURE;
	STDMETHOD_(HRESULT, GoTo) (THIS_ VARIANT* What, VARIANT* Which, VARIANT* Count, VARIANT* Name, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, GoToNext) (THIS_ WdGoToItem What, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, GoToPrevious) (THIS_ WdGoToItem What, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, PasteSpecial) (THIS_ VARIANT* IconIndex, VARIANT* Link, VARIANT* Placement, VARIANT* DisplayAsIcon, VARIANT* DataType, VARIANT* IconFileName, VARIANT* IconLabel) PURE; 
	STDMETHOD_(HRESULT, LookupNameProperties) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ComputeStatistics) (THIS_ WdStatistic Statistic, long* prop) PURE; 
	STDMETHOD_(HRESULT, Relocate) (THIS_ long Direction) PURE; 
	STDMETHOD_(HRESULT, CheckSynonyms) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SubscribeTo) (THIS_ BSTR Edition, VARIANT* Format) PURE; 
	STDMETHOD_(HRESULT, CreatePublisher) (THIS_ VARIANT* Edition, VARIANT* ContainsPICT, VARIANT* ContainsRTF, VARIANT* ContainsText) PURE; 
	STDMETHOD_(HRESULT, InsertAutoText) (THIS ) PURE; 
	STDMETHOD_(HRESULT, InsertDatabase) (THIS_ VARIANT* Format, VARIANT* , VARIANT* LinkToSource, VARIANT* Connection, VARIANT* SQLStatement, VARIANT* SQLStatement1, VARIANT* PasswordDocument, VARIANT* PasswordTemplate, VARIANT* WritePasswordDocument, VARIANT* WritePasswordTemplate, VARIANT* DataSource, VARIANT* From, VARIANT* To, VARIANT* IncludeFields) PURE; 
	STDMETHOD_(HRESULT, AutoFormat) (THIS ) PURE; 
	STDMETHOD_(HRESULT, CheckGrammar) (THIS ) PURE; 
	STDMETHOD_(HRESULT, CheckSpelling) (THIS_ VARIANT* CustomDictionary, VARIANT* IgnoreUppercase, VARIANT* AlwaysSuggest, VARIANT* CustomDictionary2, VARIANT* CustomDictionary3, VARIANT* CustomDictionary4, VARIANT* CustomDictionary5, VARIANT* CustomDictionary6, VARIANT* CustomDictionary7, VARIANT* CustomDictionary8, VARIANT* CustomDictionary9, VARIANT* CustomDictionary10) PURE; 
	STDMETHOD_(HRESULT, GetSpellingSuggestions) (THIS_ VARIANT* CustomDictionary, VARIANT* IgnoreUppercase, VARIANT* MainDictionary, VARIANT* SuggestionMode, VARIANT* CustomDictionary2, VARIANT* CustomDictionary3, VARIANT* CustomDictionary4, VARIANT* CustomDictionary5, VARIANT* CustomDictionary6, VARIANT* CustomDictionary7, VARIANT* CustomDictionary8, VARIANT* CustomDictionary9, VARIANT* CustomDictionary10, SpellingSuggestions** prop) PURE; 
	STDMETHOD_(HRESULT, InsertParagraphBefore) (THIS ) PURE; 
	STDMETHOD_(HRESULT, NextSubdocument) (THIS ) PURE; 
	STDMETHOD_(HRESULT, PreviousSubdocument) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ConvertHangulAndHanja) (THIS_ VARIANT* ConversionsMode, VARIANT* FastConversion, VARIANT* CheckHangulEnding, VARIANT* EnableRecentOrdering, VARIANT* CustomDictionary) PURE; 
	STDMETHOD_(HRESULT, PasteAsNestedTable) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ModifyEnclosure) (THIS_ VARIANT* , VARIANT* Symbol, VARIANT* EnclosedText) PURE; 
	STDMETHOD_(HRESULT, PhoneticGuide) (THIS_ BSTR Text, WdPhoneticGuideAlignmentType Alignment, long Raise, long , BSTR ) PURE; 
	STDMETHOD_(HRESULT, InsertDateTime) (THIS_ VARIANT* DateTimeFormat, VARIANT* InsertAsField, VARIANT* InsertAsFullWidth, VARIANT* DateLanguage, VARIANT* CalendarType) PURE; 
	STDMETHOD_(HRESULT, Sort) (THIS_ VARIANT* ExcludeHeader, VARIANT* FieldNumber, VARIANT* SortFieldType, VARIANT* SortOrder, VARIANT* FieldNumber2, VARIANT* SortFieldType2, VARIANT* SortOrder2, VARIANT* FieldNumber3, VARIANT* SortFieldType3, VARIANT* SortOrder3, VARIANT* SortColumn, VARIANT* Separator, VARIANT* CaseSensitive, VARIANT* BidiSort, VARIANT* IgnoreThe, VARIANT* IgnoreKashida, VARIANT* IgnoreDiacritics, VARIANT* IgnoreHe, VARIANT* LanguageID) PURE; 
	STDMETHOD_(HRESULT, DetectLanguage) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ConvertToTable) (THIS_ VARIANT* Separator, VARIANT* NumRows, VARIANT* NumColumns, VARIANT* InitialColumnWidth, VARIANT* Format, VARIANT* ApplyBorders, VARIANT* ApplyShading, VARIANT* ApplyFont, VARIANT* ApplyColor, VARIANT* ApplyHeadingRows, VARIANT* ApplyLastRow, VARIANT* ApplyFirstColumn, VARIANT* ApplyLastColumn, VARIANT* AutoFit, VARIANT* AutoFitBehavior, VARIANT* DefaultTableBehavior, Table** prop) PURE;
	STDMETHOD_(HRESULT, TCSCConverter) (THIS_ WdTCSCConverterDirection , VARIANT_BOOL CommonTerms, VARIANT_BOOL UseVariants) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageDetected) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageDetected) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_FitTextWidth) (THIS_ float* prop) PURE; 
	STDMETHOD_(HRESULT, Set_FitTextWidth) (THIS_ float prop) PURE; 
	STDMETHOD_(HRESULT, Get_HorizontalInVertical) (THIS_ WdHorizontalInVerticalType* prop) PURE; 
	STDMETHOD_(HRESULT, Set_HorizontalInVertical) (THIS_ WdHorizontalInVerticalType prop) PURE; 
	STDMETHOD_(HRESULT, Get_TwoLinesInOne) (THIS_ WdTwoLinesInOneType* prop) PURE; 
	STDMETHOD_(HRESULT, Set_TwoLinesInOne) (THIS_ WdTwoLinesInOneType prop) PURE; 
	STDMETHOD_(HRESULT, Get_CombineCharacters) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_CombineCharacters) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_NoProofing) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_NoProofing) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_TopLevelTables) (THIS_ Tables** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Scripts) (THIS_ Scripts** prop) PURE; 
	STDMETHOD_(HRESULT, Get_CharacterWidth) (THIS_ WdCharacterWidth* prop) PURE; 
	STDMETHOD_(HRESULT, Set_CharacterWidth) (THIS_ WdCharacterWidth prop) PURE; 
	STDMETHOD_(HRESULT, Get_Kana) (THIS_ WdKana* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Kana) (THIS_ WdKana prop) PURE; 
	STDMETHOD_(HRESULT, Get_BoldBi) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_BoldBi) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_ItalicBi) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ItalicBi) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_ID) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ID) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_HTMLDivisions) (THIS_ HTMLDivisions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_SmartTags) (THIS_ SmartTags** prop) PURE;
	STDMETHOD_(HRESULT, Get_ShowAll) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_ShowAll) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Document) (THIS_ WordDocument** prop) PURE; 
	STDMETHOD_(HRESULT, Get_FootnoteOptions) (THIS_ FootnoteOptions** prop) PURE; 
	STDMETHOD_(HRESULT, Get_EndnoteOptions) (THIS_ EndnoteOptions** prop) PURE; 
	STDMETHOD_(HRESULT, PasteAndFormat) (THIS_ WdRecoveryType Type) PURE; 
	STDMETHOD_(HRESULT, PasteExcelTable) (THIS_ VARIANT_BOOL LinkedToExcel, VARIANT_BOOL WordFormatting, VARIANT_BOOL RTF) PURE; 
	STDMETHOD_(HRESULT, PasteAppendTable) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Get_XMLNodes) (THIS_ XMLNodes** prop) PURE; 
	STDMETHOD_(HRESULT, Get_XMLParentNode) (THIS_ XMLNode** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Editors) (THIS_ Editors** prop) PURE; 
	STDMETHOD_(HRESULT, Get_XML) (THIS_ VARIANT_BOOL DataOnly, BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Get_EnhMetaFileBits) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, GoToEditableRange) (THIS_ VARIANT* EditorID, WordRange** prop) PURE; 
	STDMETHOD_(HRESULT, InsertXML) (THIS_ BSTR XML, VARIANT* Transform) PURE; 
	STDMETHOD_(HRESULT, InsertCaption) (THIS_ VARIANT* Label, VARIANT* Title, VARIANT* TitleAutoText, VARIANT* Position, VARIANT* ExcludeLabel) PURE; 
	STDMETHOD_(HRESULT, InsertCrossReference) (THIS_ VARIANT* ReferenceType, WdReferenceKind ReferenceKind, VARIANT* ReferenceItem, VARIANT* InsertAsHyperlink, VARIANT* IncludePosition, VARIANT* SeparateNumbers, VARIANT* SeparatorString) PURE; 
};
typedef WordRange* LPANGE;
#ifdef __cplusplus
// Range  {0002095E-0000-0000-C000-000000000046}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TRangeProxy : public __OCF TAutoProxy
{
public:
	TRangeProxy() : TAutoProxy(0x0) {}

	// Text:   [dispid 0]
	/* __OCF */ TString Text();

	// Text:   [dispid 0]
	void Text(__OCF TAutoString arg0);

	// FormattedText:   [dispid 2]
	void FormattedText(TRangeProxy& Obj);

	// FormattedText:   [dispid 2]
	void FormattedText(WordRange* arg0);

	// Start:   [dispid 3]
	long Start();

	// Start:   [dispid 3]
	void Start(long arg0);

	// End:   [dispid 4]
	long End();

	// End:   [dispid 4]
	void End(long arg0);

	// _Font:   [dispid 5]
	Font* _Font();

	// _Font:   [dispid 5]
	void _Font(Font* arg0);

	// Duplicate:   [dispid 6]
	void Duplicate(TRangeProxy& Obj);

	// StoryType:   [dispid 7]
	WdStoryType StoryType();

	// _Tables:   [dispid 50]
	void _Tables(TTablesProxy& Obj);

	// _Words:   [dispid 51]
	void _Words(TWordsProxy& Obj);

	// _Sentences:   [dispid 52]
	void _Sentences(TSentencesProxy& Obj);

	// _Characters:   [dispid 53]
	void _Characters(TCharactersProxy& Obj);

	// _Footnotes:   [dispid 54]
	void _Footnotes(TFootnotesProxy& Obj);

	// _Endnotes:   [dispid 55]
	void _Endnotes(TEndnotesProxy& Obj);

	// _Comments:   [dispid 56]
	void _Comments(TCommentsProxy& Obj);

	// _Cells:   [dispid 57]
	void _Cells(TCellsProxy& Obj);

	// _Sections:   [dispid 58]
	void _Sections(TSectionsProxy& Obj);

	// _Paragraphs:   [dispid 59]
	void _Paragraphs(TParagraphsProxy& Obj);

	// _Borders:   [dispid 1100]
	void _Borders(TBordersProxy& Obj);

	// _Borders:   [dispid 1100]
	void _Borders(Borders* arg0);

	// _Shading:   [dispid 61]
	void _Shading(TShadingProxy& Obj);

	// _TextRetrievalMode:   [dispid 62]
	void _TextRetrievalMode(TTextRetrievalModeProxy& Obj);

	// _TextRetrievalMode:   [dispid 62]
	void _TextRetrievalMode(TextRetrievalMode* arg0);

	// _Fields:   [dispid 64]
	void _Fields(TFieldsProxy& Obj);

	// _FormFields:   [dispid 65]
	void _FormFields(TFormFieldsProxy& Obj);

	// _Frames:   [dispid 66]
	void _Frames(TFramesProxy& Obj);

	// _ParagraphFormat:   [dispid 1102]
	ParagraphFormat* _ParagraphFormat();

	// _ParagraphFormat:   [dispid 1102]
	void _ParagraphFormat(ParagraphFormat* arg0);

	// _ListFormat:   [dispid 68]
	void _ListFormat(TListFormatProxy& Obj);

	// _Bookmarks:   [dispid 75]
	void _Bookmarks(TBookmarksProxy& Obj);

	// _Application:   [dispid 1000]
	WordApplication* _Application();

	// Creator:   [dispid 1001]
	long Creator();

	// Parent:   [dispid 1002]
	IDispatch* Parent();

	// Bold:   [dispid 130]
	long Bold();

	// Bold:   [dispid 130]
	void Bold(long arg0);

	// Italic:   [dispid 131]
	long Italic();

	// Italic:   [dispid 131]
	void Italic(long arg0);

	// Underline:   [dispid 139]
	WdUnderline Underline();

	// Underline:   [dispid 139]
	void Underline(WdUnderline arg0);

	// EmphasisMark:   [dispid 140]
	WdEmphasisMark EmphasisMark();

	// EmphasisMark:   [dispid 140]
	void EmphasisMark(WdEmphasisMark arg0);

	// DisableCharacterSpaceGrid:   [dispid 141]
	/*__OWL*/ TBool DisableCharacterSpaceGrid();

	// DisableCharacterSpaceGrid:   [dispid 141]
	void DisableCharacterSpaceGrid(/*__OWL*/ TBool arg0);

	// _Revisions:   [dispid 150]
	void _Revisions(TRevisionsProxy& Obj);

	// _Style:   [dispid 151]
	__OCF TAutoVal _Style();

	// _Style:   [dispid 151]
	void _Style(__OCF TAutoVal* arg0);

	// StoryLength:   [dispid 152]
	long StoryLength();

	// LanguageID:   [dispid 153]
	WdLanguageID LanguageID();

	// LanguageID:   [dispid 153]
	void LanguageID(WdLanguageID arg0);

	// _SynonymInfo:   [dispid 155]
	void _SynonymInfo(TSynonymInfoProxy& Obj);

	// _Hyperlinks:   [dispid 156]
	void _Hyperlinks(THyperlinksProxy& Obj);

	// _ListParagraphs:   [dispid 157]
	void _ListParagraphs(TListParagraphsProxy& Obj);

	// _Subdocuments:   [dispid 159]
	void _Subdocuments(TSubdocumentsProxy& Obj);

	// GrammarChecked:   [dispid 260]
	/*__OWL*/ TBool GrammarChecked();

	// GrammarChecked:   [dispid 260]
	void GrammarChecked(/*__OWL*/ TBool arg0);

	// SpellingChecked:   [dispid 261]
	/*__OWL*/ TBool SpellingChecked();

	// SpellingChecked:   [dispid 261]
	void SpellingChecked(/*__OWL*/ TBool arg0);

	// HighlightColorIndex:   [dispid 301]
	WdColorIndex HighlightColorIndex();

	// HighlightColorIndex:   [dispid 301]
	void HighlightColorIndex(WdColorIndex arg0);

	// _Columns:   [dispid 302]
	void _Columns(TColumnsProxy& Obj);

	// _Rows:   [dispid 303]
	void _Rows(TRowsProxy& Obj);

	// CanEdit:   [dispid 304]
	long CanEdit();

	// CanPaste:   [dispid 305]
	long CanPaste();

	// IsEndOfRowMark:   [dispid 307]
	/*__OWL*/ TBool IsEndOfRowMark();

	// BookmarkID:   [dispid 308]
	long BookmarkID();

	// PreviousBookmarkID:   [dispid 309]
	long PreviousBookmarkID();

	// _Find:   [dispid 262]
	void _Find(TFindProxy& Obj);

	// _PageSetup:   [dispid 1101]
	void _PageSetup(TPageSetupProxy& Obj);

	// _PageSetup:   [dispid 1101]
	void _PageSetup(PageSetup* arg0);

	// _ShapeRange:   [dispid 311]
	void _ShapeRange(TShapeRangeProxy& Obj);

	// Case:   [dispid 312]
	WdCharacterCase Case();

	// Case:   [dispid 312]
	void Case(WdCharacterCase arg0);

	// Information:   [dispid 313]
	__OCF TAutoVal Information(WdInformation Type);

	// _ReadabilityStatistics:   [dispid 314]
	void _ReadabilityStatistics(TReadabilityStatisticsProxy& Obj);

	// GrammaticalErrors:   [dispid 315]
	void GrammaticalErrors(TProofreadingErrorsProxy& Obj);

	// SpellingErrors:   [dispid 316]
	void SpellingErrors(TProofreadingErrorsProxy& Obj);

	// Orientation:   [dispid 317]
	WdTextOrientation Orientation();

	// Orientation:   [dispid 317]
	void Orientation(WdTextOrientation arg0);

	// _InlineShapes:   [dispid 319]
	void _InlineShapes(TInlineShapesProxy& Obj);

	// NextStoryRange:   [dispid 320]
	void NextStoryRange(TRangeProxy& Obj);

	// LanguageIDFarEast:   [dispid 321]
	WdLanguageID LanguageIDFarEast();

	// LanguageIDFarEast:   [dispid 321]
	void LanguageIDFarEast(WdLanguageID arg0);

	// LanguageIDOther:   [dispid 322]
	WdLanguageID LanguageIDOther();

	// LanguageIDOther:   [dispid 322]
	void LanguageIDOther(WdLanguageID arg0);

	// Select:   [dispid 65535]
	void Select();

	// SetRange:   [dispid 100]
	void SetRange(long Start, long End);

	// Collapse:   [dispid 101]
	void Collapse(__OCF TAutoVal* Direction = 0);

	// InsertBefore:   [dispid 102]
	void InsertBefore(__OCF TAutoString Text);

	// InsertAfter:   [dispid 104]
	void InsertAfter(__OCF TAutoString Text);

	// Next:   [dispid 105]
	void Next(TRangeProxy& Obj, __OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// Previous:   [dispid 106]
	void Previous(TRangeProxy& Obj, __OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// StartOf:   [dispid 107]
	long StartOf(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Extend = 0);

	// EndOf:   [dispid 108]
	long EndOf(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Extend = 0);

	// Move:   [dispid 109]
	long Move(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// MoveStart:   [dispid 110]
	long MoveStart(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// MoveEnd:   [dispid 111]
	long MoveEnd(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// MoveWhile:   [dispid 112]
	long MoveWhile(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveStartWhile:   [dispid 113]
	long MoveStartWhile(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveEndWhile:   [dispid 114]
	long MoveEndWhile(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveUntil:   [dispid 115]
	long MoveUntil(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveStartUntil:   [dispid 116]
	long MoveStartUntil(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// MoveEndUntil:   [dispid 117]
	long MoveEndUntil(__OCF TAutoVal* Cset, __OCF TAutoVal* Count = 0);

	// Cut:   [dispid 119]
	void Cut();

	// Copy:   [dispid 120]
	void Copy();

	// Paste:   [dispid 121]
	void Paste();

	// InsertBreak:   [dispid 122]
	void InsertBreak(__OCF TAutoVal* Type = 0);

	// InsertFile:   [dispid 123]
	void InsertFile(__OCF TAutoString FileName, __OCF TAutoVal* arg1 = 0, __OCF TAutoVal* ConfirmConversions = 0, __OCF TAutoVal* Link = 0, __OCF TAutoVal* Attachment = 0);

	// InStory:   [dispid 125]
	/*__OWL*/ TBool InStory(WordRange* arg0);

	// InRange:   [dispid 126]
	/*__OWL*/ TBool InRange(WordRange* arg0);

	// Delete:   [dispid 127]
	long Delete(__OCF TAutoVal* Unit = 0, __OCF TAutoVal* Count = 0);

	// WholeStory:   [dispid 128]
	void WholeStory();

	// Expand:   [dispid 129]
	long Expand(__OCF TAutoVal* Unit = 0);

	// InsertParagraph:   [dispid 160]
	void InsertParagraph();

	// InsertParagraphAfter:   [dispid 161]
	void InsertParagraphAfter();

	// ConvertToTableOld:   [dispid 162]
	void ConvertToTableOld(TTableProxy& Obj, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* NumRows = 0, __OCF TAutoVal* NumColumns = 0, __OCF TAutoVal* InitialColumnWidth = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* ApplyBorders = 0, __OCF TAutoVal* ApplyShading = 0, __OCF TAutoVal* ApplyFont = 0, __OCF TAutoVal* ApplyColor = 0, __OCF TAutoVal* ApplyHeadingRows = 0, __OCF TAutoVal* ApplyLastRow = 0, __OCF TAutoVal* ApplyFirstColumn = 0, __OCF TAutoVal* ApplyLastColumn = 0, __OCF TAutoVal* AutoFit = 0);

	// InsertDateTimeOld:   [dispid 163]
	void InsertDateTimeOld(__OCF TAutoVal* DateTimeFormat = 0, __OCF TAutoVal* InsertAsField = 0, __OCF TAutoVal* InsertAsFullWidth = 0);

	// InsertSymbol:   [dispid 164]
	void InsertSymbol(long CharacterNumber, __OCF TAutoVal* arg1 = 0, __OCF TAutoVal* Unicode = 0, __OCF TAutoVal* Bias = 0);

	// InsertCrossReference_2002:   [dispid 165]
	void InsertCrossReference_2002(__OCF TAutoVal* ReferenceType, WdReferenceKind ReferenceKind, __OCF TAutoVal* ReferenceItem, __OCF TAutoVal* InsertAsHyperlink = 0, __OCF TAutoVal* IncludePosition = 0);

	// InsertCaptionXP:   [dispid 166]
	void InsertCaptionXP(__OCF TAutoVal* Label, __OCF TAutoVal* Title = 0, __OCF TAutoVal* TitleAutoText = 0, __OCF TAutoVal* Position = 0);

	// CopyAsPicture:   [dispid 167]
	void CopyAsPicture();

	// SortOld:   [dispid 168]
	void SortOld(__OCF TAutoVal* ExcludeHeader = 0, __OCF TAutoVal* FieldNumber = 0, __OCF TAutoVal* SortFieldType = 0, __OCF TAutoVal* SortOrder = 0, __OCF TAutoVal* FieldNumber2 = 0, __OCF TAutoVal* SortFieldType2 = 0, __OCF TAutoVal* SortOrder2 = 0, __OCF TAutoVal* FieldNumber3 = 0, __OCF TAutoVal* SortFieldType3 = 0, __OCF TAutoVal* SortOrder3 = 0, __OCF TAutoVal* SortColumn = 0, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* CaseSensitive = 0, __OCF TAutoVal* LanguageID = 0);

	// SortAscending:   [dispid 169]
	void SortAscending();

	// SortDescending:   [dispid 170]
	void SortDescending();

	// IsEqual:   [dispid 171]
	/*__OWL*/ TBool IsEqual(WordRange* arg0);

	// Calculate:   [dispid 172]
	float Calculate();

	// GoTo:   [dispid 173]
	void GoTo(TRangeProxy& Obj, __OCF TAutoVal* What = 0, __OCF TAutoVal* Which = 0, __OCF TAutoVal* Count = 0, __OCF TAutoVal* Name = 0);

	// GoToNext:   [dispid 174]
	void GoToNext(TRangeProxy& Obj, WdGoToItem What);

	// GoToPrevious:   [dispid 175]
	void GoToPrevious(TRangeProxy& Obj, WdGoToItem What);

	// PasteSpecial:   [dispid 176]
	void PasteSpecial(__OCF TAutoVal* IconIndex = 0, __OCF TAutoVal* Link = 0, __OCF TAutoVal* Placement = 0, __OCF TAutoVal* DisplayAsIcon = 0, __OCF TAutoVal* DataType = 0, __OCF TAutoVal* IconFileName = 0, __OCF TAutoVal* IconLabel = 0);

	// LookupNameProperties:   [dispid 177]
	void LookupNameProperties();

	// ComputeStatistics:   [dispid 178]
	long ComputeStatistics(WdStatistic Statistic);

	// Relocate:   [dispid 179]
	void Relocate(long Direction);

	// CheckSynonyms:   [dispid 180]
	void CheckSynonyms();

	// SubscribeTo:   [dispid 181]
	void SubscribeTo(__OCF TAutoString Edition, __OCF TAutoVal* Format = 0);

	// CreatePublisher:   [dispid 182]
	void CreatePublisher(__OCF TAutoVal* Edition = 0, __OCF TAutoVal* ContainsPICT = 0, __OCF TAutoVal* ContainsRTF = 0, __OCF TAutoVal* ContainsText = 0);

	// InsertAutoText:   [dispid 183]
	void InsertAutoText();

	// InsertDatabase:   [dispid 194]
	void InsertDatabase(__OCF TAutoVal* Format = 0, __OCF TAutoVal* arg1 = 0, __OCF TAutoVal* LinkToSource = 0, __OCF TAutoVal* Connection = 0, __OCF TAutoVal* SQLStatement = 0, __OCF TAutoVal* SQLStatement1 = 0, __OCF TAutoVal* PasswordDocument = 0, __OCF TAutoVal* PasswordTemplate = 0, __OCF TAutoVal* WritePasswordDocument = 0, __OCF TAutoVal* WritePasswordTemplate = 0, __OCF TAutoVal* DataSource = 0, __OCF TAutoVal* From = 0, __OCF TAutoVal* To = 0, __OCF TAutoVal* IncludeFields = 0);

	// AutoFormat:   [dispid 195]
	void AutoFormat();

	// CheckGrammar:   [dispid 204]
	void CheckGrammar();

	// CheckSpelling:   [dispid 205]
	void CheckSpelling(__OCF TAutoVal* CustomDictionary = 0, __OCF TAutoVal* IgnoreUppercase = 0, __OCF TAutoVal* AlwaysSuggest = 0, __OCF TAutoVal* CustomDictionary2 = 0, __OCF TAutoVal* CustomDictionary3 = 0, __OCF TAutoVal* CustomDictionary4 = 0, __OCF TAutoVal* CustomDictionary5 = 0, __OCF TAutoVal* CustomDictionary6 = 0, __OCF TAutoVal* CustomDictionary7 = 0, __OCF TAutoVal* CustomDictionary8 = 0, __OCF TAutoVal* CustomDictionary9 = 0, __OCF TAutoVal* CustomDictionary10 = 0);

	// GetSpellingSuggestions:   [dispid 209]
	void GetSpellingSuggestions(TSpellingSuggestionsProxy& Obj, __OCF TAutoVal* CustomDictionary = 0, __OCF TAutoVal* IgnoreUppercase = 0, __OCF TAutoVal* MainDictionary = 0, __OCF TAutoVal* SuggestionMode = 0, __OCF TAutoVal* CustomDictionary2 = 0, __OCF TAutoVal* CustomDictionary3 = 0, __OCF TAutoVal* CustomDictionary4 = 0, __OCF TAutoVal* CustomDictionary5 = 0, __OCF TAutoVal* CustomDictionary6 = 0, __OCF TAutoVal* CustomDictionary7 = 0, __OCF TAutoVal* CustomDictionary8 = 0, __OCF TAutoVal* CustomDictionary9 = 0, __OCF TAutoVal* CustomDictionary10 = 0);

	// InsertParagraphBefore:   [dispid 212]
	void InsertParagraphBefore();

	// NextSubdocument:   [dispid 219]
	void NextSubdocument();

	// PreviousSubdocument:   [dispid 220]
	void PreviousSubdocument();

	// ConvertHangulAndHanja:   [dispid 221]
	void ConvertHangulAndHanja(__OCF TAutoVal* ConversionsMode = 0, __OCF TAutoVal* FastConversion = 0, __OCF TAutoVal* CheckHangulEnding = 0, __OCF TAutoVal* EnableRecentOrdering = 0, __OCF TAutoVal* CustomDictionary = 0);

	// PasteAsNestedTable:   [dispid 222]
	void PasteAsNestedTable();

	// ModifyEnclosure:   [dispid 223]
	void ModifyEnclosure(__OCF TAutoVal* arg0, __OCF TAutoVal* Symbol = 0, __OCF TAutoVal* EnclosedText = 0);

	// PhoneticGuide:   [dispid 224]
	void PhoneticGuide(__OCF TAutoString Text, WdPhoneticGuideAlignmentType Alignment, long Raise, long arg3, __OCF TAutoString arg4);

	// InsertDateTime:   [dispid 444]
	void InsertDateTime(__OCF TAutoVal* DateTimeFormat = 0, __OCF TAutoVal* InsertAsField = 0, __OCF TAutoVal* InsertAsFullWidth = 0, __OCF TAutoVal* DateLanguage = 0, __OCF TAutoVal* CalendarType = 0);

	// Sort:   [dispid 484]
	void Sort(__OCF TAutoVal* ExcludeHeader = 0, __OCF TAutoVal* FieldNumber = 0, __OCF TAutoVal* SortFieldType = 0, __OCF TAutoVal* SortOrder = 0, __OCF TAutoVal* FieldNumber2 = 0, __OCF TAutoVal* SortFieldType2 = 0, __OCF TAutoVal* SortOrder2 = 0, __OCF TAutoVal* FieldNumber3 = 0, __OCF TAutoVal* SortFieldType3 = 0, __OCF TAutoVal* SortOrder3 = 0, __OCF TAutoVal* SortColumn = 0, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* CaseSensitive = 0, __OCF TAutoVal* BidiSort = 0, __OCF TAutoVal* IgnoreThe = 0, __OCF TAutoVal* IgnoreKashida = 0, __OCF TAutoVal* IgnoreDiacritics = 0, __OCF TAutoVal* IgnoreHe = 0, __OCF TAutoVal* LanguageID = 0);

	// DetectLanguage:   [dispid 203]
	void DetectLanguage();

	// ConvertToTable:   [dispid 498]
	void ConvertToTable(TTableProxy& Obj, __OCF TAutoVal* Separator = 0, __OCF TAutoVal* NumRows = 0, __OCF TAutoVal* NumColumns = 0, __OCF TAutoVal* InitialColumnWidth = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* ApplyBorders = 0, __OCF TAutoVal* ApplyShading = 0, __OCF TAutoVal* ApplyFont = 0, __OCF TAutoVal* ApplyColor = 0, __OCF TAutoVal* ApplyHeadingRows = 0, __OCF TAutoVal* ApplyLastRow = 0, __OCF TAutoVal* ApplyFirstColumn = 0, __OCF TAutoVal* ApplyLastColumn = 0, __OCF TAutoVal* AutoFit = 0, __OCF TAutoVal* AutoFitBehavior = 0, __OCF TAutoVal* DefaultTableBehavior = 0);

	// TCSCConverter:   [dispid 499]
	void TCSCConverter(WdTCSCConverterDirection arg0, /*__OWL*/ TBool CommonTerms, /*__OWL*/ TBool UseVariants);

	// LanguageDetected:   [dispid 263]
	/*__OWL*/ TBool LanguageDetected();

	// LanguageDetected:   [dispid 263]
	void LanguageDetected(/*__OWL*/ TBool arg0);

	// FitTextWidth:   [dispid 264]
	float FitTextWidth();

	// FitTextWidth:   [dispid 264]
	void FitTextWidth(float arg0);

	// HorizontalInVertical:   [dispid 265]
	WdHorizontalInVerticalType HorizontalInVertical();

	// HorizontalInVertical:   [dispid 265]
	void HorizontalInVertical(WdHorizontalInVerticalType arg0);

	// TwoLinesInOne:   [dispid 266]
	WdTwoLinesInOneType TwoLinesInOne();

	// TwoLinesInOne:   [dispid 266]
	void TwoLinesInOne(WdTwoLinesInOneType arg0);

	// CombineCharacters:   [dispid 267]
	/*__OWL*/ TBool CombineCharacters();

	// CombineCharacters:   [dispid 267]
	void CombineCharacters(/*__OWL*/ TBool arg0);

	// NoProofing:   [dispid 323]
	long NoProofing();

	// NoProofing:   [dispid 323]
	void NoProofing(long arg0);

	// TopLevelTables:   [dispid 324]
	void TopLevelTables(TTablesProxy& Obj);

	// _Scripts:   [dispid 325]
	void _Scripts(TScriptsProxy& Obj);

	// CharacterWidth:   [dispid 326]
	WdCharacterWidth CharacterWidth();

	// CharacterWidth:   [dispid 326]
	void CharacterWidth(WdCharacterWidth arg0);

	// Kana:   [dispid 327]
	WdKana Kana();

	// Kana:   [dispid 327]
	void Kana(WdKana arg0);

	// BoldBi:   [dispid 400]
	long BoldBi();

	// BoldBi:   [dispid 400]
	void BoldBi(long arg0);

	// ItalicBi:   [dispid 401]
	long ItalicBi();

	// ItalicBi:   [dispid 401]
	void ItalicBi(long arg0);

	// ID:   [dispid 405]
	__OCF TAutoString ID();

	// ID:   [dispid 405]
	void ID(__OCF TAutoString arg0);

	// _HTMLDivisions:   [dispid 406]
	void _HTMLDivisions(THTMLDivisionsProxy& Obj);

	// _SmartTags:   [dispid 407]
	void _SmartTags(TSmartTagsProxy& Obj);

	// ShowAll:   [dispid 408]
	/*__OWL*/ TBool ShowAll();

	// ShowAll:   [dispid 408]
	void ShowAll(/*__OWL*/ TBool arg0);

	// _Document:   [dispid 409]
	WordDocument* _Document();

	// _FootnoteOptions:   [dispid 410]
	void _FootnoteOptions(TFootnoteOptionsProxy& Obj);

	// _EndnoteOptions:   [dispid 411]
	void _EndnoteOptions(TEndnoteOptionsProxy& Obj);

	// PasteAndFormat:   [dispid 412]
	void PasteAndFormat(WdRecoveryType Type);

	// PasteExcelTable:   [dispid 413]
	void PasteExcelTable(/*__OWL*/ TBool LinkedToExcel, /*__OWL*/ TBool WordFormatting, /*__OWL*/ TBool RTF);

	// PasteAppendTable:   [dispid 414]
	void PasteAppendTable();

	// _XMLNodes:   [dispid 340]
	void _XMLNodes(TXMLNodesProxy& Obj);

	// XMLParentNode:   [dispid 341]
	void XMLParentNode(TXMLNodeProxy& Obj);

	// _Editors:   [dispid 343]
	void _Editors(TEditorsProxy& Obj);

	// XML:   [dispid 344]
	__OCF TAutoString XML(/*__OWL*/ TBool DataOnly);

	// EnhMetaFileBits:   [dispid 345]
	__OCF TAutoVal EnhMetaFileBits();

	// GoToEditableRange:   [dispid 415]
	void GoToEditableRange(TRangeProxy& Obj, __OCF TAutoVal* EditorID = 0);

	// InsertXML:   [dispid 416]
	void InsertXML(__OCF TAutoString XML, __OCF TAutoVal* Transform = 0);

	// InsertCaption:   [dispid 417]
	void InsertCaption(__OCF TAutoVal* Label, __OCF TAutoVal* Title = 0, __OCF TAutoVal* TitleAutoText = 0, __OCF TAutoVal* Position = 0, __OCF TAutoVal* ExcludeLabel = 0);

	// InsertCrossReference:   [dispid 418]
	void InsertCrossReference(__OCF TAutoVal* ReferenceType, WdReferenceKind ReferenceKind, __OCF TAutoVal* ReferenceItem, __OCF TAutoVal* InsertAsHyperlink = 0, __OCF TAutoVal* IncludePosition = 0, __OCF TAutoVal* SeparateNumbers = 0, __OCF TAutoVal* SeparatorString = 0);
};
#endif

// WdFindWrap
typedef enum tagWdFindWrap
{
	wdFindStop = 0, 
	wdFindContinue = 1, 
	wdFindAsk = 2, 
} WdFindWrap;

// Find
// {000209B0-0000-0000-C000-000000000046}
#undef INTERFACE
#define INTERFACE Find
DECLARE_INTERFACE_(Find, IDispatch)
{
#ifndef __cplusplus
	// IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	// IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	// Find methods:
	STDMETHOD_(HRESULT, Get_Application) (THIS_ WordApplication** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Creator) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Forward) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Forward) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_Font) (THIS_ Font** prop) PURE; 
	STDMETHOD_(HRESULT, Set_Font) (THIS_ Font* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Found) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchAllWordForms) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchAllWordForms) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchCase) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchCase) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchWildcards) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchWildcards) (THIS_ VARIANT_BOOL prop) PURE;
	STDMETHOD_(HRESULT, Get_MatchSoundsLike) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchSoundsLike) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchWholeWord) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchWholeWord) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchFuzzy) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchFuzzy) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchByte) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchByte) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_ParagraphFormat) (THIS_ ParagraphFormat** prop) PURE; 
	STDMETHOD_(HRESULT, Set_ParagraphFormat) (THIS_ ParagraphFormat* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Style) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Style) (THIS_ VARIANT* prop) PURE; 
	STDMETHOD_(HRESULT, Get_Text) (THIS_ BSTR* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Text) (THIS_ BSTR prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageID) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageID) (THIS_ WdLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Get_Highlight) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Highlight) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_Replacement) (THIS_ Replacement** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Frame) (THIS_ Frame** prop) PURE; 
	STDMETHOD_(HRESULT, Get_Wrap) (THIS_ WdFindWrap* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Wrap) (THIS_ WdFindWrap prop) PURE; 
	STDMETHOD_(HRESULT, Get_Format) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_Format) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_LanguageIDFarEast) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageIDFarEast) (THIS_ WdLanguageID prop) PURE;
	STDMETHOD_(HRESULT, Get_LanguageIDOther) (THIS_ WdLanguageID* prop) PURE; 
	STDMETHOD_(HRESULT, Set_LanguageIDOther) (THIS_ WdLanguageID prop) PURE; 
	STDMETHOD_(HRESULT, Get_CorrectHangulEndings) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_CorrectHangulEndings) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, ExecuteOld) (THIS_ VARIANT* FindText, VARIANT* MatchCase, VARIANT* MatchWholeWord, VARIANT* MatchWildcards, VARIANT* MatchSoundsLike, VARIANT* MatchAllWordForms, VARIANT* Forward, VARIANT* Wrap, VARIANT* Format, VARIANT* ReplaceWith, VARIANT* Replace, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, ClearFormatting) (THIS ) PURE; 
	STDMETHOD_(HRESULT, SetAllFuzzyOptions) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ClearAllFuzzyOptions) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Execute) (THIS_ VARIANT* FindText, VARIANT* MatchCase, VARIANT* MatchWholeWord, VARIANT* MatchWildcards, VARIANT* MatchSoundsLike, VARIANT* MatchAllWordForms, VARIANT* Forward, VARIANT* Wrap, VARIANT* Format, VARIANT* ReplaceWith, VARIANT* Replace, VARIANT* MatchKashida, VARIANT* MatchDiacritics, VARIANT* MatchAlefHamza, VARIANT* MatchControl, VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Get_NoProofing) (THIS_ long* prop) PURE; 
	STDMETHOD_(HRESULT, Set_NoProofing) (THIS_ long prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchKashida) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchKashida) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchDiacritics) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchDiacritics) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchAlefHamza) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchAlefHamza) (THIS_ VARIANT_BOOL prop) PURE; 
	STDMETHOD_(HRESULT, Get_MatchControl) (THIS_ VARIANT_BOOL* prop) PURE; 
	STDMETHOD_(HRESULT, Set_MatchControl) (THIS_ VARIANT_BOOL prop) PURE; 
};
typedef Find* LPIND;
#ifdef __cplusplus
// Find  {000209B0-0000-0000-C000-000000000046}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TFindProxy : public __OCF TAutoProxy
{
public:
	TFindProxy() : TAutoProxy(0x0) {}

	// _Application:   [dispid 1000]
	WordApplication* _Application();

	// Creator:   [dispid 1001]
	long Creator();

	// Parent:   [dispid 1002]
	IDispatch* Parent();

	// Forward:   [dispid 10]
	/*__OWL*/ TBool Forward();

	// Forward:   [dispid 10]
	void Forward(/*__OWL*/ TBool arg0);

	// _Font:   [dispid 11]
	Font* _Font();

	// _Font:   [dispid 11]
	void _Font(Font* arg0);

	// Found:   [dispid 12]
	/*__OWL*/ TBool Found();

	// MatchAllWordForms:   [dispid 13]
	/*__OWL*/ TBool MatchAllWordForms();

	// MatchAllWordForms:   [dispid 13]
	void MatchAllWordForms(/*__OWL*/ TBool arg0);

	// MatchCase:   [dispid 14]
	/*__OWL*/ TBool MatchCase();

	// MatchCase:   [dispid 14]
	void MatchCase(/*__OWL*/ TBool arg0);

	// MatchWildcards:   [dispid 15]
	/*__OWL*/ TBool MatchWildcards();

	// MatchWildcards:   [dispid 15]
	void MatchWildcards(/*__OWL*/ TBool arg0);

	// MatchSoundsLike:   [dispid 16]
	/*__OWL*/ TBool MatchSoundsLike();

	// MatchSoundsLike:   [dispid 16]
	void MatchSoundsLike(/*__OWL*/ TBool arg0);

	// MatchWholeWord:   [dispid 17]
	/*__OWL*/ TBool MatchWholeWord();

	// MatchWholeWord:   [dispid 17]
	void MatchWholeWord(/*__OWL*/ TBool arg0);

	// MatchFuzzy:   [dispid 40]
	/*__OWL*/ TBool MatchFuzzy();

	// MatchFuzzy:   [dispid 40]
	void MatchFuzzy(/*__OWL*/ TBool arg0);

	// MatchByte:   [dispid 41]
	/*__OWL*/ TBool MatchByte();

	// MatchByte:   [dispid 41]
	void MatchByte(/*__OWL*/ TBool arg0);

	// _ParagraphFormat:   [dispid 18]
	ParagraphFormat* _ParagraphFormat();

	// _ParagraphFormat:   [dispid 18]
	void _ParagraphFormat(ParagraphFormat* arg0);

	// _Style:   [dispid 19]
	__OCF TAutoVal _Style();

	// _Style:   [dispid 19]
	void _Style(__OCF TAutoVal* arg0);

	// Text:   [dispid 22]
	__OCF TAutoString Text();

	// Text:   [dispid 22]
	void Text(__OCF TAutoString arg0);

	// LanguageID:   [dispid 23]
	WdLanguageID LanguageID();

	// LanguageID:   [dispid 23]
	void LanguageID(WdLanguageID arg0);

	// Highlight:   [dispid 24]
	long Highlight();

	// Highlight:   [dispid 24]
	void Highlight(long arg0);

	// _Replacement:   [dispid 25]
	void _Replacement(TReplacementProxy& Obj);

	// _Frame:   [dispid 26]
	void _Frame(TFrameProxy& Obj);

	// Wrap:   [dispid 27]
	WdFindWrap Wrap();

	// Wrap:   [dispid 27]
	void Wrap(WdFindWrap arg0);

	// Format:   [dispid 28]
	/*__OWL*/ TBool Format();

	// Format:   [dispid 28]
	void Format(/*__OWL*/ TBool arg0);

	// LanguageIDFarEast:   [dispid 29]
	WdLanguageID LanguageIDFarEast();

	// LanguageIDFarEast:   [dispid 29]
	void LanguageIDFarEast(WdLanguageID arg0);

	// LanguageIDOther:   [dispid 60]
	WdLanguageID LanguageIDOther();

	// LanguageIDOther:   [dispid 60]
	void LanguageIDOther(WdLanguageID arg0);

	// CorrectHangulEndings:   [dispid 61]
	/*__OWL*/ TBool CorrectHangulEndings();

	// CorrectHangulEndings:   [dispid 61]
	void CorrectHangulEndings(/*__OWL*/ TBool arg0);

	// ExecuteOld:   [dispid 30]
	/*__OWL*/ TBool ExecuteOld(__OCF TAutoVal* FindText = 0, __OCF TAutoVal* MatchCase = 0, __OCF TAutoVal* MatchWholeWord = 0, __OCF TAutoVal* MatchWildcards = 0, __OCF TAutoVal* MatchSoundsLike = 0, __OCF TAutoVal* MatchAllWordForms = 0, __OCF TAutoVal* Forward = 0, __OCF TAutoVal* Wrap = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* ReplaceWith = 0, __OCF TAutoVal* Replace = 0);

	// ClearFormatting:   [dispid 31]
	void ClearFormatting();

	// SetAllFuzzyOptions:   [dispid 32]
	void SetAllFuzzyOptions();

	// ClearAllFuzzyOptions:   [dispid 33]
	void ClearAllFuzzyOptions();

	// Execute:   [dispid 444]
	/*__OWL*/ TBool Execute(__OCF TAutoVal* FindText = 0, __OCF TAutoVal* MatchCase = 0, __OCF TAutoVal* MatchWholeWord = 0, __OCF TAutoVal* MatchWildcards = 0, __OCF TAutoVal* MatchSoundsLike = 0, __OCF TAutoVal* MatchAllWordForms = 0, __OCF TAutoVal* Forward = 0, __OCF TAutoVal* Wrap = 0, __OCF TAutoVal* Format = 0, __OCF TAutoVal* ReplaceWith = 0, __OCF TAutoVal* Replace = 0, __OCF TAutoVal* MatchKashida = 0, __OCF TAutoVal* MatchDiacritics = 0, __OCF TAutoVal* MatchAlefHamza = 0, __OCF TAutoVal* MatchControl = 0);

	// NoProofing:   [dispid 34]
	long NoProofing();

	// NoProofing:   [dispid 34]
	void NoProofing(long arg0);

	// MatchKashida:   [dispid 100]
	/*__OWL*/ TBool MatchKashida();

	// MatchKashida:   [dispid 100]
	void MatchKashida(/*__OWL*/ TBool arg0);

	// MatchDiacritics:   [dispid 101]
	/*__OWL*/ TBool MatchDiacritics();

	// MatchDiacritics:   [dispid 101]
	void MatchDiacritics(/*__OWL*/ TBool arg0);

	// MatchAlefHamza:   [dispid 102]
	/*__OWL*/ TBool MatchAlefHamza();

	// MatchAlefHamza:   [dispid 102]
	void MatchAlefHamza(/*__OWL*/ TBool arg0);

	// MatchControl:   [dispid 103]
	/*__OWL*/ TBool MatchControl();

	// MatchControl:   [dispid 103]
	void MatchControl(/*__OWL*/ TBool arg0);
};
#endif

#endif

