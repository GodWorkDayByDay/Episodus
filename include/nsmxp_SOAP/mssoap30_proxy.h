//---------------------------------------------------------------------------
//
//Version:            1.0
//Copyright:          
//Description:        
//Author:             
//Company:            
//
//Header Type:        Abstract type descriptions.
//
//File:               mssoap30_proxy.h
//
//Type Library:       MSSOAPLib30
//Type Description:   Microsoft Soap Type Library v3.0
//
//GUID:               {91147A58-DFE4-47C0-8E76-987FC1A6001B}
//System:             WIN32
//Version:            3.0
//
//Code generated by ProxyWiz 1.0
//ProxyWiz Copyright Dr John Maddock 1997, all rights reserved.
//
//---------------------------------------------------------------------------

#if !defined(__MSSOAP30_PROXY_H)
#define __MSSOAP30_PROXY_H

#include "wizard.h"
#include "nsmxp_SOAP\msxml40_proxy.h"

//------------------------------------------------------------
//Predeclaration of classes and interfaces

#ifdef __cplusplus

// struct _LARGE_INTEGER;
// struct _ULARGE_INTEGER;
class IStream;
struct tagSTATSTG;
class IReceivedAttachment;
class _PWCLASS TIReceivedAttachmentProxy;
class IXMLDOMNode;
class _PWCLASS TIXMLDOMNodeProxy;
class IDataEncoder;
class _PWCLASS TIDataEncoderProxy;
class IComposerDestination;
class ISoapMapper;
class ISoapSerializer;
class _PWCLASS TISoapSerializerProxy;
class IParserSource;
class ISoapReader;
class _PWCLASS TISoapReaderProxy;
class IXMLDOMDocument;
class _PWCLASS TIXMLDOMDocumentProxy;
class IXMLDOMElement;
class _PWCLASS TIXMLDOMElementProxy;
class IXMLDOMNodeList;
class _PWCLASS TIXMLDOMNodeListProxy;
// interface enElementLocation;
class IEnumWSDLService;
class IWSDLPort;
class IWSDLOperation;
class ISoapTypeMapperFactory;
class _PWCLASS TISoapTypeMapperFactoryProxy;
class ISoapTypeMapper;
class _PWCLASS TISoapTypeMapperProxy;
// interface enXSDType;
// interface enEncodingStyle;
interface ComposerDestinationFlags;
class IWSDLService;
interface smIsInputEnum;
interface enSpecialType;
class IWSDLMessage;
class IEnumSoapMappers;
interface enOperationType;
class IEnumWSDLOperations;
class IEnumWSDLPorts;
// interface DOMNodeType;
class IXMLDOMNamedNodeMap;
class _PWCLASS TIXMLDOMNamedNodeMapProxy;
class IXMLDOMDocumentType;
class _PWCLASS TIXMLDOMDocumentTypeProxy;
class IXMLDOMImplementation;
class _PWCLASS TIXMLDOMImplementationProxy;
class IXMLDOMDocumentFragment;
class _PWCLASS TIXMLDOMDocumentFragmentProxy;
class IXMLDOMText;
class _PWCLASS TIXMLDOMTextProxy;
class IXMLDOMComment;
class _PWCLASS TIXMLDOMCommentProxy;
class IXMLDOMCDATASection;
class _PWCLASS TIXMLDOMCDATASectionProxy;
class IXMLDOMProcessingInstruction;
class _PWCLASS TIXMLDOMProcessingInstructionProxy;
class IXMLDOMAttribute;
class _PWCLASS TIXMLDOMAttributeProxy;
class IXMLDOMEntityReference;
class _PWCLASS TIXMLDOMEntityReferenceProxy;
class IXMLDOMParseError;
class _PWCLASS TIXMLDOMParseErrorProxy;
struct _FILETIME;
#else

typedef struct _LARGE_INTEGER _LARGE_INTEGER;
typedef struct _ULARGE_INTEGER _ULARGE_INTEGER;
typedef struct IStream IStream;
typedef struct tagSTATSTG tagSTATSTG;
typedef struct IReceivedAttachment IReceivedAttachment;
typedef struct IXMLDOMNode IXMLDOMNode;
typedef struct IDataEncoder IDataEncoder;
typedef struct IComposerDestination IComposerDestination;
typedef struct ISoapMapper ISoapMapper;
typedef struct ISoapSerializer ISoapSerializer;
typedef struct IParserSource IParserSource;
typedef struct ISoapReader ISoapReader;
typedef struct IXMLDOMDocument IXMLDOMDocument;
typedef struct IXMLDOMElement IXMLDOMElement;
typedef struct IXMLDOMNodeList IXMLDOMNodeList;
// typedef interface enElementLocation enElementLocation;
typedef struct IEnumWSDLService IEnumWSDLService;
typedef struct IWSDLPort IWSDLPort;
typedef struct IWSDLOperation IWSDLOperation;
typedef struct ISoapTypeMapperFactory ISoapTypeMapperFactory;
typedef struct ISoapTypeMapper ISoapTypeMapper;
// typedef interface enXSDType enXSDType;
// typedef interface enEncodingStyle enEncodingStyle;
typedef interface ComposerDestinationFlags ComposerDestinationFlags;
typedef struct IWSDLService IWSDLService;
typedef interface smIsInputEnum smIsInputEnum;
typedef interface enSpecialType enSpecialType;
typedef struct IWSDLMessage IWSDLMessage;
typedef struct IEnumSoapMappers IEnumSoapMappers;
typedef interface enOperationType enOperationType;
typedef struct IEnumWSDLOperations IEnumWSDLOperations;
typedef struct IEnumWSDLPorts IEnumWSDLPorts;
typedef interface DOMNodeType DOMNodeType;
typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;
typedef struct IXMLDOMImplementation IXMLDOMImplementation;
typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
typedef struct IXMLDOMText IXMLDOMText;
typedef struct IXMLDOMComment IXMLDOMComment;
typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;
typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
typedef struct IXMLDOMAttribute IXMLDOMAttribute;
typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;
typedef struct IXMLDOMParseError IXMLDOMParseError;
typedef struct _FILETIME _FILETIME;
#endif

// __MIDL___MIDL_itf_mssoap30_0135_0004
typedef enum tag__MIDL___MIDL_itf_mssoap30_0135_0004
{
	enDocumentLiteral = 0,
	enDocumentEncoded = 1,
	enRPCLiteral = 2,
	enRPCEncoded = 4,
} __MIDL___MIDL_itf_mssoap30_0135_0004, enEncodingStyle ;

// __MIDL___MIDL_itf_mssoap30_0132_0001
typedef enum tag__MIDL___MIDL_itf_mssoap30_0132_0001
{
	elDefaultLocation = 0,
	elEndOfEnvelope = 1,
	elEndOfBody = 2,
	elEndOfHeader = 3,
} __MIDL___MIDL_itf_mssoap30_0132_0001, enElementLocation ;

// __MIDL___MIDL_itf_mssoap30_0135_0003
typedef enum tag__MIDL___MIDL_itf_mssoap30_0135_0003
{
	enXSDUndefined = -1,
	enXSDDOM = 0,
	enXSDstring = 1,
	enXSDboolean = 2,
	enXSDfloat = 3,
	enXSDDouble = 4,
	enXSDdecimal = 5,
	enXSDtimeDuration = 6,
	enXSDduration = 6,
	enXSDrecurringDuration = 7,
	enXSDbinary = 8,
	enXSDbase64binary = 8,
	enXSDuriReference = 9,
	enXSDanyURI = 9,
	enXSDid = 10,
	enXSDidRef = 11,
	enXSDentity = 12,
	enXSDQName = 13,
	enXSDcdata = 14,
	enXSDnormalizedString = 14,
	enXSDtoken = 15,
	enXSDlanguage = 16,
	enXSDidRefs = 17,
	enXSDentities = 18,
	enXSDnmtoken = 19,
	enXSDnmtokens = 20,
	enXSDname = 21,
	enXSDncname = 22,
	enXSDnotation = 23,
	enXSDinteger = 24,
	enXSDnonpositiveInteger = 25,
	enXSDlong = 26,
	enXSDint = 27,
	enXSDshort = 28,
	enXSDbyte = 29,
	enXSDnonNegativeInteger = 30,
	enXSDnegativeInteger = 31,
	enXSDunsignedLong = 32,
	enXSDunsignedInt = 33,
	enXSDunsignedShort = 34,
	enXSDunsignedByte = 35,
	enXSDpositiveInteger = 36,
	enXSDtimeInstant = 37,
	enXSDdatetime = 37,
	enXSDtime = 38,
	enXSDtimePeriod = 39,
	enXSDdate = 40,
	enXSDmonth = 41,
	enXSDgMonth = 41,
	enXSDgYearMonth = 41,
	enXSDyear = 42,
	enXSDgYear = 42,
	enXSDcentury = 43,
	enXSDrecurringDate = 44,
	enXSDgMonthDay = 44,
	enXSDrecurringDay = 45,
	enXSDgDay = 45,
	enXSDarray = 46,
	enXSDanyType = 47,
	enTKempty = 48,
	enXSDhexbinary = 49,
	enXSDEndOfBuildin = 50,
} __MIDL___MIDL_itf_mssoap30_0135_0003, enXSDType ;

//Coclass: FileAttachment30 File attachment
// {90A299F3-26C6-457D-A514-404335109EDD}
typedef IUnknown FileAttachment30;

//Coclass: StringAttachment30 String attachment
// {722C5A81-4FEC-43F7-8656-E16EC6853073}
typedef IUnknown StringAttachment30;

//Coclass: ByteArrayAttachment30 Byte Array attachment
// {565FBBE9-8563-4302-BE8A-7C6A64FB0A85}
typedef IUnknown ByteArrayAttachment30;

//Coclass: StreamAttachment30 Stream attachment
// {05AE7FB3-C4E9-4F79-A5C3-DAB525E31F2C}
typedef IUnknown StreamAttachment30;

//Coclass: SentAttachments30 Sent attachment
// {CE071800-E681-4ADF-9422-A3D0BD0D51CB}
typedef IUnknown SentAttachments30;

//Coclass: ReceivedAttachments30 Received attachment
// {AF9B6377-6505-4934-AD85-BAB87E15EF65}
typedef IUnknown ReceivedAttachments30;

//Coclass: DataEncoderFactory30 Data Encoder Factory
// {7A51A663-4790-4885-B0E4-124D4BDADB3E}
typedef IUnknown DataEncoderFactory30;

//Coclass: DimeComposer30 Dime message composer
// {B85E6E71-1493-442F-BC97-B511BE0D5D96}
typedef IUnknown DimeComposer30;

//Coclass: DimeParser30 Dime message parser
// {DFC2FA0B-CC72-4486-B9F4-06FE8A75D58F}
typedef IUnknown DimeParser30;

//Coclass: SimpleComposer30 Simple message composer
// {F7E00C3F-D6C7-4E53-9887-61A2D4EBF0E8}
typedef IUnknown SimpleComposer30;

//Coclass: SimpleParser30 Simple message parser
// {4D602A27-DC39-45D6-A6B1-7003DE2E173C}
typedef IUnknown SimpleParser30;

//Coclass: SoapReader30 SoapReader Class
// {A8D986B6-9257-11D5-87EA-00B0D0BE6479}
typedef IUnknown SoapReader30;

//Coclass: SoapSerializer30 SoapSerializer Class
// {B76585B0-9257-11D5-87EA-00B0D0BE6479}
typedef IUnknown SoapSerializer30;

//Coclass: SoapServer30 SoapServer Class
// {7F017F96-9257-11D5-87EA-00B0D0BE6479}
typedef IUnknown SoapServer30;

//Coclass: SoapClient30 SoapClient Class
// {7F017F97-9257-11D5-87EA-00B0D0BE6479}
typedef IUnknown SoapClient30;

//Coclass: WSDLReader30 WSDLReader Class
// {EF90A70C-925B-11D5-87EA-00B0D0BE6479}
typedef IUnknown WSDLReader30;

//Coclass: SoapTypeMapperFactory30 Typemapperfactory Class
// {EF90A715-925B-11D5-87EA-00B0D0BE6479}
typedef IUnknown SoapTypeMapperFactory30;

//Coclass: GenericCustomTypeMapper30 GenericCustomTypeMapper Class
// {EF90A716-925B-11D5-87EA-00B0D0BE6479}
typedef IUnknown GenericCustomTypeMapper30;

//Coclass: UDTMapper30 UDTMapper Class
// {8BCD9554-86C7-435D-A8C8-BCB3C72FBEE9}
typedef IUnknown UDTMapper30;

//Coclass: SoapConnector30 SoapConnector Class
// {0AF40C52-9257-11D5-87EA-00B0D0BE6479}
typedef IUnknown SoapConnector30;

//Coclass: SoapConnectorFactory30 Soap Connector Factory Class
// {0AF40C58-9257-11D5-87EA-00B0D0BE6479}
typedef IUnknown SoapConnectorFactory30;

//Coclass: HttpConnector30 Soap Http Connector Class
// {0AF40C53-9257-11D5-87EA-00B0D0BE6479}
typedef IUnknown HttpConnector30;

//------------------------------------------------------------
//Declaration of GUID's

DEFINE_GUID(IID_IAttachment, 0xa2c40fb2, 0xb768, 0x4ec8, 0x80, 0x9a, 0x6e, 0xcb, 0x4b, 0x89, 0xc6, 0xa7);
DEFINE_GUID(IID_IFileAttachment, 0xd6dea9eb, 0x28ea, 0x45c7, 0xa4, 0x6a, 0x72, 0xd2, 0x66, 0x68, 0xc1, 0xea);
DEFINE_GUID(IID_ISequentialStream, 0xc733a30, 0x2a1c, 0x11ce, 0xad, 0xe5, 0x0, 0xaa, 0x0, 0x44, 0x77, 0x3d);
DEFINE_GUID(IID_IStream, 0xc, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID_CoFileAttachment30, 0x90a299f3, 0x26c6, 0x457d, 0xa5, 0x14, 0x40, 0x43, 0x35, 0x10, 0x9e, 0xdd);
DEFINE_GUID(IID_IStringAttachment, 0x8004a743, 0x6a1e, 0x45e4, 0xb2, 0xe2, 0xa6, 0xd1, 0x17, 0xf0, 0x60, 0x8);
DEFINE_GUID(IID_CoStringAttachment30, 0x722c5a81, 0x4fec, 0x43f7, 0x86, 0x56, 0xe1, 0x6e, 0xc6, 0x85, 0x30, 0x73);
DEFINE_GUID(IID_IByteArrayAttachment, 0x52088645, 0x8e96, 0x4c18, 0x86, 0x21, 0xb4, 0x66, 0x11, 0x63, 0x53, 0x3);
DEFINE_GUID(IID_CoByteArrayAttachment30, 0x565fbbe9, 0x8563, 0x4302, 0xbe, 0x8a, 0x7c, 0x6a, 0x64, 0xfb, 0xa, 0x85);
DEFINE_GUID(IID_IStreamAttachment, 0xbe1dbcf5, 0x2260, 0x470a, 0x8e, 0x1c, 0xe2, 0x40, 0x6d, 0x10, 0x6e, 0xa);
DEFINE_GUID(IID_CoStreamAttachment30, 0x5ae7fb3, 0xc4e9, 0x4f79, 0xa5, 0xc3, 0xda, 0xb5, 0x25, 0xe3, 0x1f, 0x2c);
DEFINE_GUID(IID_ISentAttachments, 0x95a098c0, 0xeb61, 0x4895, 0x91, 0xc7, 0x78, 0x87, 0x32, 0x51, 0x32, 0x2e);
DEFINE_GUID(IID_CoSentAttachments30, 0xce071800, 0xe681, 0x4adf, 0x94, 0x22, 0xa3, 0xd0, 0xbd, 0xd, 0x51, 0xcb);
DEFINE_GUID(IID_IReceivedAttachments, 0x176b81cd, 0x4f22, 0x4ca0, 0x9f, 0x54, 0x9f, 0xe5, 0x93, 0x5a, 0x59, 0x5b);
DEFINE_GUID(IID_CoReceivedAttachments30, 0xaf9b6377, 0x6505, 0x4934, 0xad, 0x85, 0xba, 0xb8, 0x7e, 0x15, 0xef, 0x65);
DEFINE_GUID(IID_IDataEncoderFactory, 0x456c5ab4, 0x2a2a, 0x4289, 0x9d, 0x4c, 0xc, 0x28, 0xbf, 0x73, 0x9e, 0xe4);
DEFINE_GUID(IID_CoDataEncoderFactory30, 0x7a51a663, 0x4790, 0x4885, 0xb0, 0xe4, 0x12, 0x4d, 0x4b, 0xda, 0xdb, 0x3e);
DEFINE_GUID(IID_IDimeComposer, 0xabaade34, 0xeef6, 0x408a, 0x88, 0x96, 0x65, 0xbe, 0x66, 0x9d, 0x27, 0xfa);
DEFINE_GUID(IID_IMessageComposer, 0x906a72b9, 0xff88, 0x4a49, 0xaf, 0xa2, 0xcc, 0x4c, 0xab, 0x51, 0x4, 0xec);
DEFINE_GUID(IID_CoDimeComposer30, 0xb85e6e71, 0x1493, 0x442f, 0xbc, 0x97, 0xb5, 0x11, 0xbe, 0xd, 0x5d, 0x96);
DEFINE_GUID(IID_IDimeParser, 0xe3f8baa5, 0x8a05, 0x4641, 0x91, 0xce, 0x3f, 0xbc, 0x53, 0x3d, 0x1e, 0xdb);
DEFINE_GUID(IID_IMessageParser, 0x3b2a98e6, 0xf76a, 0x48b1, 0x8f, 0x7d, 0x1, 0x39, 0xa8, 0xd0, 0x25, 0x8c);
DEFINE_GUID(IID_CoDimeParser30, 0xdfc2fa0b, 0xcc72, 0x4486, 0xb9, 0xf4, 0x6, 0xfe, 0x8a, 0x75, 0xd5, 0x8f);
DEFINE_GUID(IID_ISimpleComposer, 0x70824404, 0x7a18, 0x412a, 0x9a, 0x83, 0xa9, 0xec, 0xf, 0x3f, 0xf0, 0x45);
DEFINE_GUID(IID_CoSimpleComposer30, 0xf7e00c3f, 0xd6c7, 0x4e53, 0x98, 0x87, 0x61, 0xa2, 0xd4, 0xeb, 0xf0, 0xe8);
DEFINE_GUID(IID_ISimpleParser, 0xb313a227, 0x798, 0x4a87, 0x90, 0x74, 0x48, 0xca, 0x21, 0x64, 0xd0, 0xf7);
DEFINE_GUID(IID_CoSimpleParser30, 0x4d602a27, 0xdc39, 0x45d6, 0xa6, 0xb1, 0x70, 0x3, 0xde, 0x2e, 0x17, 0x3c);
DEFINE_GUID(IID_ISoapReader, 0xb21f31ca, 0xf45, 0x4046, 0xa2, 0x31, 0xcf, 0xb3, 0x86, 0xe9, 0xe4, 0x5f);
DEFINE_GUID(IID_CoSoapReader30, 0xa8d986b6, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_ISoapSerializer, 0x23bdf2b5, 0x2304, 0x4550, 0xbb, 0xe2, 0xf1, 0x97, 0xe2, 0xcc, 0x47, 0xb6);
DEFINE_GUID(IID_CoSoapSerializer30, 0xb76585b0, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_ISoapServer, 0x7f017f93, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_CoSoapServer30, 0x7f017f96, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_ISoapClient, 0x7f017f92, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_CoSoapClient30, 0x7f017f97, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_IWSDLReader, 0xde523fd4, 0xafb8, 0x4643, 0xba, 0x90, 0x9d, 0xeb, 0x3c, 0x7f, 0xb4, 0xa3);
DEFINE_GUID(IID_CoWSDLReader30, 0xef90a70c, 0x925b, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_ISoapTypeMapperFactory, 0xfced9f15, 0xd0a7, 0x4380, 0x87, 0xe6, 0x99, 0x23, 0x81, 0xac, 0xd2, 0x13);
DEFINE_GUID(IID_CoSoapTypeMapperFactory30, 0xef90a715, 0x925b, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_ISoapTypeMapper, 0x29d3f736, 0x1c25, 0x44ee, 0x9c, 0xee, 0x3f, 0x52, 0xf2, 0x26, 0xba, 0x8a);
DEFINE_GUID(IID_CoGenericCustomTypeMapper30, 0xef90a716, 0x925b, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_CoUDTMapper30, 0x8bcd9554, 0x86c7, 0x435d, 0xa8, 0xc8, 0xbc, 0xb3, 0xc7, 0x2f, 0xbe, 0xe9);
DEFINE_GUID(IID_ISoapConnector, 0xaf40c4e, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_CoSoapConnector30, 0xaf40c52, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_ISoapConnectorFactory, 0xaf40c50, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_CoSoapConnectorFactory30, 0xaf40c58, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_CoHttpConnector30, 0xaf40c53, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_IComposerDestination, 0x8e62c4b1, 0xee0c, 0x48fb, 0x91, 0x61, 0x3e, 0xe0, 0x41, 0xa0, 0x31, 0x53);
DEFINE_GUID(IID_IEnumWSDLService, 0x104f6816, 0x93e, 0x41d7, 0xa6, 0x8b, 0x8e, 0x1c, 0xc4, 0x8, 0xb2, 0x79);
DEFINE_GUID(IID_IParserSource, 0x282c694f, 0xd69f, 0x4044, 0xb0, 0x76, 0x6f, 0x4a, 0xc1, 0x74, 0x8a, 0x90);
DEFINE_GUID(IID_ISoapMapper, 0xc1e6061a, 0xf8dc, 0x4ca8, 0xa9, 0x52, 0xfa, 0xf7, 0x41, 0x9f, 0x10, 0x29);
DEFINE_GUID(IID_IWSDLOperation, 0xa0b762a7, 0x9f3e, 0x48d8, 0xb3, 0x33, 0x77, 0xe, 0x5f, 0xa7, 0x2a, 0x1e);
DEFINE_GUID(IID_IWSDLPort, 0x4d40b730, 0xf5fa, 0x472c, 0x88, 0x19, 0xdd, 0xcd, 0x18, 0x3b, 0xd0, 0xde);
DEFINE_GUID(IID_IWSDLService, 0x9b5d8d63, 0xea54, 0x41f6, 0x9f, 0x12, 0xf7, 0x7a, 0x13, 0x11, 0x1e, 0xc6);
DEFINE_GUID(IID_IDataEncoder, 0x663eb158, 0x8d95, 0x4657, 0xae, 0x32, 0xb7, 0xc6, 0xd, 0xe6, 0x12, 0x2f);
DEFINE_GUID(IID_IReceivedAttachment, 0xc0c9f1c0, 0x39, 0x427b, 0x8a, 0xcc, 0xad, 0x17, 0x2f, 0xe5, 0x57, 0xa8);
//
// Commented because already existing in msxml40_proxy.h
//
//DEFINE_GUID(IID_IXMLDOMNode, 0x2933bf80, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMDocument, 0x2933bf81, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMDocumentType, 0x2933bf8b, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMElement, 0x2933bf86, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMEntityReference, 0x2933bf8e, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMImplementation, 0x2933bf8f, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMNamedNodeMap, 0x2933bf83, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMNodeList, 0x2933bf82, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMParseError, 0x3efaa426, 0x272f, 0x11d2, 0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82);
//DEFINE_GUID(IID_IXMLDOMProcessingInstruction, 0x2933bf89, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMCharacterData, 0x2933bf84, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMText, 0x2933bf87, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IEnumSoapMappers, 0xacddced6, 0x6db8, 0x497a, 0xbf, 0x10, 0x6, 0x87, 0x11, 0x62, 0x99, 0x24);
DEFINE_GUID(IID_IEnumWSDLOperations, 0xb0bba669, 0x55f7, 0x4e9c, 0x94, 0x1e, 0x49, 0xbc, 0x47, 0x15, 0xc8, 0x34);
DEFINE_GUID(IID_IEnumWSDLPorts, 0xec189c1c, 0x31b3, 0x4193, 0xbd, 0xca, 0x98, 0xec, 0x44, 0xff, 0x3e, 0xe0);
DEFINE_GUID(IID_IWSDLMessage, 0x49f9421c, 0xdc88, 0x43e1, 0x82, 0x5f, 0x70, 0xe7, 0x88, 0xe9, 0xa9, 0xa9);
//DEFINE_GUID(IID_IXMLDOMAttribute, 0x2933bf85, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMCDATASection, 0x2933bf8a, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMComment, 0x2933bf88, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
//DEFINE_GUID(IID_IXMLDOMDocumentFragment, 0x3efaa413, 0x272f, 0x11d2, 0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82);
DEFINE_GUID(IID_IGetComposerDestination, 0x9e6cdfef, 0x4c42, 0x411b, 0xba, 0xca, 0xfe, 0x96, 0xf7, 0xa1, 0x3c, 0x4);
DEFINE_GUID(IID_IGetParserSource, 0xbb63287e, 0x1407, 0x40e3, 0x89, 0xab, 0x38, 0xcb, 0x27, 0x46, 0x54, 0x7f);
DEFINE_GUID(IID_IHeaderHandler, 0x504d4b91, 0x76b8, 0x4d88, 0x95, 0xea, 0xce, 0xb5, 0xe0, 0xfe, 0x41, 0xf3);
DEFINE_GUID(IID_IWSDLBinding, 0xab0e0268, 0x304d, 0x43fc, 0x86, 0x3, 0xb1, 0x10, 0x5f, 0x3a, 0x75, 0x12);
DEFINE_GUID(IID_ISoapError, 0x7f017f94, 0x9257, 0x11d5, 0x87, 0xea, 0x0, 0xb0, 0xd0, 0xbe, 0x64, 0x79);
DEFINE_GUID(IID_IErrorInfo, 0x1cf2b120, 0x547d, 0x101b, 0x8e, 0x65, 0x8, 0x0, 0x2b, 0x2b, 0xd1, 0x19);
DEFINE_GUID(IID_ISoapErrorInfo, 0xc0871607, 0x8c99, 0x4824, 0x92, 0xcd, 0x85, 0xcb, 0xd4, 0xc7, 0x27, 0x3f);
DEFINE_GUID(IID_IGCTMObjectFactory, 0x3c87b8be, 0xf2b7, 0x45c5, 0xb3, 0x4e, 0x4a, 0x46, 0xa5, 0x8a, 0x80, 0xb0);

// ************************ TSoapAutoProxy ************************

class _PWCLASS TSoapAutoProxy : public TAutoProxy
{
public:
	TSoapAutoProxy() : TAutoProxy(0x0) {}

  TAutoVal& Invoke(uint16 attr, TAutoProxyArgs& args, long* ids, unsigned named) ;
} ;


#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IAttachment
// IAttachment interface
// {A2C40FB2-B768-4EC8-809A-6ECB4B89C6A7}

#undef  INTERFACE
#define INTERFACE IAttachment

DECLARE_INTERFACE_(IAttachment, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IAttachment methods:
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; // Attachment property
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; // Attachment property
};

typedef IAttachment* LPATTACHMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IFileAttachment
// IFileAttachment interface
// {D6DEA9EB-28EA-45C7-A46A-72D26668C1EA}

#undef  INTERFACE
#define INTERFACE IFileAttachment

DECLARE_INTERFACE_(IFileAttachment, IAttachment)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IAttachment methods:
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; // Attachment property
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; // Attachment property
#endif
	//IFileAttachment methods:
	STDMETHOD_(HRESULT, Get_FileName) (THIS_ BSTR* par_value) PURE; // Path and name of the file who's content is sent as an attachment.
	STDMETHOD_(HRESULT, Set_FileName) (THIS_ BSTR par_value) PURE; // Path and name of the file who's content is sent as an attachment.
	STDMETHOD_(HRESULT, Set_DeleteAfterSending) (THIS_ VARIANT_BOOL par_value) PURE; // Determines if the file should be deleted when the object is not longer used.
	STDMETHOD_(HRESULT, Get_DeleteAfterSending) (THIS_ VARIANT_BOOL* par_value) PURE; // Determines if the file should be deleted when the object is not longer used.
};

typedef IFileAttachment* LPFILEATTACHMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IFileAttachment  {D6DEA9EB-28EA-45C7-A46A-72D26668C1EA}
// IFileAttachment interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIFileAttachmentProxy : public TAutoProxy
{
public:
	TIFileAttachmentProxy() : TAutoProxy(0x0) {}

	//Property: Attachment property  [dispid 1610743808]
	TAutoVal Property(TAutoString par_name);

	//Property: Attachment property  [dispid 1610743808]
	void Property(TAutoString par_name, TAutoVal arg1);

	//FileName: Path and name of the file who's content is sent as an attachment.  [dispid 1610809344]
	TAutoString FileName();

	//FileName: Path and name of the file who's content is sent as an attachment.  [dispid 1610809344]
	void FileName(TAutoString arg0);

	//DeleteAfterSending: Determines if the file should be deleted when the object is not longer used.  [dispid 1610809346]
	void DeleteAfterSending(TBool arg0);

	//DeleteAfterSending: Determines if the file should be deleted when the object is not longer used.  [dispid 1610809346]
	TBool DeleteAfterSending();
};

#endif


#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IStringAttachment
// IStringAttachment interface
// {8004A743-6A1E-45E4-B2E2-A6D117F06008}

#undef  INTERFACE
#define INTERFACE IStringAttachment

DECLARE_INTERFACE_(IStringAttachment, IAttachment)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IAttachment methods:
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; // Attachment property
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; // Attachment property
#endif
	//IStringAttachment methods:
	STDMETHOD_(HRESULT, Get_String) (THIS_ BSTR* par_value) PURE; // String that is sent as an attachment
	STDMETHOD_(HRESULT, Set_String) (THIS_ BSTR par_value) PURE; // String that is sent as an attachment
	STDMETHOD_(HRESULT, Get_ContentCharacterSet) (THIS_ BSTR* par_value) PURE; // Target characterset when saving
	STDMETHOD_(HRESULT, Set_ContentCharacterSet) (THIS_ BSTR par_value) PURE; // Target characterset when saving
};

typedef IStringAttachment* LPSTRINGATTACHMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IStringAttachment  {8004A743-6A1E-45E4-B2E2-A6D117F06008}
// IStringAttachment interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIStringAttachmentProxy : public TAutoProxy
{
public:
	TIStringAttachmentProxy() : TAutoProxy(0x0) {}

	//Property: Attachment property  [dispid 1610743808]
	TAutoVal Property(TAutoString par_name);

	//Property: Attachment property  [dispid 1610743808]
	void Property(TAutoString par_name, TAutoVal arg1);

	//String: String that is sent as an attachment  [dispid 1610809344]
	TAutoString String();

	//String: String that is sent as an attachment  [dispid 1610809344]
	void String(TAutoString arg0);

	//ContentCharacterSet: Target characterset when saving  [dispid 1610809346]
	TAutoString ContentCharacterSet();

	//ContentCharacterSet: Target characterset when saving  [dispid 1610809346]
	void ContentCharacterSet(TAutoString arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IByteArrayAttachment
// IByteArrayAttachment interface
// {52088645-8E96-4C18-8621-B46611635303}

#undef  INTERFACE
#define INTERFACE IByteArrayAttachment

DECLARE_INTERFACE_(IByteArrayAttachment, IAttachment)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IAttachment methods:
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; // Attachment property
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; // Attachment property
#endif
	//IByteArrayAttachment methods:
	STDMETHOD_(HRESULT, Get_Array) (THIS_ VARIANT* par_value) PURE; // Array that is sent as an attachment
	STDMETHOD_(HRESULT, Set_Array) (THIS_ VARIANT par_value) PURE; // Array that is sent as an attachment
};

typedef IByteArrayAttachment* LPBYTEARRAYATTACHMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IByteArrayAttachment  {52088645-8E96-4C18-8621-B46611635303}
// IByteArrayAttachment interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIByteArrayAttachmentProxy : public TAutoProxy
{
public:
	TIByteArrayAttachmentProxy() : TAutoProxy(0x0) {}

	//Property: Attachment property  [dispid 1610743808]
	TAutoVal Property(TAutoString par_name);

	//Property: Attachment property  [dispid 1610743808]
	void Property(TAutoString par_name, TAutoVal arg1);

	//Array: Array that is sent as an attachment  [dispid 1610809344]
	TAutoVal Array();

	//Array: Array that is sent as an attachment  [dispid 1610809344]
	void Array(TAutoVal arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IStreamAttachment
// IStreamAttachment interface
// {BE1DBCF5-2260-470A-8E1C-E2406D106E0A}

#undef  INTERFACE
#define INTERFACE IStreamAttachment

DECLARE_INTERFACE_(IStreamAttachment, IAttachment)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IAttachment methods:
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; // Attachment property
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; // Attachment property
#endif
	//IStreamAttachment methods:
	STDMETHOD_(HRESULT, Get_Stream) (THIS_ IStream** par_value) PURE; // Stream from which attachment content is read.
	STDMETHOD_(HRESULT, SetRef_Stream) (THIS_ IStream* par_value) PURE; // Stream from which attachment content is read.
};

typedef IStreamAttachment* LPSTREAMATTACHMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IStreamAttachment  {BE1DBCF5-2260-470A-8E1C-E2406D106E0A}
// IStreamAttachment interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIStreamAttachmentProxy : public TAutoProxy
{
public:
	TIStreamAttachmentProxy() : TAutoProxy(0x0) {}

	//Property: Attachment property  [dispid 1610743808]
	TAutoVal Property(TAutoString par_name);

	//Property: Attachment property  [dispid 1610743808]
	void Property(TAutoString par_name, TAutoVal arg1);

	//Stream: Stream from which attachment content is read.  [dispid 1610809344]
	IStream* Stream();

	//Stream: Stream from which attachment content is read.  [dispid 1610809344]
	void Stream(IStream* arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISentAttachments
// ISentAttachments interface
// {95A098C0-EB61-4895-91C7-78873251322E}

#undef  INTERFACE
#define INTERFACE ISentAttachments

DECLARE_INTERFACE_(ISentAttachments, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISentAttachments methods:
	STDMETHOD_(HRESULT, Get_Count) (THIS_ long* par_value) PURE; // Count of attachments in the collection
	STDMETHOD_(HRESULT, Get_Item) (THIS_ long par_index, IAttachment** par_att) PURE; // Returns an attachment from the collection
	STDMETHOD_(HRESULT, Add) (THIS_ IAttachment* par_att) PURE; // Adds an attachment to the collection
};

typedef ISentAttachments* LPSENTATTACHMENTS;

#ifdef __cplusplus
}
#endif  /* __cplusplus */


//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

#ifdef __cplusplus
// IAttachment  {A2C40FB2-B768-4EC8-809A-6ECB4B89C6A7}
// IAttachment interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIAttachmentProxy : public TAutoProxy
{
public:
	TIAttachmentProxy() : TAutoProxy(0x0) {}

	//Property: Attachment property  [dispid 1610743808]
	TAutoVal Property(TAutoString par_name);

	//Property: Attachment property  [dispid 1610743808]
	void Property(TAutoString par_name, TAutoVal arg1);
};
#endif


#ifdef __cplusplus
// ISentAttachments  {95A098C0-EB61-4895-91C7-78873251322E}
// ISentAttachments interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISentAttachmentsProxy : public TAutoProxy
{
public:
	TISentAttachmentsProxy() : TAutoProxy(0x0) {}

	//Count: Count of attachments in the collection  [dispid 1610743808]
	long Count();

	//Item: Returns an attachment from the collection  [dispid 0]
	void Item(TIAttachmentProxy& Obj, long par_index);

	//Add: Adds an attachment to the collection  [dispid 1610743810]
	void Add(IAttachment* par_att);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IReceivedAttachments
// IReceivedAttachments interface
// {176B81CD-4F22-4CA0-9F54-9FE5935A595B}

#undef  INTERFACE
#define INTERFACE IReceivedAttachments

DECLARE_INTERFACE_(IReceivedAttachments, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IReceivedAttachments methods:
	STDMETHOD_(HRESULT, Get_Count) (THIS_ long* par_value) PURE; // Count of attachments in the collection
	STDMETHOD_(HRESULT, Get_Item) (THIS_ VARIANT par_index, IReceivedAttachment** par_att) PURE; // Returns an attachment from the collection.
	STDMETHOD_(HRESULT, Get_ItemWithContext) (THIS_ VARIANT par_index, IXMLDOMNode* par_context, IReceivedAttachment** par_att) PURE; // Returns an item from the collection, uses the specified node to help resolve relative URIs.
	STDMETHOD_(HRESULT, Get__NewEnum) (THIS_ IUnknown** par_value) PURE; 
};

typedef IReceivedAttachments* LPRECEIVEDATTACHMENTS;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IReceivedAttachments  {176B81CD-4F22-4CA0-9F54-9FE5935A595B}
// IReceivedAttachments interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIReceivedAttachmentsProxy : public TAutoProxy
{
public:
	TIReceivedAttachmentsProxy() : TAutoProxy(0x0) {}

	//Count: Count of attachments in the collection  [dispid 1610743808]
	long Count();

	//Item: Returns an attachment from the collection.  [dispid 0]
	void Item(TIReceivedAttachmentProxy& Obj, TAutoVal par_index);

	//ItemWithContext: Returns an item from the collection, uses the specified node to help resolve relative URIs.  [dispid 1610743810]
	void ItemWithContext(TIReceivedAttachmentProxy& Obj, TAutoVal par_index, IXMLDOMNode* par_context);

	//_NewEnum:   [dispid -4]
	void _NewEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IDataEncoderFactory
// IDataEncoderFactory interface
// {456C5AB4-2A2A-4289-9D4C-0C28BF739EE4}

#undef  INTERFACE
#define INTERFACE IDataEncoderFactory

DECLARE_INTERFACE_(IDataEncoderFactory, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IDataEncoderFactory methods:
	STDMETHOD_(HRESULT, AddDataEncoder) (THIS_ BSTR par_encoding, IDataEncoder* par_encoder) PURE; 
	STDMETHOD_(HRESULT, GetDataEncoder) (THIS_ BSTR par_encoding, IDataEncoder** par_encoder) PURE; 
};

typedef IDataEncoderFactory* LPDATAENCODERFACTORY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IDataEncoderFactory  {456C5AB4-2A2A-4289-9D4C-0C28BF739EE4}
// IDataEncoderFactory interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIDataEncoderFactoryProxy : public TAutoProxy
{
public:
	TIDataEncoderFactoryProxy() : TAutoProxy(0x0) {}

	//AddDataEncoder:   [dispid 1610743808]
	void AddDataEncoder(TAutoString par_encoding, IDataEncoder* par_encoder);

	//GetDataEncoder:   [dispid 1610743809]
	void GetDataEncoder(TIDataEncoderProxy& Obj, TAutoString par_encoding);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IDimeComposer
// IDimeComposer interface
// {ABAADE34-EEF6-408A-8896-65BE669D27FA}

#undef  INTERFACE
#define INTERFACE IDimeComposer

DECLARE_INTERFACE_(IDimeComposer, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IDimeComposer methods:
	STDMETHOD_(HRESULT, Initialize) (THIS_ BSTR par_tempFolder, long par_maxSize, long par_chunkSize) PURE; // Initializes the composer
};

typedef IDimeComposer* LPDIMECOMPOSER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IDimeComposer  {ABAADE34-EEF6-408A-8896-65BE669D27FA}
// IDimeComposer interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIDimeComposerProxy : public TAutoProxy
{
public:
	TIDimeComposerProxy() : TAutoProxy(0x0) {}

	//Initialize: Initializes the composer  [dispid 1610743808]
	void Initialize(TAutoString par_tempFolder, long par_maxSize, long par_chunkSize);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IMessageComposer
// IMessageComposer interface
// {906A72B9-FF88-4A49-AFA2-CC4CAB5104EC}

#undef  INTERFACE
#define INTERFACE IMessageComposer

DECLARE_INTERFACE_(IMessageComposer, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IMessageComposer methods:
	STDMETHOD_(HRESULT, StartComposing) (THIS_ IComposerDestination* par_destination) PURE; 
	STDMETHOD_(HRESULT, EndComposing) (THIS ) PURE; 
	STDMETHOD_(HRESULT, StartEnvelope) (THIS_ BSTR par_charSet, ISequentialStream** par_envelope) PURE; 
	STDMETHOD_(HRESULT, EndEnvelope) (THIS ) PURE; 
	STDMETHOD_(HRESULT, AddAttachment) (THIS_ IAttachment* par_att, BSTR* par_reference) PURE; 
	STDMETHOD_(HRESULT, SaveSpecialTypeMapper) (THIS_ ISoapMapper* par_ISoapMapper, ISoapSerializer* par_ISoapSerializer) PURE; // Saves a specialType object
};

typedef IMessageComposer* LPMESSAGECOMPOSER;

inline void push_arg(TAutoVal& val, IMessageComposer** arg)
{
	((VARIANT*)(&val))->vt = VT_UNKNOWN | VT_BYREF;
	((VARIANT*)(&val))->ppunkVal = (IUnknown**) arg;
}

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IDimeParser
// IDimeParser interface
// {E3F8BAA5-8A05-4641-91CE-3FBC533D1EDB}

#undef  INTERFACE
#define INTERFACE IDimeParser

DECLARE_INTERFACE_(IDimeParser, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IDimeParser methods:
	STDMETHOD_(HRESULT, Initialize) (THIS_ BSTR par_tempFolder, long par_maxSize) PURE; // Initializes the parser
};

typedef IDimeParser* LPDIMEPARSER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IDimeParser  {E3F8BAA5-8A05-4641-91CE-3FBC533D1EDB}
// IDimeParser interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIDimeParserProxy : public TAutoProxy
{
public:
	TIDimeParserProxy() : TAutoProxy(0x0) {}

	//Initialize: Initializes the parser  [dispid 1610743808]
	void Initialize(TAutoString par_tempFolder, long par_maxSize);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IMessageParser
// IMessageParser interface
// {3B2A98E6-F76A-48B1-8F7D-0139A8D0258C}

#undef  INTERFACE
#define INTERFACE IMessageParser

DECLARE_INTERFACE_(IMessageParser, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IMessageParser methods:
	STDMETHOD_(HRESULT, Initialize) (THIS_ IXMLDOMNode* par_binding, IXMLDOMNode* par_composer, BSTR par_tempFolder, long par_maxSize) PURE; 
	STDMETHOD_(HRESULT, LoadMessage) (THIS_ IParserSource* par_source, ISequentialStream* par_envelope, IReceivedAttachments** par_att) PURE; 
	STDMETHOD_(HRESULT, LoadSpecialTypeMapper) (THIS_ ISoapMapper* par_soapmapper, ISoapReader* par_soapreader, IXMLDOMNode* par_context) PURE; // Loads a specialType mapper
};

typedef IMessageParser* LPMESSAGEPARSER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

inline void push_arg(TAutoVal& val, IMessageParser** arg)
{
	((VARIANT*)(&val))->vt = VT_UNKNOWN | VT_BYREF;
	((VARIANT*)(&val))->ppunkVal = (IUnknown**) arg;
}

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISimpleComposer
// ISimpleComposer interface
// {70824404-7A18-412A-9A83-A9EC0F3FF045}

#undef  INTERFACE
#define INTERFACE ISimpleComposer

DECLARE_INTERFACE_(ISimpleComposer, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISimpleComposer methods:
};

typedef ISimpleComposer* LPSIMPLECOMPOSER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISimpleComposer  {70824404-7A18-412A-9A83-A9EC0F3FF045}
// ISimpleComposer interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISimpleComposerProxy : public TAutoProxy
{
public:
	TISimpleComposerProxy() : TAutoProxy(0x0) {}
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISimpleParser
// ISimpleParser interface
// {B313A227-0798-4A87-9074-48CA2164D0F7}

#undef  INTERFACE
#define INTERFACE ISimpleParser

DECLARE_INTERFACE_(ISimpleParser, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISimpleParser methods:
};

typedef ISimpleParser* LPSIMPLEPARSER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISimpleParser  {B313A227-0798-4A87-9074-48CA2164D0F7}
// ISimpleParser interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISimpleParserProxy : public TAutoProxy
{
public:
	TISimpleParserProxy() : TAutoProxy(0x0) {}
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapReader
// ISoapReader Interface
// {B21F31CA-0F45-4046-A231-CFB386E9E45F}

#undef  INTERFACE
#define INTERFACE ISoapReader

DECLARE_INTERFACE_(ISoapReader, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISoapReader methods:
	STDMETHOD_(HRESULT, Load) (THIS_ VARIANT par_source, BSTR par_soapAction, VARIANT_BOOL* par_success) PURE; // Load document into the SoapReader DOM from the specified XML source
	STDMETHOD_(HRESULT, LoadWithParser) (THIS_ VARIANT par_source, IMessageParser* par_parser, BSTR par_soapAction, VARIANT_BOOL* par_success) PURE; // Load document into the SoapReader DOM from the specified XML source and specify a parser
	STDMETHOD_(HRESULT, LoadXml) (THIS_ BSTR par_xml, VARIANT_BOOL* par_success) PURE; // Load a document into the SoapReader DOM from a string
	STDMETHOD_(HRESULT, Get_Dom) (THIS_ IXMLDOMDocument** par_IXMLDOMDocument) PURE; // Get the SoapReader DOM
	STDMETHOD_(HRESULT, Get_Envelope) (THIS_ IXMLDOMElement** par_Element) PURE; // The Soap Envelope element
	STDMETHOD_(HRESULT, Get_Body) (THIS_ IXMLDOMElement** par_Element) PURE; // The Soap Body element
	STDMETHOD_(HRESULT, Get_Header) (THIS_ IXMLDOMElement** par_Element) PURE; // The Soap Header element
	STDMETHOD_(HRESULT, Get_Fault) (THIS_ IXMLDOMElement** par_Element) PURE; // The Soap Fault element
	STDMETHOD_(HRESULT, Get_FaultString) (THIS_ IXMLDOMElement** par_Element) PURE; // The Soap Fault/FaultString element
	STDMETHOD_(HRESULT, Get_FaultCode) (THIS_ IXMLDOMElement** par_Element) PURE; // The Soap Fault/faultcode element
	STDMETHOD_(HRESULT, Get_FaultActor) (THIS_ IXMLDOMElement** par_Element) PURE; // The Soap Fault/FaultActor element
	STDMETHOD_(HRESULT, Get_FaultDetail) (THIS_ IXMLDOMElement** par_Element) PURE; // The Soap Fault/Detail element
	STDMETHOD_(HRESULT, Get_HeaderEntry) (THIS_ BSTR par_LocalName, BSTR par_NamespaceURI, IXMLDOMElement** par_Element) PURE; // The first header entry element with the specified local name and namespace URI
	STDMETHOD_(HRESULT, Get_MustUnderstandHeaderEntries) (THIS_ IXMLDOMNodeList** par_NodeList) PURE; // All Soap header elements with a mustUnderstand attribute equal to 1
	STDMETHOD_(HRESULT, Get_HeaderEntries) (THIS_ IXMLDOMNodeList** par_NodeList) PURE; // All Soap header elements
	STDMETHOD_(HRESULT, Get_BodyEntries) (THIS_ IXMLDOMNodeList** par_NodeList) PURE; // All Soap body elements
	STDMETHOD_(HRESULT, Get_BodyEntry) (THIS_ BSTR par_LocalName, BSTR par_NamespaceURI, IXMLDOMElement** par_Element) PURE; // The first Soap body element with the specified local name and namespace URI
	STDMETHOD_(HRESULT, Get_RpcStruct) (THIS_ IXMLDOMElement** par_Element) PURE; // The first Soap body element
	STDMETHOD_(HRESULT, Get_RpcParameter) (THIS_ BSTR par_LocalName, BSTR par_NamespaceURI, IXMLDOMElement** par_Element) PURE; // The first child element of the first Soap body element with the specified local name and namespace URI
	STDMETHOD_(HRESULT, Get_RpcResult) (THIS_ IXMLDOMElement** par_Element) PURE; // The first child element of the first Soap body entry element
	STDMETHOD_(HRESULT, Get_SoapAction) (THIS_ BSTR* par_soapAction) PURE; // The soapAction HTTP header if the passed in input was a Requestobject
	STDMETHOD_(HRESULT, GetContextItem) (THIS_ BSTR par_key, VARIANT* par_value) PURE; // Gets the value of a serialization context item
	STDMETHOD_(HRESULT, SetContextItem) (THIS_ BSTR par_key, VARIANT par_value) PURE; // Sets the value of a serialization context item
	STDMETHOD_(HRESULT, Get_Attachments) (THIS_ IReceivedAttachments** par_attachments) PURE; // Collection of attachments received with the message
	STDMETHOD_(HRESULT, GetReferencedNode) (THIS_ IXMLDOMNode* par_context, IXMLDOMNode** par_Node) PURE; // Returns the node referenced by an href attribute
	STDMETHOD_(HRESULT, GetReferencedAttachment) (THIS_ IXMLDOMNode* par_context, IReceivedAttachment** par_attachment) PURE; // Returns the attachment referenced by an href attribute
	STDMETHOD_(HRESULT, IsAttachmentReference) (THIS_ IXMLDOMNode* par_context, VARIANT_BOOL* par_result) PURE; // Indicates if an href attribute is present and identifies an attachment
	STDMETHOD_(HRESULT, IsNodeReference) (THIS_ IXMLDOMNode* par_context, VARIANT_BOOL* par_result) PURE; // Indicates if an href attribute is present and identifies a node
	STDMETHOD_(HRESULT, Get_Parser) (THIS_ IMessageParser** par_parser) PURE; // Returns the IMessageParser that is currently used
	STDMETHOD_(HRESULT, Set_XmlVersion) (THIS_ BSTR ) PURE; // Set XML Version to use
};

typedef ISoapReader* LPSOAPREADER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISoapReader  {B21F31CA-0F45-4046-A231-CFB386E9E45F}
// ISoapReader Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISoapReaderProxy : public TAutoProxy
{
public:
	TISoapReaderProxy() : TAutoProxy(0x0) {}

	//Load: Load document into the SoapReader DOM from the specified XML source  [dispid 1]
	TBool Load(TAutoVal par_source, TAutoString par_soapAction);

	//LoadWithParser: Load document into the SoapReader DOM from the specified XML source and specify a parser  [dispid 2]
	TBool LoadWithParser(TAutoVal par_source, IMessageParser* par_parser, TAutoString par_soapAction);

	//LoadXml: Load a document into the SoapReader DOM from a string  [dispid 3]
	TBool LoadXml(TAutoString par_xml);

	//Dom: Get the SoapReader DOM  [dispid 1610743811]
	void Dom(TIXMLDOMDocumentProxy& Obj);

	//Envelope: The Soap Envelope element  [dispid 1610743812]
	void Envelope(TIXMLDOMElementProxy& Obj);

	//Body: The Soap Body element  [dispid 1610743813]
	void Body(TIXMLDOMElementProxy& Obj);

	//Header: The Soap Header element  [dispid 1610743814]
	void Header(TIXMLDOMElementProxy& Obj);

	//Fault: The Soap Fault element  [dispid 1610743815]
	void Fault(TIXMLDOMElementProxy& Obj);

	//FaultString: The Soap Fault/FaultString element  [dispid 1610743816]
	void FaultString(TIXMLDOMElementProxy& Obj);

	//FaultCode: The Soap Fault/faultcode element  [dispid 1610743817]
	void FaultCode(TIXMLDOMElementProxy& Obj);

	//FaultActor: The Soap Fault/FaultActor element  [dispid 1610743818]
	void FaultActor(TIXMLDOMElementProxy& Obj);

	//FaultDetail: The Soap Fault/Detail element  [dispid 1610743819]
	void FaultDetail(TIXMLDOMElementProxy& Obj);

	//HeaderEntry: The first header entry element with the specified local name and namespace URI  [dispid 1610743820]
	void HeaderEntry(TIXMLDOMElementProxy& Obj, TAutoString par_LocalName, TAutoString par_NamespaceURI);

	//MustUnderstandHeaderEntries: All Soap header elements with a mustUnderstand attribute equal to 1  [dispid 1610743821]
	void MustUnderstandHeaderEntries(TIXMLDOMNodeListProxy& Obj);

	//HeaderEntries: All Soap header elements  [dispid 1610743822]
	void HeaderEntries(TIXMLDOMNodeListProxy& Obj);

	//BodyEntries: All Soap body elements  [dispid 1610743823]
	void BodyEntries(TIXMLDOMNodeListProxy& Obj);

	//BodyEntry: The first Soap body element with the specified local name and namespace URI  [dispid 1610743824]
	void BodyEntry(TIXMLDOMElementProxy& Obj, TAutoString par_LocalName, TAutoString par_NamespaceURI);

	//RpcStruct: The first Soap body element  [dispid 1610743825]
	void RpcStruct(TIXMLDOMElementProxy& Obj);

	//RpcParameter: The first child element of the first Soap body element with the specified local name and namespace URI  [dispid 1610743826]
	void RpcParameter(TIXMLDOMElementProxy& Obj, TAutoString par_LocalName, TAutoString par_NamespaceURI);

	//RpcResult: The first child element of the first Soap body entry element  [dispid 1610743827]
	void RpcResult(TIXMLDOMElementProxy& Obj);

	//SoapAction: The soapAction HTTP header if the passed in input was a Requestobject  [dispid 1610743828]
	TAutoString SoapAction();

	//GetContextItem: Gets the value of a serialization context item  [dispid 1610743829]
	TAutoVal GetContextItem(TAutoString par_key);

	//SetContextItem: Sets the value of a serialization context item  [dispid 1610743830]
	void SetContextItem(TAutoString par_key, TAutoVal par_value);

	//Attachments: Collection of attachments received with the message  [dispid 1610743831]
	void Attachments(TIReceivedAttachmentsProxy& Obj);

	//GetReferencedNode: Returns the node referenced by an href attribute  [dispid 1610743832]
	void GetReferencedNode(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* par_context);

	//GetReferencedAttachment: Returns the attachment referenced by an href attribute  [dispid 1610743833]
	void GetReferencedAttachment(TIReceivedAttachmentProxy& Obj, IXMLDOMNode* par_context);

	//IsAttachmentReference: Indicates if an href attribute is present and identifies an attachment  [dispid 1610743834]
	TBool IsAttachmentReference(IXMLDOMNode* par_context);

	//IsNodeReference: Indicates if an href attribute is present and identifies a node  [dispid 1610743835]
	TBool IsNodeReference(IXMLDOMNode* par_context);

	//Parser: Returns the IMessageParser that is currently used  [dispid 1610743836]
	IMessageParser* Parser();

	//XmlVersion: Set XML Version to use  [dispid 1610743837]
	void XmlVersion(TAutoString arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapSerializer
// ISoapSerializer Interface
// {23BDF2B5-2304-4550-BBE2-F197E2CC47B6}

#undef  INTERFACE
#define INTERFACE ISoapSerializer

DECLARE_INTERFACE_(ISoapSerializer, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISoapSerializer methods:
	STDMETHOD_(HRESULT, Init) (THIS_ VARIANT par_output) PURE; // Initialize the Serializer with the output stream or response object
	STDMETHOD_(HRESULT, InitWithComposer) (THIS_ VARIANT par_output, IMessageComposer* par_composer) PURE; // Initialize the Serializer with the output stream or response object and a composer
	STDMETHOD_(HRESULT, StartEnvelope) (THIS_ BSTR par_Prefix, BSTR par_enc_style_uri, BSTR par_encoding) PURE; // Start the Soap envelope in a Soap message
	STDMETHOD_(HRESULT, EndEnvelope) (THIS ) PURE; // Finish the Soap envelope
	STDMETHOD_(HRESULT, StartHeader) (THIS_ BSTR par_enc_style_uri) PURE; // Start Soap header
	STDMETHOD_(HRESULT, StartHeaderElement) (THIS_ BSTR par_name, BSTR par_ns_uri, int par_mustUnderstand, BSTR par_actor_uri, BSTR par_enc_style_uri, BSTR par_Prefix) PURE; // Start a Soap header element
	STDMETHOD_(HRESULT, EndHeaderElement) (THIS ) PURE; // End a Soap header element
	STDMETHOD_(HRESULT, EndHeader) (THIS ) PURE; // End the Soap header
	STDMETHOD_(HRESULT, StartBody) (THIS_ BSTR par_enc_style_uri) PURE; // Start the Soap body
	STDMETHOD_(HRESULT, EndBody) (THIS ) PURE; // End the Soap body
	STDMETHOD_(HRESULT, StartElement) (THIS_ BSTR par_name, BSTR par_ns_uri, BSTR par_enc_style_uri, BSTR par_Prefix) PURE; // Start an Element in the Soap Body
	STDMETHOD_(HRESULT, EndElement) (THIS ) PURE; // End an Element in the Soap Body
	STDMETHOD_(HRESULT, SoapAttribute) (THIS_ BSTR par_name, BSTR par_ns_uri, BSTR par_value, BSTR par_Prefix) PURE; // Define an Attribute for the current element
	STDMETHOD_(HRESULT, SoapNamespace) (THIS_ BSTR par_Prefix, BSTR par_ns_uri) PURE; // Define a Namespace for the current element
	STDMETHOD_(HRESULT, SoapDefaultNamespace) (THIS_ BSTR par_ns_uri) PURE; // Define a default Namespace
	STDMETHOD_(HRESULT, WriteString) (THIS_ BSTR par_string) PURE; // Write a string into the stream with escaping and encoding
	STDMETHOD_(HRESULT, WriteBuffer) (THIS_ long par_len, unsigned char* par_buffer) PURE; // Write a buffer directly into the stream without escaping or encoding characters
	STDMETHOD_(HRESULT, StartFault) (THIS_ BSTR par_FaultCode, BSTR par_FaultString, BSTR par_FaultActor, BSTR par_FaultCodeNS) PURE; // Start a Soap Fault
	STDMETHOD_(HRESULT, StartFaultDetail) (THIS_ BSTR par_enc_style_uri) PURE; // Start the fault detail element
	STDMETHOD_(HRESULT, EndFaultDetail) (THIS ) PURE; // End the fault detail
	STDMETHOD_(HRESULT, EndFault) (THIS ) PURE; // End a Soap Fault
	STDMETHOD_(HRESULT, Reset) (THIS ) PURE; // Reset the serializer for reuse
	STDMETHOD_(HRESULT, WriteXml) (THIS_ BSTR par_string) PURE; // Write a CDATA section into the stream
	STDMETHOD_(HRESULT, GetPrefixForNamespace) (THIS_ BSTR par_ns_string, BSTR* par_ns_prefix) PURE; // Retrieves the prefix for existing namespace
	STDMETHOD_(HRESULT, EndHrefedElement) (THIS ) PURE; // End an Hrefed Element in the Soap message
	STDMETHOD_(HRESULT, StartHrefedElement) (THIS_ BSTR par_name, BSTR par_ns_uri, BSTR par_enc_style_uri, BSTR par_Prefix, enElementLocation par_location, BSTR par_hrefidinput, BSTR* par_hrefid) PURE; // Start an Hrefed Element in the Soap message
	STDMETHOD_(HRESULT, Get_SoapFault) (THIS_ VARIANT_BOOL* par_fault) PURE; // Indicates if a fault has already been written to the message
	STDMETHOD_(HRESULT, GetContextItem) (THIS_ BSTR par_key, VARIANT* par_value) PURE; // Gets the value of a serialization context item
	STDMETHOD_(HRESULT, SetContextItem) (THIS_ BSTR par_key, VARIANT par_value) PURE; // Sets the value of a serialization context item
	STDMETHOD_(HRESULT, AddAttachment) (THIS_ IAttachment* par_att) PURE; // Adds an attachment to the message
	STDMETHOD_(HRESULT, AddAttachmentAndReference) (THIS_ IAttachment* par_att) PURE; // Adds an attachment to the message and adds a reference to the attachment to the last started element
	STDMETHOD_(HRESULT, Finished) (THIS ) PURE; // Indicates that all message content, including attachments, has been serialized
	STDMETHOD_(HRESULT, Get_Composer) (THIS_ IMessageComposer** par_composer) PURE; // Returns the composer used in the serializer
	STDMETHOD_(HRESULT, CreateHRefId) (THIS_ BSTR* par_hrefid) PURE; // Create ID for HREF'd element
};

typedef ISoapSerializer* LPSOAPSERIALIZER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISoapSerializer  {23BDF2B5-2304-4550-BBE2-F197E2CC47B6}
// ISoapSerializer Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISoapSerializerProxy : public TSoapAutoProxy
{
public:
	TISoapSerializerProxy() : TSoapAutoProxy() {}

	//Init: Initialize the Serializer with the output stream or response object  [dispid 1]
	void Init(TAutoVal par_output);

	//InitWithComposer: Initialize the Serializer with the output stream or response object and a composer  [dispid 2]
	void InitWithComposer(TAutoVal par_output, IMessageComposer* par_composer);

	//StartEnvelope: Start the Soap envelope in a Soap message  [dispid 3]
	void StartEnvelope(TAutoString par_Prefix, TAutoString par_enc_style_uri, TAutoString par_encoding);

	//EndEnvelope: Finish the Soap envelope  [dispid 4]
	void EndEnvelope();

	//StartHeader: Start Soap header  [dispid 5]
	void StartHeader(TAutoString par_enc_style_uri);

	//StartHeaderElement: Start a Soap header element  [dispid 6]
	void StartHeaderElement(TAutoString par_name, TAutoString par_ns_uri, int par_mustUnderstand, TAutoString par_actor_uri, TAutoString par_enc_style_uri, TAutoString par_Prefix);

	//EndHeaderElement: End a Soap header element  [dispid 7]
	void EndHeaderElement();

	//EndHeader: End the Soap header  [dispid 8]
	void EndHeader();

	//StartBody: Start the Soap body  [dispid 9]
	void StartBody(TAutoString par_enc_style_uri);

	//EndBody: End the Soap body  [dispid 10]
	void EndBody();

	//StartElement: Start an Element in the Soap Body  [dispid 11]
	void StartElement(TAutoString par_name, TAutoString par_ns_uri, TAutoString par_enc_style_uri, TAutoString par_Prefix);

	//EndElement: End an Element in the Soap Body  [dispid 12]
	void EndElement();

	//SoapAttribute: Define an Attribute for the current element  [dispid 13]
	void SoapAttribute(TAutoString par_name, TAutoString par_ns_uri, TAutoString par_value, TAutoString par_Prefix);

	//SoapNamespace: Define a Namespace for the current element  [dispid 14]
	void SoapNamespace(TAutoString par_Prefix, TAutoString par_ns_uri);

	//SoapDefaultNamespace: Define a default Namespace  [dispid 15]
	void SoapDefaultNamespace(TAutoString par_ns_uri);

	//WriteString: Write a string into the stream with escaping and encoding  [dispid 16]
	void WriteString(TAutoString par_string);

	//WriteBuffer: Write a buffer directly into the stream without escaping or encoding characters  [dispid 17]
	void WriteBuffer(long par_len, unsigned char* par_buffer);

	//StartFault: Start a Soap Fault  [dispid 18]
	void StartFault(TAutoString par_FaultCode, TAutoString par_FaultString, TAutoString par_FaultActor, TAutoString par_FaultCodeNS);

	//StartFaultDetail: Start the fault detail element  [dispid 19]
	void StartFaultDetail(TAutoString par_enc_style_uri);

	//EndFaultDetail: End the fault detail  [dispid 20]
	void EndFaultDetail();

	//EndFault: End a Soap Fault  [dispid 21]
	void EndFault();

	//Reset: Reset the serializer for reuse  [dispid 22]
	void Reset();

	//WriteXml: Write a CDATA section into the stream  [dispid 23]
	void WriteXml(TAutoString par_string);

	//GetPrefixForNamespace: Retrieves the prefix for existing namespace  [dispid 24]
	TAutoString GetPrefixForNamespace(TAutoString par_ns_string);

	//EndHrefedElement: End an Hrefed Element in the Soap message  [dispid 26]
	void EndHrefedElement();

	//StartHrefedElement: Start an Hrefed Element in the Soap message  [dispid 25]
	TAutoString StartHrefedElement(TAutoString par_name, TAutoString par_ns_uri, TAutoString par_enc_style_uri, TAutoString par_Prefix, enElementLocation par_location, TAutoString par_hrefidinput);

	//SoapFault: Indicates if a fault has already been written to the message  [dispid 1610743834]
	TBool SoapFault();

	//GetContextItem: Gets the value of a serialization context item  [dispid 1610743835]
	TAutoVal GetContextItem(TAutoString par_key);

	//SetContextItem: Sets the value of a serialization context item  [dispid 1610743836]
	void SetContextItem(TAutoString par_key, TAutoVal par_value);

	//AddAttachment: Adds an attachment to the message  [dispid 1610743837]
	void AddAttachment(IAttachment* par_att);

	//AddAttachmentAndReference: Adds an attachment to the message and adds a reference to the attachment to the last started element  [dispid 1610743838]
	void AddAttachmentAndReference(IAttachment* par_att);

	//Finished: Indicates that all message content, including attachments, has been serialized  [dispid 1610743839]
	void Finished();

	//Composer: Returns the composer used in the serializer  [dispid 1610743840]
	IMessageComposer* Composer();

	//CreateHRefId: Create ID for HREF'd element  [dispid 27]
	TAutoString CreateHRefId();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapServer
// ISoapServer Interface
// {7F017F93-9257-11D5-87EA-00B0D0BE6479}

#undef  INTERFACE
#define INTERFACE ISoapServer

DECLARE_INTERFACE_(ISoapServer, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISoapServer methods:
	STDMETHOD_(HRESULT, Init) (THIS_ BSTR par_WSDLFile, BSTR par_WSMLFile) PURE; // Loads the specified WSDL and WSML files
	STDMETHOD_(HRESULT, SoapInvoke) (THIS_ VARIANT par_Input, IUnknown* par_OutputStream, BSTR par_soapAction) PURE; // Invokes a COM method as specified in the incoming message
	STDMETHOD_(HRESULT, SoapInvokeEx) (THIS_ VARIANT par_Input, IUnknown* par_OutputStream, IUnknown* par_ServerObject, BSTR par_soapAction, BSTR par_ContentType) PURE; // Invokes a COM method as specified in the incoming message
	STDMETHOD_(HRESULT, Set_XmlVersion) (THIS_ BSTR ) PURE; // Set XML Version to use
};

typedef ISoapServer* LPSOAPSERVER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISoapServer  {7F017F93-9257-11D5-87EA-00B0D0BE6479}
// ISoapServer Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISoapServerProxy : public TAutoProxy
{
public:
	TISoapServerProxy() : TAutoProxy(0x0) {}

	//Init: Loads the specified WSDL and WSML files  [dispid 1]
	void Init(TAutoString par_WSDLFile, TAutoString par_WSMLFile);

	//SoapInvoke: Invokes a COM method as specified in the incoming message  [dispid 2]
	void SoapInvoke(TAutoVal par_Input, IUnknown* par_OutputStream, TAutoString par_soapAction);

	//SoapInvokeEx: Invokes a COM method as specified in the incoming message  [dispid 3]
	void SoapInvokeEx(TAutoVal par_Input, IUnknown* par_OutputStream, IUnknown* par_ServerObject, TAutoString par_soapAction, TAutoString par_ContentType);

	//XmlVersion: Set XML Version to use  [dispid 4]
	void XmlVersion(TAutoString arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapClient
// ISoapClient Interface
// {7F017F92-9257-11D5-87EA-00B0D0BE6479}

#undef  INTERFACE
#define INTERFACE ISoapClient

DECLARE_INTERFACE_(ISoapClient, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//ISoapClient methods:
	STDMETHOD_(HRESULT, MSSoapInit) (THIS_ BSTR par_WSDLFile, BSTR par_ServiceName, BSTR par_Port, BSTR par_WSMLFile) PURE; // Loads the specified WSDL file
	STDMETHOD_(HRESULT, Get_FaultCode) (THIS_ BSTR* par_FaultCode) PURE; // Soap defined fault code
	STDMETHOD_(HRESULT, Get_FaultString) (THIS_ BSTR* par_FaultString) PURE; // Brief explanation of the Soap fault
	STDMETHOD_(HRESULT, Get_FaultActor) (THIS_ BSTR* par_Actor) PURE; // Information about the source of the fault
	STDMETHOD_(HRESULT, Get_Detail) (THIS_ BSTR* par_Detail) PURE; // Detailed fault information
	STDMETHOD_(HRESULT, Get_ClientProperty) (THIS_ BSTR par_PropertyName, VARIANT* par_PropertyValue) PURE; // Sets the specified property on the client
	STDMETHOD_(HRESULT, SetRef_HeaderHandler) (THIS_ IDispatch* ) PURE; // Sets the headerhandler for the next calls against this client instance
	STDMETHOD_(HRESULT, Set_ClientProperty) (THIS_ BSTR par_PropertyName, VARIANT par_PropertyValue) PURE; // Sets the specified property on the client
	STDMETHOD_(HRESULT, Get_ConnectorProperty) (THIS_ BSTR par_PropertyName, VARIANT* par_PropertyValue) PURE; // Passes the specified property to the SoapConnector
	STDMETHOD_(HRESULT, Set_ConnectorProperty) (THIS_ BSTR par_PropertyName, VARIANT par_PropertyValue) PURE; // Passes the specified property to the SoapConnector
	STDMETHOD_(HRESULT, MSSoapInit2) (THIS_ VARIANT par_WSDLFile, VARIANT par_WSMLFile, BSTR par_ServiceName, BSTR par_Port, BSTR par_Namespace) PURE; // Loads the specified WSDL file
	STDMETHOD_(HRESULT, Get_FaultCodeNamespace) (THIS_ BSTR* par_faultcodeNamespace) PURE; // Fault namespace information
	STDMETHOD_(HRESULT, SetRef_ClientProperty) (THIS_ BSTR par_PropertyName, VARIANT par_PropertyValue) PURE; // Sets the specified property on the client
};

typedef ISoapClient* LPSOAPCLIENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISoapClient  {7F017F92-9257-11D5-87EA-00B0D0BE6479}
// ISoapClient Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISoapClientProxy : public TSoapAutoProxy
{
public:
	TISoapClientProxy() : TSoapAutoProxy() {}

	//MSSoapInit: Loads the specified WSDL file  [dispid 1]
  void MSSoapInit(TAutoString par_WSDLFile, TAutoString par_ServiceName, TAutoString par_Port, TAutoString par_WSMLFile) ;

	//FaultCode: Soap defined fault code  [dispid 2]
	TAutoString FaultCode();

	//FaultString: Brief explanation of the Soap fault  [dispid 3]
	TAutoString FaultString();

	//FaultActor: Information about the source of the fault  [dispid 4]
	TAutoString FaultActor();

	//Detail: Detailed fault information  [dispid 5]
	TAutoString Detail();

	//ClientProperty: Sets the specified property on the client  [dispid 1610743813]
	TAutoVal ClientProperty(TAutoString par_PropertyName);

	//HeaderHandler: Sets the headerhandler for the next calls against this client instance  [dispid 1610743814]
	void HeaderHandler(IDispatch* arg0);

	//ClientProperty: Sets the specified property on the client  [dispid 1610743813]
	void ClientProperty(TAutoString par_PropertyName, TAutoVal arg1);

	//ConnectorProperty: Passes the specified property to the SoapConnector  [dispid 1610743816]
	TAutoVal ConnectorProperty(TAutoString par_PropertyName);

	//ConnectorProperty: Passes the specified property to the SoapConnector  [dispid 1610743816]
	void ConnectorProperty(TAutoString par_PropertyName, TAutoVal arg1);

	//MSSoapInit2: Loads the specified WSDL file  [dispid 7]
	void MSSoapInit2(TAutoVal par_WSDLFile, TAutoVal par_WSMLFile, TAutoString par_ServiceName, TAutoString par_Port, TAutoString par_Namespace);

	//FaultCodeNamespace: Fault namespace information  [dispid 6]
	TAutoString FaultCodeNamespace();

};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWSDLReader
// IWSDLReader Interface
// {DE523FD4-AFB8-4643-BA90-9DEB3C7FB4A3}

#undef  INTERFACE
#define INTERFACE IWSDLReader

DECLARE_INTERFACE_(IWSDLReader, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IWSDLReader methods:
	STDMETHOD_(HRESULT, Load) (THIS_ BSTR par_WSDLFile, BSTR par_WSMLFile) PURE; // Load a WSDL (&WSML) file into the reader
	STDMETHOD_(HRESULT, Load2) (THIS_ VARIANT par_WSDLFile, VARIANT par_WSMLFile, BSTR par_StartingNamespace) PURE; // Load a WSDL (&WSML) from variants into the reader
	STDMETHOD_(HRESULT, GetSoapServices) (THIS_ IEnumWSDLService** par_IWSDLServiceEnum) PURE; // Get the list of Services in the WSDL file
	STDMETHOD_(HRESULT, ParseRequest) (THIS_ ISoapReader* par_ISoapReader, IWSDLPort** par_IWSDLPort, IWSDLOperation** par_IWSDLOperation) PURE; // Parse a Soap message
	STDMETHOD_(HRESULT, SetProperty) (THIS_ BSTR par_PropertyName, VARIANT par_PropValue) PURE; // setProperty -> set's internal properties of the WSDLReader
	STDMETHOD_(HRESULT, Get_TypeFactory) (THIS_ ISoapTypeMapperFactory** par_Factory) PURE; // Returns the typefactory that is used by the WSDLReader
};

typedef IWSDLReader* LPWSDLREADER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapTypeMapperFactory
// ITypeFactoryInterface
// {FCED9F15-D0A7-4380-87E6-992381ACD213}

#undef  INTERFACE
#define INTERFACE ISoapTypeMapperFactory

DECLARE_INTERFACE_(ISoapTypeMapperFactory, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISoapTypeMapperFactory methods:
	STDMETHOD_(HRESULT, AddSchema) (THIS_ IXMLDOMNode* par_SchemaNode) PURE; // method addSchema
	STDMETHOD_(HRESULT, GetElementMapperByName) (THIS_ BSTR par_ElementName, BSTR par_ElementNamespace, ISoapTypeMapper** par_SoapTypeMapper) PURE; // Finds a type mapper for the specified element
	STDMETHOD_(HRESULT, GetTypeMapperByName) (THIS_ BSTR par_TypeName, BSTR par_TypeNamespace, ISoapTypeMapper** par_SoapTypeMapper) PURE; // Finds a typemapper for the supplied type
	STDMETHOD_(HRESULT, GetElementMapper) (THIS_ IXMLDOMNode* par_ElementNode, ISoapTypeMapper** par_SoapTypeMapper) PURE; // method getElementMapper
	STDMETHOD_(HRESULT, GetTypeMapper) (THIS_ IXMLDOMNode* par_TypeNode, ISoapTypeMapper** par_SoapTypeMapper) PURE; // method getTypeMapper
	STDMETHOD_(HRESULT, AddType) (THIS_ BSTR par_TypeName, BSTR par_TypeNamespace, BSTR par_ProgID, BSTR par_IID) PURE; // Adds a new typemapper to the typemaper factory
	STDMETHOD_(HRESULT, AddElement) (THIS_ BSTR par_ElementName, BSTR par_ElementNamespace, BSTR par_ProgID, BSTR par_IID) PURE; // Adds a new element mapper to the typemaper factory
	STDMETHOD_(HRESULT, GetMapper) (THIS_ enXSDType par_xsdType, IXMLDOMNode* par_SchemaNode, ISoapTypeMapper** par_SoapTypeMapper) PURE; // Retrieves the typemapper specified by the mapperID
	STDMETHOD_(HRESULT, AddCustomMapper) (THIS_ BSTR par_ProgID, IXMLDOMNode* par_WSMLNode) PURE; // Adds a new custom mapper based on the WSML node
	STDMETHOD_(HRESULT, GetDefinitionsNode) (THIS_ BSTR par_BaseName, BSTR par_Namespace, VARIANT_BOOL par_LookForElement, IXMLDOMNode** par_SchemaNode) PURE; // Returns the definitons node in the schema for a given basename
};

typedef ISoapTypeMapperFactory* LPSOAPTYPEMAPPERFACTORY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISoapTypeMapperFactory  {FCED9F15-D0A7-4380-87E6-992381ACD213}
// ITypeFactoryInterface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISoapTypeMapperFactoryProxy : public TAutoProxy
{
public:
	TISoapTypeMapperFactoryProxy() : TAutoProxy(0x0) {}

	//AddSchema: method addSchema  [dispid 6]
	void AddSchema(IXMLDOMNode* par_SchemaNode);

	//GetElementMapperByName: Finds a type mapper for the specified element  [dispid 1]
	void GetElementMapperByName(TISoapTypeMapperProxy& Obj, TAutoString par_ElementName, TAutoString par_ElementNamespace);

	//GetTypeMapperByName: Finds a typemapper for the supplied type  [dispid 2]
	void GetTypeMapperByName(TISoapTypeMapperProxy& Obj, TAutoString par_TypeName, TAutoString par_TypeNamespace);

	//GetElementMapper: method getElementMapper  [dispid 7]
	void GetElementMapper(TISoapTypeMapperProxy& Obj, IXMLDOMNode* par_ElementNode);

	//GetTypeMapper: method getTypeMapper  [dispid 8]
	void GetTypeMapper(TISoapTypeMapperProxy& Obj, IXMLDOMNode* par_TypeNode);

	//AddType: Adds a new typemapper to the typemaper factory  [dispid 4]
	void AddType(TAutoString par_TypeName, TAutoString par_TypeNamespace, TAutoString par_ProgID, TAutoString par_IID);

	//AddElement: Adds a new element mapper to the typemaper factory  [dispid 5]
	void AddElement(TAutoString par_ElementName, TAutoString par_ElementNamespace, TAutoString par_ProgID, TAutoString par_IID);

	//GetMapper: Retrieves the typemapper specified by the mapperID  [dispid 3]
	void GetMapper(TISoapTypeMapperProxy& Obj, enXSDType par_xsdType, IXMLDOMNode* par_SchemaNode);

	//AddCustomMapper: Adds a new custom mapper based on the WSML node  [dispid 9]
	void AddCustomMapper(TAutoString par_ProgID, IXMLDOMNode* par_WSMLNode);

	//GetDefinitionsNode: Returns the definitons node in the schema for a given basename  [dispid 10]
	void GetDefinitionsNode(TIXMLDOMNodeProxy& Obj, TAutoString par_BaseName, TAutoString par_Namespace, TBool par_LookForElement);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapTypeMapper
// ISoapTypeMapper
// {29D3F736-1C25-44EE-9CEE-3F52F226BA8A}

#undef  INTERFACE
#define INTERFACE ISoapTypeMapper

DECLARE_INTERFACE_(ISoapTypeMapper, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISoapTypeMapper methods:
	STDMETHOD_(HRESULT, Init) (THIS_ ISoapTypeMapperFactory* par_Factory, IXMLDOMNode* par_Schema, IXMLDOMNode* par_WSMLNode, enXSDType par_xsdType) PURE; // Initializes the soap type mapper
	STDMETHOD_(HRESULT, Read) (THIS_ ISoapReader* par_soapreader, IXMLDOMNode* par_Node, BSTR par_encoding, enEncodingStyle par_encodingMode, long par_flags, VARIANT* par_var) PURE; // Reads a variant to be encoded
	STDMETHOD_(HRESULT, Write) (THIS_ ISoapSerializer* par_ISoapSerializer, BSTR par_encoding, enEncodingStyle par_encodingMode, long par_flags, VARIANT* par_var) PURE; // Writes the type value to the serializer
	STDMETHOD_(HRESULT, VarType) (THIS_ long* par_Type) PURE; // Return the variant type that is expected
	STDMETHOD_(HRESULT, Iid) (THIS_ BSTR* par_IIDAsString) PURE; // Return the interface IID for custom objects
	STDMETHOD_(HRESULT, SchemaNode) (THIS_ IXMLDOMNode** par_SchemaNode) PURE; // Return the defining schema node if any
	STDMETHOD_(HRESULT, XsdType) (THIS_ enXSDType* par_xsdType) PURE; // Return the xsdtype that this mapper supports
};

typedef ISoapTypeMapper* LPSOAPTYPEMAPPER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISoapTypeMapper  {29D3F736-1C25-44EE-9CEE-3F52F226BA8A}
// ISoapTypeMapper [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISoapTypeMapperProxy : public TAutoProxy
{
public:
	TISoapTypeMapperProxy() : TAutoProxy(0x0) {}

	//Init: Initializes the soap type mapper  [dispid 1]
	void Init(ISoapTypeMapperFactory* par_Factory, IXMLDOMNode* par_Schema, IXMLDOMNode* par_WSMLNode, enXSDType par_xsdType);

	//Read: Reads a variant to be encoded  [dispid 2]
	TAutoVal Read(ISoapReader* par_soapreader, IXMLDOMNode* par_Node, TAutoString par_encoding, enEncodingStyle par_encodingMode, long par_flags);

	//Write: Writes the type value to the serializer  [dispid 3]
	void Write(ISoapSerializer* par_ISoapSerializer, TAutoString par_encoding, enEncodingStyle par_encodingMode, long par_flags, TAutoVal* par_var);

	//VarType: Return the variant type that is expected  [dispid 4]
	long VarType();

	//Iid: Return the interface IID for custom objects  [dispid 5]
	TAutoString Iid();

	//SchemaNode: Return the defining schema node if any  [dispid 6]
	void SchemaNode(TIXMLDOMNodeProxy& Obj);

	//XsdType: Return the xsdtype that this mapper supports  [dispid 7]
	enXSDType XsdType();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapConnector
// ISoapConnector Interface
// {0AF40C4E-9257-11D5-87EA-00B0D0BE6479}

#undef  INTERFACE
#define INTERFACE ISoapConnector

DECLARE_INTERFACE_(ISoapConnector, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISoapConnector methods:
	STDMETHOD_(HRESULT, Get_InputStream) (THIS_ IStream** par_Input) PURE; // An IStream compatible stream that provides data to be sent out
	STDMETHOD_(HRESULT, Get_OutputStream) (THIS_ IStream** par_output) PURE; // An IStream compatible stream that accepts returned data.
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; // Used to get connection specific properties.
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; // Used to get connection specific properties.
	STDMETHOD_(HRESULT, ConnectWSDL) (THIS_ IWSDLPort* par_Port) PURE; // Initiates a connection to the remote host.
	STDMETHOD_(HRESULT, BeginMessageWSDL) (THIS_ IWSDLOperation* par_operation) PURE; // Starts a Soap message
	STDMETHOD_(HRESULT, EndMessage) (THIS ) PURE; // Marks the end of a Soap Message and initiates the send.
	STDMETHOD_(HRESULT, Reset) (THIS ) PURE; // Sets up the connection to be used again.
	STDMETHOD_(HRESULT, Connect) (THIS ) PURE; // Initiates a connection to the remote host.
	STDMETHOD_(HRESULT, BeginMessage) (THIS ) PURE; // Starts a Soap message
};

typedef ISoapConnector* LPSOAPCONNECTOR;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISoapConnector  {0AF40C4E-9257-11D5-87EA-00B0D0BE6479}
// ISoapConnector Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISoapConnectorProxy : public TSoapAutoProxy
{
public:
	TISoapConnectorProxy() : TSoapAutoProxy() {}

	//InputStream: An IStream compatible stream that provides data to be sent out  [dispid 1]
	IStream* InputStream();

	//OutputStream: An IStream compatible stream that accepts returned data.  [dispid 2]
	IStream* OutputStream();

	//Property: Used to get connection specific properties.  [dispid 3]
	TAutoVal Property(TAutoString par_name);

	//Property: Used to get connection specific properties.  [dispid 3]
	void Property(TAutoString par_name, TAutoVal arg1);

	//ConnectWSDL: Initiates a connection to the remote host.  [dispid 4]
	void ConnectWSDL(IWSDLPort* par_Port);

	//BeginMessageWSDL: Starts a Soap message  [dispid 6]
	void BeginMessageWSDL(IWSDLOperation* par_operation);

	//EndMessage: Marks the end of a Soap Message and initiates the send.  [dispid 7]
	void EndMessage();

	//Reset: Sets up the connection to be used again.  [dispid 5]
	void Reset();

	//Connect: Initiates a connection to the remote host.  [dispid 8]
	void Connect();

	//BeginMessage: Starts a Soap message  [dispid 9]
	void BeginMessage();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapConnectorFactory
// ISoapConnectorFactory Interface
// {0AF40C50-9257-11D5-87EA-00B0D0BE6479}

#undef  INTERFACE
#define INTERFACE ISoapConnectorFactory

DECLARE_INTERFACE_(ISoapConnectorFactory, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISoapConnectorFactory methods:
	STDMETHOD_(HRESULT, CreatePortConnector) (THIS_ IWSDLPort* par_Port, ISoapConnector** par_connector) PURE; // method CreatePortConnector
};

typedef ISoapConnectorFactory* LPSOAPCONNECTORFACTORY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISoapConnectorFactory  {0AF40C50-9257-11D5-87EA-00B0D0BE6479}
// ISoapConnectorFactory Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISoapConnectorFactoryProxy : public TAutoProxy
{
public:
	TISoapConnectorFactoryProxy() : TAutoProxy(0x0) {}

	//CreatePortConnector: method CreatePortConnector  [dispid 1]
	void CreatePortConnector(TISoapConnectorProxy& Obj, IWSDLPort* par_Port);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IComposerDestination
// IComposerDestination interface
// {8E62C4B1-EE0C-48FB-9161-3EE041A03153}

#undef  INTERFACE
#define INTERFACE IComposerDestination

DECLARE_INTERFACE_(IComposerDestination, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IComposerDestination methods:
	STDMETHOD_(HRESULT, Set_TotalSize) (THIS_ long ) PURE; 
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; 
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; 
	STDMETHOD_(HRESULT, BeginSending) (THIS_ ISequentialStream** par_stream, ComposerDestinationFlags* par_flags) PURE; 
	STDMETHOD_(HRESULT, EndSending) (THIS ) PURE; 
};

typedef IComposerDestination* LPCOMPOSERDESTINATION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IEnumWSDLService
// IEnumWSDLService Interface
// {104F6816-093E-41D7-A68B-8E1CC408B279}

#undef  INTERFACE
#define INTERFACE IEnumWSDLService

DECLARE_INTERFACE_(IEnumWSDLService, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IEnumWSDLService methods:
	STDMETHOD_(HRESULT, Next) (THIS_ long par_celt, IWSDLService** par_IWSDLService, long* par_Fetched) PURE; // Get the next service on the list
	STDMETHOD_(HRESULT, Skip) (THIS_ long par_celt) PURE; // Skip the specified number of services
	STDMETHOD_(HRESULT, Reset) (THIS ) PURE; // Go back to the begining of the list
	STDMETHOD_(HRESULT, Clone) (THIS_ IEnumWSDLService** par_enum) PURE; // Clone the list
	STDMETHOD_(HRESULT, Find) (THIS_ BSTR par_ServiceToFind, IWSDLService** par_WSDLService) PURE; // Find the specified service
};

typedef IEnumWSDLService* LPENUMWSDLSERVICE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IParserSource
// IComposerSource interface
// {282C694F-D69F-4044-B076-6F4AC1748A90}

#undef  INTERFACE
#define INTERFACE IParserSource

DECLARE_INTERFACE_(IParserSource, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IParserSource methods:
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; 
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; 
	STDMETHOD_(HRESULT, BeginReceiving) (THIS_ ISequentialStream** par_stream) PURE; 
	STDMETHOD_(HRESULT, EndReceiving) (THIS ) PURE; 
};

typedef IParserSource* LPPARSERSOURCE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapMapper
// ISoapMapper Interface
// {C1E6061A-F8DC-4CA8-A952-FAF7419F1029}

#undef  INTERFACE
#define INTERFACE ISoapMapper

DECLARE_INTERFACE_(ISoapMapper, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISoapMapper methods:
	STDMETHOD_(HRESULT, Get_ElementName) (THIS_ BSTR* par_ElementName) PURE; // ElementName property
	STDMETHOD_(HRESULT, Get_PartName) (THIS_ BSTR* par_PartName) PURE; // PartName property
	STDMETHOD_(HRESULT, Get_ElementType) (THIS_ BSTR* par_ElementType) PURE; // ElementType property
	STDMETHOD_(HRESULT, Get_IsInput) (THIS_ smIsInputEnum* par_Input) PURE; // IsInput property
	STDMETHOD_(HRESULT, Get_ComValue) (THIS_ VARIANT* par_VarOut) PURE; // ComValue property
	STDMETHOD_(HRESULT, Set_ComValue) (THIS_ VARIANT par_VarOut) PURE; // ComValue property
	STDMETHOD_(HRESULT, Get_CallIndex) (THIS_ long* par_CallIndex) PURE; // dispatch callindex property - serverside WSML information
	STDMETHOD_(HRESULT, Get_ParameterOrder) (THIS_ long* par_paraOrder) PURE; // ParameterOrder property
	STDMETHOD_(HRESULT, Get_XmlNamespace) (THIS_ BSTR* par_xmlNameSpace) PURE; // namespace property
	STDMETHOD_(HRESULT, Get_VariantType) (THIS_ long* par_Type) PURE; // variant type property
	STDMETHOD_(HRESULT, Get_XsdType) (THIS_ enXSDType* par_Type) PURE; // XSD type property
	STDMETHOD_(HRESULT, Get_SpecialType) (THIS_ enSpecialType* par_SpecialType) PURE; // SpecialType property indicates a normal mapper or an attachment type
	STDMETHOD_(HRESULT, Save) (THIS_ ISoapSerializer* par_ISoapSerializer, BSTR par_encoding, enEncodingStyle par_enSaveStyle, BSTR par_MessageNamespace, long par_flags) PURE; // method Save
	STDMETHOD_(HRESULT, Load) (THIS_ ISoapReader* par_ISoapReader, IXMLDOMNode* par_Node, BSTR par_encoding, enEncodingStyle par_enStyle, BSTR par_MessageNamespace, long par_flags) PURE; // method Load
	STDMETHOD_(HRESULT, Get_SchemaNode) (THIS_ IXMLDOMNode** par_TypeNode) PURE; // schema type node
	STDMETHOD_(HRESULT, Get_SchemaNamespace) (THIS_ BSTR* par_Namespace) PURE; // schema type namespace property
	STDMETHOD_(HRESULT, Set_PartName) (THIS_ BSTR par_PartName) PURE; // PartName property
	STDMETHOD_(HRESULT, Set_SpecialType) (THIS_ enSpecialType par_SpecialType) PURE; // SpecialType property indicates a normal mapper or an attachment type
	STDMETHOD_(HRESULT, Set_CallIndex) (THIS_ long par_CallIndex) PURE; // dispatch callindex property - serverside WSML information
};

typedef ISoapMapper* LPSOAPMAPPER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWSDLOperation
// IWSDLOperation Interface
// {A0B762A7-9F3E-48D8-B333-770E5FA72A1E}

#undef  INTERFACE
#define INTERFACE IWSDLOperation

DECLARE_INTERFACE_(IWSDLOperation, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IWSDLOperation methods:
	STDMETHOD_(HRESULT, Get_Documentation) (THIS_ BSTR* par_Documentation) PURE; // operation documentation property
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* par_OperationName) PURE; // operation name property
	STDMETHOD_(HRESULT, Get_SoapAction) (THIS_ BSTR* par_soapAction) PURE; // operation soapaction property
	STDMETHOD_(HRESULT, Get_ObjectProgId) (THIS_ BSTR* par_ObjectProgId) PURE; // Object ProgID property
	STDMETHOD_(HRESULT, Get_ObjectMethod) (THIS_ BSTR* par_ObjectMethod) PURE; // Object methodname property
	STDMETHOD_(HRESULT, Get_InputMessage) (THIS_ IWSDLMessage** par_InputMessage) PURE; // Input message object
	STDMETHOD_(HRESULT, Get_OutputMessage) (THIS_ IWSDLMessage** par_OutputMessage) PURE; // Output message object
	STDMETHOD_(HRESULT, Get_PreferredEncoding) (THIS_ BSTR* par_preferredEncoding) PURE; // property preferredEncoding - indicates the XML encoding used by default for client and server
	STDMETHOD_(HRESULT, GetOperationParts) (THIS_ IEnumSoapMappers** par_IEnumSoapMappers) PURE; // Get a list of operation parts
	STDMETHOD_(HRESULT, ExecuteOperation) (THIS_ ISoapReader* par_ISoapReader, ISoapSerializer* par_ISoapSerializer) PURE; // Invoke this operation
	STDMETHOD_(HRESULT, ExecuteOperationEx) (THIS_ ISoapReader* par_ISoapReader, ISoapSerializer* par_ISoapSerializer, IUnknown* par_ServerObject) PURE; // Invoke this operation
	STDMETHOD_(HRESULT, Save) (THIS_ ISoapSerializer* par_ISoapSerializer, VARIANT_BOOL par_Input) PURE; // Write the Soap Mapper information to the SoapSerializer
	STDMETHOD_(HRESULT, Load) (THIS_ ISoapReader* par_ISoapReader, VARIANT_BOOL par_Input) PURE; // Loads an incoming Soap message
	STDMETHOD_(unsigned short*, GetNameRef) (THIS ) PURE; // operation name (reference)
	STDMETHOD_(HRESULT, Get_type) (THIS_ enOperationType* par_Type) PURE; // operation type property
};

typedef IWSDLOperation* LPWSDLOPERATION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWSDLPort
// IWSDLPort Interface
// {4D40B730-F5FA-472C-8819-DDCD183BD0DE}

#undef  INTERFACE
#define INTERFACE IWSDLPort

DECLARE_INTERFACE_(IWSDLPort, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IWSDLPort methods:
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* par_PortName) PURE; // The name of the port
	STDMETHOD_(HRESULT, Get_Address) (THIS_ BSTR* par_PortAddress) PURE; // The Port address field
	STDMETHOD_(HRESULT, Get_BindStyle) (THIS_ BSTR* par_BindStyle) PURE; // The port bindingstyle
	STDMETHOD_(HRESULT, Get_Transport) (THIS_ BSTR* par_Transport) PURE; // The port transport
	STDMETHOD_(HRESULT, Get_Documentation) (THIS_ BSTR* par_Documentation) PURE; // port documentation property
	STDMETHOD_(HRESULT, GetSoapOperations) (THIS_ IEnumWSDLOperations** par_IWSDLOperations) PURE; // method GetSoapOperations
};

typedef IWSDLPort* LPWSDLPORT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWSDLService
// IWSDLService Interface
// {9B5D8D63-EA54-41F6-9F12-F77A13111EC6}

#undef  INTERFACE
#define INTERFACE IWSDLService

DECLARE_INTERFACE_(IWSDLService, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IWSDLService methods:
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* par_ServiceName) PURE; // service name property
	STDMETHOD_(HRESULT, Get_Documentation) (THIS_ BSTR* par_Documentation) PURE; // service documentation property
	STDMETHOD_(HRESULT, GetSoapPorts) (THIS_ IEnumWSDLPorts** par_IWSDLPorts) PURE; // method GetSoapPorts
};

typedef IWSDLService* LPWSDLSERVICE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IDataEncoder
// IDataEncoder interface
// {663EB158-8D95-4657-AE32-B7C60DE6122F}

#undef  INTERFACE
#define INTERFACE IDataEncoder

DECLARE_INTERFACE_(IDataEncoder, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IDataEncoder methods:
	STDMETHOD_(HRESULT, Get_Encoding) (THIS_ BSTR* par_encoding) PURE; 
	STDMETHOD_(HRESULT, SizeToEncode) (THIS_ void* par_From, unsigned long par_FromSize, unsigned long* par_To) PURE; 
	STDMETHOD_(HRESULT, SizeToDecode) (THIS_ void* par_From, unsigned long par_FromSize, unsigned long* par_To) PURE; 
	STDMETHOD_(HRESULT, Encode) (THIS_ void* par_From, unsigned long par_FromSize, void* par_To, unsigned long* par_ToSize) PURE; 
	STDMETHOD_(HRESULT, Decode) (THIS_ void* par_From, unsigned long par_FromSize, void* par_To, unsigned long* par_ToSize) PURE; 
	STDMETHOD_(HRESULT, SizeToEncodeStream) (THIS_ IStream* par_From, unsigned long* par_To) PURE; 
	STDMETHOD_(HRESULT, SizeToDecodeStream) (THIS_ IStream* par_From, unsigned long* par_To) PURE; 
	STDMETHOD_(HRESULT, EncodeStream) (THIS_ IStream* par_Form, IStream* par_To) PURE; 
	STDMETHOD_(HRESULT, DecodeStream) (THIS_ IStream* par_From, IStream* par_To) PURE; 
};

typedef IDataEncoder* LPDATAENCODER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IDataEncoder  {663EB158-8D95-4657-AE32-B7C60DE6122F}
// IDataEncoder interface [flags: TYPEFLAG_FDUAL ]
class _PWCLASS TIDataEncoderProxy : public TAutoProxy
{
public:
	TIDataEncoderProxy() : TAutoProxy(0x0) {}

	//Encoding:   [dispid 1610678272]
	TAutoString Encoding();

	//SizeToEncode:   [dispid 1610678273]
	void SizeToEncode(void* par_From, unsigned long par_FromSize, unsigned long* par_To);

	//SizeToDecode:   [dispid 1610678274]
	void SizeToDecode(void* par_From, unsigned long par_FromSize, unsigned long* par_To);

	//Encode:   [dispid 1610678275]
	void Encode(void* par_From, unsigned long par_FromSize, void* par_To, unsigned long* par_ToSize);

	//Decode:   [dispid 1610678276]
	void Decode(void* par_From, unsigned long par_FromSize, void* par_To, unsigned long* par_ToSize);

	//SizeToEncodeStream:   [dispid 1610678277]
	void SizeToEncodeStream(IStream* par_From, unsigned long* par_To);

	//SizeToDecodeStream:   [dispid 1610678278]
	void SizeToDecodeStream(IStream* par_From, unsigned long* par_To);

	//EncodeStream:   [dispid 1610678279]
	void EncodeStream(IStream* par_Form, IStream* par_To);

	//DecodeStream:   [dispid 1610678280]
	void DecodeStream(IStream* par_From, IStream* par_To);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IReceivedAttachment
// IReceivedAttachment interface
// {C0C9F1C0-0039-427B-8ACC-AD172FE557A8}

#undef  INTERFACE
#define INTERFACE IReceivedAttachment

DECLARE_INTERFACE_(IReceivedAttachment, IAttachment)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IAttachment methods:
	STDMETHOD_(HRESULT, Get_Property) (THIS_ BSTR par_name, VARIANT* par_value) PURE; // Attachment property
	STDMETHOD_(HRESULT, Set_Property) (THIS_ BSTR par_name, VARIANT par_value) PURE; // Attachment property
#endif
	//IReceivedAttachment methods:
	STDMETHOD_(HRESULT, SaveToFile) (THIS_ BSTR par_name, VARIANT_BOOL par_override) PURE; // Saves the attachment content to the specified file.
	STDMETHOD_(HRESULT, GetAsByteArray) (THIS_ VARIANT* par_array) PURE; // Copies attachment content to an array of bytes
	STDMETHOD_(HRESULT, GetAsString) (THIS_ BSTR par_ContentCharacterSet, BSTR* par_string) PURE; // Copies attachment content to a string
};

typedef IReceivedAttachment* LPRECEIVEDATTACHMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IReceivedAttachment  {C0C9F1C0-0039-427B-8ACC-AD172FE557A8}
// IReceivedAttachment interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIReceivedAttachmentProxy : public TAutoProxy
{
public:
	TIReceivedAttachmentProxy() : TAutoProxy(0x0) {}

	//Property: Attachment property  [dispid 1610743808]
	TAutoVal Property(TAutoString par_name);

	//Property: Attachment property  [dispid 1610743808]
	void Property(TAutoString par_name, TAutoVal arg1);

	//SaveToFile: Saves the attachment content to the specified file.  [dispid 1610809344]
	void SaveToFile(TAutoString par_name, TBool par_override);

	//GetAsByteArray: Copies attachment content to an array of bytes  [dispid 1610809345]
	TAutoVal GetAsByteArray();

	//GetAsString: Copies attachment content to a string  [dispid 1610809346]
	TAutoString GetAsString(TAutoString par_ContentCharacterSet);
};

#endif

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMNode
// Core DOM node interface
// {2933BF80-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMNode

DECLARE_INTERFACE_(IXMLDOMNode, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
};

typedef IXMLDOMNode* LPXMLDOMNODE;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMDocument
// {2933BF81-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMDocument

DECLARE_INTERFACE_(IXMLDOMDocument, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMDocument methods:
	STDMETHOD_(HRESULT, Get_doctype) (THIS_ IXMLDOMDocumentType** documentType) PURE; // node corresponding to the DOCTYPE
	STDMETHOD_(HRESULT, Get_implementation) (THIS_ IXMLDOMImplementation** impl) PURE; // info on this DOM implementation
	STDMETHOD_(HRESULT, Get_documentElement) (THIS_ IXMLDOMElement** DOMElement) PURE; // the root of the tree
	STDMETHOD_(HRESULT, SetRef_documentElement) (THIS_ IXMLDOMElement* DOMElement) PURE; // the root of the tree
	STDMETHOD_(HRESULT, createElement) (THIS_ BSTR tagName, IXMLDOMElement** element) PURE; // create an Element node
	STDMETHOD_(HRESULT, createDocumentFragment) (THIS_ IXMLDOMDocumentFragment** docFrag) PURE; // create a DocumentFragment node
	STDMETHOD_(HRESULT, createTextNode) (THIS_ BSTR data, IXMLDOMText** text) PURE; // create a text node
	STDMETHOD_(HRESULT, createComment) (THIS_ BSTR data, IXMLDOMComment** comment) PURE; // create a comment node
	STDMETHOD_(HRESULT, createCDATASection) (THIS_ BSTR data, IXMLDOMCDATASection** cdata) PURE; // create a CDATA section node
	STDMETHOD_(HRESULT, createProcessingInstruction) (THIS_ BSTR target, BSTR data, IXMLDOMProcessingInstruction** pi) PURE; // create a processing instruction node
	STDMETHOD_(HRESULT, createAttribute) (THIS_ BSTR name, IXMLDOMAttribute** attribute) PURE; // create an attribute node
	STDMETHOD_(HRESULT, createEntityReference) (THIS_ BSTR name, IXMLDOMEntityReference** entityRef) PURE; // create an entity reference node
	STDMETHOD_(HRESULT, getElementsByTagName) (THIS_ BSTR tagName, IXMLDOMNodeList** resultList) PURE; // build a list of elements by name
	STDMETHOD_(HRESULT, createNode) (THIS_ VARIANT type, BSTR name, BSTR namespaceURI, IXMLDOMNode** node) PURE; // create a node of the specified node type and name
	STDMETHOD_(HRESULT, nodeFromID) (THIS_ BSTR idString, IXMLDOMNode** node) PURE; // retrieve node from it's ID
	STDMETHOD_(HRESULT, load) (THIS_ VARIANT xmlSource, VARIANT_BOOL* isSuccessful) PURE; // load document from the specified XML source
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* value) PURE; // get the state of the XML document
	STDMETHOD_(HRESULT, Get_parseError) (THIS_ IXMLDOMParseError** errorObj) PURE; // get the last parser error
	STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* urlString) PURE; // get the URL for the loaded XML document
	STDMETHOD_(HRESULT, Get_async) (THIS_ VARIANT_BOOL* isAsync) PURE; // flag for asynchronous download
	STDMETHOD_(HRESULT, Set_async) (THIS_ VARIANT_BOOL isAsync) PURE; // flag for asynchronous download
	STDMETHOD_(HRESULT, abort) (THIS ) PURE; // abort an asynchronous download
	STDMETHOD_(HRESULT, loadXML) (THIS_ BSTR bstrXML, VARIANT_BOOL* isSuccessful) PURE; // load the document from a string
	STDMETHOD_(HRESULT, save) (THIS_ VARIANT destination) PURE; // save the document to a specified destination
	STDMETHOD_(HRESULT, Get_validateOnParse) (THIS_ VARIANT_BOOL* isValidating) PURE; // indicates whether the parser performs validation
	STDMETHOD_(HRESULT, Set_validateOnParse) (THIS_ VARIANT_BOOL isValidating) PURE; // indicates whether the parser performs validation
	STDMETHOD_(HRESULT, Get_resolveExternals) (THIS_ VARIANT_BOOL* isResolving) PURE; // indicates whether the parser resolves references to external DTD/Entities/Schema
	STDMETHOD_(HRESULT, Set_resolveExternals) (THIS_ VARIANT_BOOL isResolving) PURE; // indicates whether the parser resolves references to external DTD/Entities/Schema
	STDMETHOD_(HRESULT, Get_preserveWhiteSpace) (THIS_ VARIANT_BOOL* isPreserving) PURE; // indicates whether the parser preserves whitespace
	STDMETHOD_(HRESULT, Set_preserveWhiteSpace) (THIS_ VARIANT_BOOL isPreserving) PURE; // indicates whether the parser preserves whitespace
	STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ VARIANT ) PURE; // register a readystatechange event handler
	STDMETHOD_(HRESULT, Set_ondataavailable) (THIS_ VARIANT ) PURE; // register an ondataavailable event handler
	STDMETHOD_(HRESULT, Set_ontransformnode) (THIS_ VARIANT ) PURE; // register an ontransformnode event handler
};

typedef IXMLDOMDocument* LPXMLDOMDOCUMENT;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMDocument  {2933BF81-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMDocumentProxy : public TAutoProxy
{
public:
	TIXMLDOMDocumentProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//doctype: node corresponding to the DOCTYPE  [dispid 38]
	void doctype(TIXMLDOMDocumentTypeProxy& Obj);

	//implementation: info on this DOM implementation  [dispid 39]
	void implementation(TIXMLDOMImplementationProxy& Obj);

	//documentElement: the root of the tree  [dispid 40]
	void documentElement(TIXMLDOMElementProxy& Obj);

	//documentElement: the root of the tree  [dispid 40]
	void documentElement(IXMLDOMElement* arg0);

	//createElement: create an Element node  [dispid 41]
	void createElement(TIXMLDOMElementProxy& Obj, TAutoString tagName);

	//createDocumentFragment: create a DocumentFragment node  [dispid 42]
	void createDocumentFragment(TIXMLDOMDocumentFragmentProxy& Obj);

	//createTextNode: create a text node  [dispid 43]
	void createTextNode(TIXMLDOMTextProxy& Obj, TAutoString data);

	//createComment: create a comment node  [dispid 44]
	void createComment(TIXMLDOMCommentProxy& Obj, TAutoString data);

	//createCDATASection: create a CDATA section node  [dispid 45]
	void createCDATASection(TIXMLDOMCDATASectionProxy& Obj, TAutoString data);

	//createProcessingInstruction: create a processing instruction node  [dispid 46]
	void createProcessingInstruction(TIXMLDOMProcessingInstructionProxy& Obj, TAutoString target, TAutoString data);

	//createAttribute: create an attribute node  [dispid 47]
	void createAttribute(TIXMLDOMAttributeProxy& Obj, TAutoString name);

	//createEntityReference: create an entity reference node  [dispid 49]
	void createEntityReference(TIXMLDOMEntityReferenceProxy& Obj, TAutoString name);

	//getElementsByTagName: build a list of elements by name  [dispid 50]
	void getElementsByTagName(TIXMLDOMNodeListProxy& Obj, TAutoString tagName);

	//createNode: create a node of the specified node type and name  [dispid 54]
	void createNode(TIXMLDOMNodeProxy& Obj, TAutoVal type, TAutoString name, TAutoString namespaceURI);

	//nodeFromID: retrieve node from it's ID  [dispid 56]
	void nodeFromID(TIXMLDOMNodeProxy& Obj, TAutoString idString);

	//load: load document from the specified XML source  [dispid 58]
	TBool load(TAutoVal xmlSource);

	//readyState: get the state of the XML document  [dispid -525]
	long readyState();

	//parseError: get the last parser error  [dispid 59]
	void parseError(TIXMLDOMParseErrorProxy& Obj);

	//url: get the URL for the loaded XML document  [dispid 60]
	TAutoString url();

	//async: flag for asynchronous download  [dispid 61]
	TBool async();

	//async: flag for asynchronous download  [dispid 61]
	void async(TBool arg0);

	//abort: abort an asynchronous download  [dispid 62]
	void abort();

	//loadXML: load the document from a string  [dispid 63]
	TBool loadXML(TAutoString bstrXML);

	//save: save the document to a specified destination  [dispid 64]
	void save(TAutoVal destination);

	//validateOnParse: indicates whether the parser performs validation  [dispid 65]
	TBool validateOnParse();

	//validateOnParse: indicates whether the parser performs validation  [dispid 65]
	void validateOnParse(TBool arg0);

	//resolveExternals: indicates whether the parser resolves references to external DTD/Entities/Schema  [dispid 66]
	TBool resolveExternals();

	//resolveExternals: indicates whether the parser resolves references to external DTD/Entities/Schema  [dispid 66]
	void resolveExternals(TBool arg0);

	//preserveWhiteSpace: indicates whether the parser preserves whitespace  [dispid 67]
	TBool preserveWhiteSpace();

	//preserveWhiteSpace: indicates whether the parser preserves whitespace  [dispid 67]
	void preserveWhiteSpace(TBool arg0);

	//onreadystatechange: register a readystatechange event handler  [dispid 68]
	void onreadystatechange(TAutoVal arg0);

	//ondataavailable: register an ondataavailable event handler  [dispid 69]
	void ondataavailable(TAutoVal arg0);

	//ontransformnode: register an ontransformnode event handler  [dispid 70]
	void ontransformnode(TAutoVal arg0);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMDocumentType
// {2933BF8B-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMDocumentType

DECLARE_INTERFACE_(IXMLDOMDocumentType, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMDocumentType methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* rootName) PURE; // name of the document type (root of the tree)
	STDMETHOD_(HRESULT, Get_entities) (THIS_ IXMLDOMNamedNodeMap** entityMap) PURE; // a list of entities in the document
	STDMETHOD_(HRESULT, Get_notations) (THIS_ IXMLDOMNamedNodeMap** notationMap) PURE; // a list of notations in the document
};

typedef IXMLDOMDocumentType* LPXMLDOMDOCUMENTTYPE;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMDocumentType  {2933BF8B-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMDocumentTypeProxy : public TAutoProxy
{
public:
	TIXMLDOMDocumentTypeProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//name: name of the document type (root of the tree)  [dispid 131]
	TAutoString name();

	//entities: a list of entities in the document  [dispid 132]
	void entities(TIXMLDOMNamedNodeMapProxy& Obj);

	//notations: a list of notations in the document  [dispid 133]
	void notations(TIXMLDOMNamedNodeMapProxy& Obj);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMElement
// {2933BF86-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMElement

DECLARE_INTERFACE_(IXMLDOMElement, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMElement methods:
	STDMETHOD_(HRESULT, Get_tagName) (THIS_ BSTR* tagName) PURE; // get the tagName of the element
	STDMETHOD_(HRESULT, getAttribute) (THIS_ BSTR name, VARIANT* value) PURE; // look up the string value of an attribute by name
	STDMETHOD_(HRESULT, setAttribute) (THIS_ BSTR name, VARIANT value) PURE; // set the string value of an attribute by name
	STDMETHOD_(HRESULT, removeAttribute) (THIS_ BSTR name) PURE; // remove an attribute by name
	STDMETHOD_(HRESULT, getAttributeNode) (THIS_ BSTR name, IXMLDOMAttribute** attributeNode) PURE; // look up the attribute node by name
	STDMETHOD_(HRESULT, setAttributeNode) (THIS_ IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) PURE; // set the specified attribute on the element
	STDMETHOD_(HRESULT, removeAttributeNode) (THIS_ IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) PURE; // remove the specified attribute
	STDMETHOD_(HRESULT, getElementsByTagName) (THIS_ BSTR tagName, IXMLDOMNodeList** resultList) PURE; // build a list of elements by name
	STDMETHOD_(HRESULT, normalize) (THIS ) PURE; // collapse all adjacent text nodes in sub-tree
};

typedef IXMLDOMElement* LPXMLDOMELEMENT;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMElement  {2933BF86-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMElementProxy : public TAutoProxy
{
public:
	TIXMLDOMElementProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//tagName: get the tagName of the element  [dispid 97]
	TAutoString tagName();

	//getAttribute: look up the string value of an attribute by name  [dispid 99]
	TAutoVal getAttribute(TAutoString name);

	//setAttribute: set the string value of an attribute by name  [dispid 100]
	void setAttribute(TAutoString name, TAutoVal value);

	//removeAttribute: remove an attribute by name  [dispid 101]
	void removeAttribute(TAutoString name);

	//getAttributeNode: look up the attribute node by name  [dispid 102]
	void getAttributeNode(TIXMLDOMAttributeProxy& Obj, TAutoString name);

	//setAttributeNode: set the specified attribute on the element  [dispid 103]
	void setAttributeNode(TIXMLDOMAttributeProxy& Obj, IXMLDOMAttribute* DOMAttribute);

	//removeAttributeNode: remove the specified attribute  [dispid 104]
	void removeAttributeNode(TIXMLDOMAttributeProxy& Obj, IXMLDOMAttribute* DOMAttribute);

	//getElementsByTagName: build a list of elements by name  [dispid 105]
	void getElementsByTagName(TIXMLDOMNodeListProxy& Obj, TAutoString tagName);

	//normalize: collapse all adjacent text nodes in sub-tree  [dispid 106]
	void normalize();
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMEntityReference
// {2933BF8E-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMEntityReference

DECLARE_INTERFACE_(IXMLDOMEntityReference, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMEntityReference methods:
};

typedef IXMLDOMEntityReference* LPXMLDOMENTITYREFERENCE;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMEntityReference  {2933BF8E-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMEntityReferenceProxy : public TAutoProxy
{
public:
	TIXMLDOMEntityReferenceProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMImplementation
// {2933BF8F-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMImplementation

DECLARE_INTERFACE_(IXMLDOMImplementation, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLDOMImplementation methods:
	STDMETHOD_(HRESULT, hasFeature) (THIS_ BSTR feature, BSTR version, VARIANT_BOOL* hasFeature) PURE;
};

typedef IXMLDOMImplementation* LPXMLDOMIMPLEMENTATION;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMImplementation  {2933BF8F-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMImplementationProxy : public TAutoProxy
{
public:
	TIXMLDOMImplementationProxy() : TAutoProxy(0x0) {}

	//hasFeature:   [dispid 145]
	TBool hasFeature(TAutoString feature, TAutoString version);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMNamedNodeMap
// {2933BF83-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMNamedNodeMap

DECLARE_INTERFACE_(IXMLDOMNamedNodeMap, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLDOMNamedNodeMap methods:
	STDMETHOD_(HRESULT, getNamedItem) (THIS_ BSTR name, IXMLDOMNode** namedItem) PURE; // lookup item by name
	STDMETHOD_(HRESULT, setNamedItem) (THIS_ IXMLDOMNode* newItem, IXMLDOMNode** nameItem) PURE; // set item by name
	STDMETHOD_(HRESULT, removeNamedItem) (THIS_ BSTR name, IXMLDOMNode** namedItem) PURE; // remove item by name
	STDMETHOD_(HRESULT, Get_item) (THIS_ long index, IXMLDOMNode** listItem) PURE; // collection of nodes
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* listLength) PURE; // number of nodes in the collection
	STDMETHOD_(HRESULT, getQualifiedItem) (THIS_ BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) PURE; // lookup the item by name and namespace
	STDMETHOD_(HRESULT, removeQualifiedItem) (THIS_ BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) PURE; // remove the item by name and namespace
	STDMETHOD_(HRESULT, nextNode) (THIS_ IXMLDOMNode** nextItem) PURE; // get next node from iterator
	STDMETHOD_(HRESULT, reset) (THIS ) PURE; // reset the position of iterator
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE;
};

typedef IXMLDOMNamedNodeMap* LPXMLDOMNAMEDNODEMAP;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMNamedNodeMap  {2933BF83-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMNamedNodeMapProxy : public TAutoProxy
{
public:
	TIXMLDOMNamedNodeMapProxy() : TAutoProxy(0x0) {}

	//getNamedItem: lookup item by name  [dispid 83]
	void getNamedItem(TIXMLDOMNodeProxy& Obj, TAutoString name);

	//setNamedItem: set item by name  [dispid 84]
	void setNamedItem(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newItem);

	//removeNamedItem: remove item by name  [dispid 85]
	void removeNamedItem(TIXMLDOMNodeProxy& Obj, TAutoString name);

	//item: collection of nodes  [dispid 0]
	void item(TIXMLDOMNodeProxy& Obj, long index);

	//length: number of nodes in the collection  [dispid 74]
	long length();

	//getQualifiedItem: lookup the item by name and namespace  [dispid 87]
	void getQualifiedItem(TIXMLDOMNodeProxy& Obj, TAutoString baseName, TAutoString namespaceURI);

	//removeQualifiedItem: remove the item by name and namespace  [dispid 88]
	void removeQualifiedItem(TIXMLDOMNodeProxy& Obj, TAutoString baseName, TAutoString namespaceURI);

	//nextNode: get next node from iterator  [dispid 89]
	void nextNode(TIXMLDOMNodeProxy& Obj);

	//reset: reset the position of iterator  [dispid 90]
	void reset();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMNodeList
// {2933BF82-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMNodeList

DECLARE_INTERFACE_(IXMLDOMNodeList, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLDOMNodeList methods:
	STDMETHOD_(HRESULT, Get_item) (THIS_ long index, IXMLDOMNode** listItem) PURE; // collection of nodes
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* listLength) PURE; // number of nodes in the collection
	STDMETHOD_(HRESULT, nextNode) (THIS_ IXMLDOMNode** nextItem) PURE; // get next node from iterator
	STDMETHOD_(HRESULT, reset) (THIS ) PURE; // reset the position of iterator
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE;
};

typedef IXMLDOMNodeList* LPXMLDOMNODELIST;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMNodeList  {2933BF82-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMNodeListProxy : public TAutoProxy
{
public:
	TIXMLDOMNodeListProxy() : TAutoProxy(0x0) {}

	//item: collection of nodes  [dispid 0]
	void item(TIXMLDOMNodeProxy& Obj, long index);

	//length: number of nodes in the collection  [dispid 74]
	long length();

	//nextNode: get next node from iterator  [dispid 76]
	void nextNode(TIXMLDOMNodeProxy& Obj);

	//reset: reset the position of iterator  [dispid 77]
	void reset();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMNode  {2933BF80-7B36-11D2-B20E-00C04F983E60}
// Core DOM node interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMNodeProxy : public TAutoProxy
{
public:
	TIXMLDOMNodeProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMParseError
// structure for reporting parser errors
// {3EFAA426-272F-11D2-836F-0000F87A7782}

#undef  INTERFACE
#define INTERFACE IXMLDOMParseError

DECLARE_INTERFACE_(IXMLDOMParseError, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLDOMParseError methods:
	STDMETHOD_(HRESULT, Get_errorCode) (THIS_ long* errorCode) PURE; // the error code
	STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* urlString) PURE; // the URL of the XML document containing the error
	STDMETHOD_(HRESULT, Get_reason) (THIS_ BSTR* reasonString) PURE; // the cause of the error
	STDMETHOD_(HRESULT, Get_srcText) (THIS_ BSTR* sourceString) PURE; // the data where the error occurred
	STDMETHOD_(HRESULT, Get_line) (THIS_ long* lineNumber) PURE; // the line number in the XML document where the error occurred
	STDMETHOD_(HRESULT, Get_linepos) (THIS_ long* linePosition) PURE; // the character position in the line containing the error
	STDMETHOD_(HRESULT, Get_filepos) (THIS_ long* filePosition) PURE; // the absolute file position in the XML document containing the error
};

typedef IXMLDOMParseError* LPXMLDOMPARSEERROR;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMParseError  {3EFAA426-272F-11D2-836F-0000F87A7782}
// structure for reporting parser errors [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMParseErrorProxy : public TAutoProxy
{
public:
	TIXMLDOMParseErrorProxy() : TAutoProxy(0x0) {}

	//errorCode: the error code  [dispid 0]
	long errorCode();

	//url: the URL of the XML document containing the error  [dispid 179]
	TAutoString url();

	//reason: the cause of the error  [dispid 180]
	TAutoString reason();

	//srcText: the data where the error occurred  [dispid 181]
	TAutoString srcText();

	//line: the line number in the XML document where the error occurred  [dispid 182]
	long line();

	//linepos: the character position in the line containing the error  [dispid 183]
	long linepos();

	//filepos: the absolute file position in the XML document containing the error  [dispid 184]
	long filepos();
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMProcessingInstruction
// {2933BF89-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMProcessingInstruction

DECLARE_INTERFACE_(IXMLDOMProcessingInstruction, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMProcessingInstruction methods:
	STDMETHOD_(HRESULT, Get_target) (THIS_ BSTR* name) PURE; // the target
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* value) PURE; // the data
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR value) PURE; // the data
};

typedef IXMLDOMProcessingInstruction* LPXMLDOMPROCESSINGINSTRUCTION;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMProcessingInstruction  {2933BF89-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMProcessingInstructionProxy : public TAutoProxy
{
public:
	TIXMLDOMProcessingInstructionProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//target: the target  [dispid 127]
	TAutoString target();

	//data: the data  [dispid 128]
	TAutoString data();

	//data: the data  [dispid 128]
	void data(TAutoString arg0);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMCharacterData
// {2933BF84-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMCharacterData

DECLARE_INTERFACE_(IXMLDOMCharacterData, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMCharacterData methods:
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* data) PURE; // value of the node
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR data) PURE; // value of the node
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* dataLength) PURE; // number of characters in value
	STDMETHOD_(HRESULT, substringData) (THIS_ long offset, long count, BSTR* data) PURE; // retrieve substring of value
	STDMETHOD_(HRESULT, appendData) (THIS_ BSTR data) PURE; // append string to value
	STDMETHOD_(HRESULT, insertData) (THIS_ long offset, BSTR data) PURE; // insert string into value
	STDMETHOD_(HRESULT, deleteData) (THIS_ long offset, long count) PURE; // delete string within the value
	STDMETHOD_(HRESULT, replaceData) (THIS_ long offset, long count, BSTR data) PURE; // replace string within the value
};

typedef IXMLDOMCharacterData* LPXMLDOMCHARACTERDATA;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMText
// {2933BF87-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMText

DECLARE_INTERFACE_(IXMLDOMText, IXMLDOMCharacterData)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
	//IXMLDOMCharacterData methods:
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* data) PURE; // value of the node
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR data) PURE; // value of the node
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* dataLength) PURE; // number of characters in value
	STDMETHOD_(HRESULT, substringData) (THIS_ long offset, long count, BSTR* data) PURE; // retrieve substring of value
	STDMETHOD_(HRESULT, appendData) (THIS_ BSTR data) PURE; // append string to value
	STDMETHOD_(HRESULT, insertData) (THIS_ long offset, BSTR data) PURE; // insert string into value
	STDMETHOD_(HRESULT, deleteData) (THIS_ long offset, long count) PURE; // delete string within the value
	STDMETHOD_(HRESULT, replaceData) (THIS_ long offset, long count, BSTR data) PURE; // replace string within the value
#endif
	//IXMLDOMText methods:
	STDMETHOD_(HRESULT, splitText) (THIS_ long offset, IXMLDOMText** rightHandTextNode) PURE; // split the text node into two text nodes at the position specified
};

typedef IXMLDOMText* LPXMLDOMTEXT;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMText  {2933BF87-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMTextProxy : public TAutoProxy
{
public:
	TIXMLDOMTextProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//data: value of the node  [dispid 109]
	TAutoString data();

	//data: value of the node  [dispid 109]
	void data(TAutoString arg0);

	//length: number of characters in value  [dispid 110]
	long length();

	//substringData: retrieve substring of value  [dispid 111]
	TAutoString substringData(long offset, long count);

	//appendData: append string to value  [dispid 112]
	void appendData(TAutoString data);

	//insertData: insert string into value  [dispid 113]
	void insertData(long offset, TAutoString data);

	//deleteData: delete string within the value  [dispid 114]
	void deleteData(long offset, long count);

	//replaceData: replace string within the value  [dispid 115]
	void replaceData(long offset, long count, TAutoString data);

	//splitText: split the text node into two text nodes at the position specified  [dispid 123]
	void splitText(TIXMLDOMTextProxy& Obj, long offset);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IEnumSoapMappers
// IEnumSoapMappers Interface
// {ACDDCED6-6DB8-497A-BF10-068711629924}

#undef  INTERFACE
#define INTERFACE IEnumSoapMappers

DECLARE_INTERFACE_(IEnumSoapMappers, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
#endif
	//IEnumSoapMappers methods:
	STDMETHOD_(HRESULT, Next) (THIS_ long par_celt, ISoapMapper** par_soapmapper, long* par_Fetched) PURE; // Get the next mapper on the list
	STDMETHOD_(HRESULT, Skip) (THIS_ long par_celt) PURE; // Skip the specified number of mappers
	STDMETHOD_(HRESULT, Reset) (THIS ) PURE; // Go back to the begining of the list
	STDMETHOD_(HRESULT, Clone) (THIS_ IEnumSoapMappers** par_enum) PURE; // Clone the list
};

typedef IEnumSoapMappers* LPENUMSOAPMAPPERS;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IEnumWSDLOperations
// IEnumWSDLOperations Interface
// {B0BBA669-55F7-4E9C-941E-49BC4715C834}

#undef  INTERFACE
#define INTERFACE IEnumWSDLOperations

DECLARE_INTERFACE_(IEnumWSDLOperations, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IEnumWSDLOperations methods:
	STDMETHOD_(HRESULT, Next) (THIS_ long par_celt, IWSDLOperation** par_WSDLOperation, long* par_Fetched) PURE; // Get the next operation on the list
	STDMETHOD_(HRESULT, Skip) (THIS_ long par_celt) PURE; // Skip the specified number of operations
	STDMETHOD_(HRESULT, Reset) (THIS ) PURE; // Go back to the begining of the list
	STDMETHOD_(HRESULT, Clone) (THIS_ IEnumWSDLOperations** par_enum) PURE; // Clone the list
	STDMETHOD_(HRESULT, Find) (THIS_ BSTR par_OperationToFind, IWSDLOperation** par_IWSDLOperation) PURE; // Find the specified operation
	STDMETHOD_(HRESULT, Size) (THIS_ long* par_Size) PURE; // Return the number of entries in the list
};

typedef IEnumWSDLOperations* LPENUMWSDLOPERATIONS;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IEnumWSDLPorts
// IEnumWSDLPortss Interface
// {EC189C1C-31B3-4193-BDCA-98EC44FF3EE0}

#undef  INTERFACE
#define INTERFACE IEnumWSDLPorts

DECLARE_INTERFACE_(IEnumWSDLPorts, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IEnumWSDLPorts methods:
	STDMETHOD_(HRESULT, Next) (THIS_ long par_celt, IWSDLPort** WSDLPort, long* par_Fetched) PURE; // Get the next port on the list
	STDMETHOD_(HRESULT, Skip) (THIS_ long par_celt) PURE; // Skip the specified number of ports
	STDMETHOD_(HRESULT, Reset) (THIS ) PURE; // Go back to the begining of the list
	STDMETHOD_(HRESULT, Clone) (THIS_ IEnumWSDLPorts** par_enum) PURE; // Clone the list
	STDMETHOD_(HRESULT, Find) (THIS_ BSTR par_PortToFind, IWSDLPort** par_IWSDLPort) PURE; // Find the specified port
};

typedef IEnumWSDLPorts* LPENUMWSDLPORTS;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWSDLMessage
// IWSDLMessage Interface
// {49F9421C-DC88-43E1-825F-70E788E9A9A9}

#undef  INTERFACE
#define INTERFACE IWSDLMessage

DECLARE_INTERFACE_(IWSDLMessage, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IWSDLMessage methods:
	STDMETHOD_(HRESULT, Get_EncodingStyle) (THIS_ enEncodingStyle* par_enStyle) PURE; // message encoding style
	STDMETHOD_(HRESULT, Get_EncodingNamespace) (THIS_ BSTR* par_encodingNamespace) PURE; // message encoding namespace
	STDMETHOD_(HRESULT, Get_MessageName) (THIS_ BSTR* par_messageName) PURE; // message name
	STDMETHOD_(HRESULT, Get_MessageNamespace) (THIS_ BSTR* par_MessageNamespace) PURE; // message name namespace
	STDMETHOD_(HRESULT, Get_MessageParts) (THIS_ IEnumSoapMappers** par_IEnumSoapMappers) PURE; // Get a list of message parts
	STDMETHOD_(HRESULT, GetComposer) (THIS_ BSTR par_tempFolder, long par_maxSize, IMessageComposer** par_composer) PURE; 
	STDMETHOD_(HRESULT, GetParser) (THIS_ BSTR par_tempFolder, long par_maxSize, IMessageParser** par_parser) PURE; 
	STDMETHOD_(HRESULT, AddAttachmentCollection) (THIS_ BSTR par_bstrPartName, long par_lserverSideCallIndex) PURE; // Adds an attachment collection object to the message
};

typedef IWSDLMessage* LPWSDLMESSAGE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMAttribute
// {2933BF85-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMAttribute

DECLARE_INTERFACE_(IXMLDOMAttribute, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMAttribute methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* attributeName) PURE; // get name of the attribute
	STDMETHOD_(HRESULT, Get_value) (THIS_ VARIANT* attributeValue) PURE; // string value of the attribute
	STDMETHOD_(HRESULT, Set_value) (THIS_ VARIANT attributeValue) PURE; // string value of the attribute
};

typedef IXMLDOMAttribute* LPXMLDOMATTRIBUTE;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMAttribute  {2933BF85-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMAttributeProxy : public TAutoProxy
{
public:
	TIXMLDOMAttributeProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//name: get name of the attribute  [dispid 118]
	TAutoString name();

	//value: string value of the attribute  [dispid 120]
	TAutoVal value();

	//value: string value of the attribute  [dispid 120]
	void value(TAutoVal arg0);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMCDATASection
// {2933BF8A-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMCDATASection

DECLARE_INTERFACE_(IXMLDOMCDATASection, IXMLDOMText)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
	//IXMLDOMCharacterData methods:
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* data) PURE; // value of the node
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR data) PURE; // value of the node
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* dataLength) PURE; // number of characters in value
	STDMETHOD_(HRESULT, substringData) (THIS_ long offset, long count, BSTR* data) PURE; // retrieve substring of value
	STDMETHOD_(HRESULT, appendData) (THIS_ BSTR data) PURE; // append string to value
	STDMETHOD_(HRESULT, insertData) (THIS_ long offset, BSTR data) PURE; // insert string into value
	STDMETHOD_(HRESULT, deleteData) (THIS_ long offset, long count) PURE; // delete string within the value
	STDMETHOD_(HRESULT, replaceData) (THIS_ long offset, long count, BSTR data) PURE; // replace string within the value
	//IXMLDOMText methods:
	STDMETHOD_(HRESULT, splitText) (THIS_ long offset, IXMLDOMText** rightHandTextNode) PURE; // split the text node into two text nodes at the position specified
#endif
	//IXMLDOMCDATASection methods:
};

typedef IXMLDOMCDATASection* LPXMLDOMCDATASECTION;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMCDATASection  {2933BF8A-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMCDATASectionProxy : public TAutoProxy
{
public:
	TIXMLDOMCDATASectionProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//data: value of the node  [dispid 109]
	TAutoString data();

	//data: value of the node  [dispid 109]
	void data(TAutoString arg0);

	//length: number of characters in value  [dispid 110]
	long length();

	//substringData: retrieve substring of value  [dispid 111]
	TAutoString substringData(long offset, long count);

	//appendData: append string to value  [dispid 112]
	void appendData(TAutoString data);

	//insertData: insert string into value  [dispid 113]
	void insertData(long offset, TAutoString data);

	//deleteData: delete string within the value  [dispid 114]
	void deleteData(long offset, long count);

	//replaceData: replace string within the value  [dispid 115]
	void replaceData(long offset, long count, TAutoString data);

	//splitText: split the text node into two text nodes at the position specified  [dispid 123]
	void splitText(TIXMLDOMTextProxy& Obj, long offset);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMComment
// {2933BF88-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMComment

DECLARE_INTERFACE_(IXMLDOMComment, IXMLDOMCharacterData)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
	//IXMLDOMCharacterData methods:
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* data) PURE; // value of the node
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR data) PURE; // value of the node
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* dataLength) PURE; // number of characters in value
	STDMETHOD_(HRESULT, substringData) (THIS_ long offset, long count, BSTR* data) PURE; // retrieve substring of value
	STDMETHOD_(HRESULT, appendData) (THIS_ BSTR data) PURE; // append string to value
	STDMETHOD_(HRESULT, insertData) (THIS_ long offset, BSTR data) PURE; // insert string into value
	STDMETHOD_(HRESULT, deleteData) (THIS_ long offset, long count) PURE; // delete string within the value
	STDMETHOD_(HRESULT, replaceData) (THIS_ long offset, long count, BSTR data) PURE; // replace string within the value
#endif
	//IXMLDOMComment methods:
};

typedef IXMLDOMComment* LPXMLDOMCOMMENT;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMComment  {2933BF88-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMCommentProxy : public TAutoProxy
{
public:
	TIXMLDOMCommentProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//data: value of the node  [dispid 109]
	TAutoString data();

	//data: value of the node  [dispid 109]
	void data(TAutoString arg0);

	//length: number of characters in value  [dispid 110]
	long length();

	//substringData: retrieve substring of value  [dispid 111]
	TAutoString substringData(long offset, long count);

	//appendData: append string to value  [dispid 112]
	void appendData(TAutoString data);

	//insertData: insert string into value  [dispid 113]
	void insertData(long offset, TAutoString data);

	//deleteData: delete string within the value  [dispid 114]
	void deleteData(long offset, long count);

	//replaceData: replace string within the value  [dispid 115]
	void replaceData(long offset, long count, TAutoString data);
};

#endif
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMDocumentFragment
// {3EFAA413-272F-11D2-836F-0000F87A7782}

#undef  INTERFACE
#define INTERFACE IXMLDOMDocumentFragment

DECLARE_INTERFACE_(IXMLDOMDocumentFragment, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMDocumentFragment methods:
};

typedef IXMLDOMDocumentFragment* LPXMLDOMDOCUMENTFRAGMENT;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

// Commented because already existing in msxml40_proxy.h
/*
#ifdef __cplusplus
// IXMLDOMDocumentFragment  {3EFAA413-272F-11D2-836F-0000F87A7782}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMDocumentFragmentProxy : public TAutoProxy
{
public:
	TIXMLDOMDocumentFragmentProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);
};

#endif
*/

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

// __MIDL___MIDL_itf_mssoap30_0135_0001
typedef enum tag__MIDL___MIDL_itf_mssoap30_0135_0001
{
	smInput = -1,
	smOutput = 0, 
	smInOut = 1, 
} __MIDL___MIDL_itf_mssoap30_0135_0001;



// __MIDL___MIDL_itf_mssoap30_0135_0002
typedef enum tag__MIDL___MIDL_itf_mssoap30_0135_0002
{
	stNone = 0,
	stAttachment = 1,
	stSentAttachments = 2,
	stReceivedAttachments = 3,
} __MIDL___MIDL_itf_mssoap30_0135_0002;

// __MIDL___MIDL_itf_mssoap30_0000_0001
typedef enum tag__MIDL___MIDL_itf_mssoap30_0000_0001
{
	cdMayRequireResend = 1, 
	cdRequiresTotalSize = 2, 
} __MIDL___MIDL_itf_mssoap30_0000_0001;

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IGetComposerDestination
// IGetComposerDestination interface
// {9E6CDFEF-4C42-411B-BACA-FE96F7A13C04}

#undef  INTERFACE
#define INTERFACE IGetComposerDestination

DECLARE_INTERFACE_(IGetComposerDestination, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IGetComposerDestination methods:
	STDMETHOD_(HRESULT, Get_ComposerDestination) (THIS_ IComposerDestination** par_value) PURE; 
};

typedef IGetComposerDestination* LPGETCOMPOSERDESTINATION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IGetParserSource
// IGetComposerSource interface
// {BB63287E-1407-40E3-89AB-38CB2746547F}

#undef  INTERFACE
#define INTERFACE IGetParserSource

DECLARE_INTERFACE_(IGetParserSource, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IGetParserSource methods:
	STDMETHOD_(HRESULT, Get_ParserSource) (THIS_ IParserSource** par_value) PURE; 
};

typedef IGetParserSource* LPGETPARSERSOURCE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

// __MIDL___MIDL_itf_mssoap30_0135_0005
typedef enum tag__MIDL___MIDL_itf_mssoap30_0135_0005
{
	enOneWay = 0, 
	enRequestResponse = 1, 
} __MIDL___MIDL_itf_mssoap30_0135_0005;

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHeaderHandler
// IHeaderHandler
// {504D4B91-76B8-4D88-95EA-CEB5E0FE41F3}

#undef  INTERFACE
#define INTERFACE IHeaderHandler

DECLARE_INTERFACE_(IHeaderHandler, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IHeaderHandler methods:
	STDMETHOD_(HRESULT, WillWriteHeaders) (THIS_ VARIANT_BOOL* par_WillWriteHeaders) PURE; // Indicates if a header will be written
	STDMETHOD_(HRESULT, WriteHeaders) (THIS_ ISoapSerializer* par_ISoapSerializer, IDispatch* par_Object) PURE; // writes a header
	STDMETHOD_(HRESULT, ReadHeader) (THIS_ ISoapReader* par_Reader, IXMLDOMNode* par_HeaderNode, IDispatch* par_Object, VARIANT_BOOL* par_Understood) PURE; // reads one header
};

typedef IHeaderHandler* LPHEADERHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IHeaderHandler  {504D4B91-76B8-4D88-95EA-CEB5E0FE41F3}
// IHeaderHandler [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHeaderHandlerProxy : public TAutoProxy
{
public:
	TIHeaderHandlerProxy() : TAutoProxy(0x0) {}

	//WillWriteHeaders: Indicates if a header will be written  [dispid 1]
	TBool WillWriteHeaders();

	//WriteHeaders: writes a header  [dispid 2]
	void WriteHeaders(ISoapSerializer* par_ISoapSerializer, IDispatch* par_Object);

	//ReadHeader: reads one header  [dispid 3]
	TBool ReadHeader(ISoapReader* par_Reader, IXMLDOMNode* par_HeaderNode, IDispatch* par_Object);
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWSDLBinding
// IWSDLBinding Interface
// {AB0E0268-304D-43FC-8603-B1105F3A7512}

#undef  INTERFACE
#define INTERFACE IWSDLBinding

DECLARE_INTERFACE_(IWSDLBinding, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IWSDLBinding methods:
	STDMETHOD_(HRESULT, Initialize) (THIS_ IXMLDOMNode* pWSMLBindingNode, BSTR* pbstrNamespace) PURE; 
	STDMETHOD_(HRESULT, ParseBinding) (THIS_ IXMLDOMNode* pWSDLInputOutputNode, IXMLDOMNode** ppSoapBodyNode) PURE; 
	STDMETHOD_(HRESULT, ApplyBinding) (THIS_ IWSDLMessage* pWSDLMessage, IXMLDOMNode* pWSDLInputOutputNode, IXMLDOMNode* pWSMLOperationNode) PURE; 
	STDMETHOD_(HRESULT, GetComposer) (THIS_ BSTR bstrTemporaryAttachmentFolder, long lMaxAttachmentSize, long lReserved, IMessageComposer** ppComposer) PURE; 
	STDMETHOD_(HRESULT, GetParser) (THIS_ BSTR bstrTemporaryAttachmentFolder, long lMaxAttachmentSize, IMessageParser** ppParser) PURE; 
};

typedef IWSDLBinding* LPWSDLBINDING;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapError
// ISoapError Interface
// {7F017F94-9257-11D5-87EA-00B0D0BE6479}

// interface DECLSPEC_UUID("{7F017F94-9257-11D5-87EA-00B0D0BE6479}") ISoapError ;

#undef  INTERFACE
#define INTERFACE ISoapError

DECLARE_INTERFACE_(ISoapError, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISoapError methods:
	STDMETHOD_(HRESULT, Get_FaultCode) (THIS_ BSTR* par_FaultCode) PURE; // Soap defined fault code
	STDMETHOD_(HRESULT, Get_FaultString) (THIS_ BSTR* par_FaultString) PURE; // Brief explanation of the Soap fault
	STDMETHOD_(HRESULT, Get_FaultActor) (THIS_ BSTR* par_Actor) PURE; // Information about the source of the fault
	STDMETHOD_(HRESULT, Get_Detail) (THIS_ BSTR* par_Detail) PURE; // Detailed fault information
	STDMETHOD_(HRESULT, Get_FaultCodeNamespace) (THIS_ BSTR* par_Namespace) PURE; // Namespace for the Soap fault
};

typedef ISoapError* LPSOAPERROR;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISoapErrorInfo
// ISoapErrorInfo implementation
// {C0871607-8C99-4824-92CD-85CBD4C7273F}

#undef  INTERFACE
#define INTERFACE ISoapErrorInfo

DECLARE_INTERFACE_(ISoapErrorInfo, IErrorInfo)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IErrorInfo methods:
	STDMETHOD_(HRESULT, GetGUID) (THIS_ GUID* pGUID) PURE; 
	STDMETHOD_(HRESULT, GetSource) (THIS_ BSTR* pBstrSource) PURE; 
	STDMETHOD_(HRESULT, GetDescription) (THIS_ BSTR* pBstrDescription) PURE; 
	STDMETHOD_(HRESULT, GetHelpFile) (THIS_ BSTR* pBstrHelpFile) PURE; 
	STDMETHOD_(HRESULT, GetHelpContext) (THIS_ unsigned long* pdwHelpContext) PURE; 
#endif
	//ISoapErrorInfo methods:
	STDMETHOD_(HRESULT, SetActor) (THIS_ BSTR par_Actor) PURE; // Set the actor for the errorinformation
	STDMETHOD_(HRESULT, SetFaultCode) (THIS_ BSTR par_FaultCode) PURE; // Set the fault origin
	STDMETHOD_(HRESULT, AddErrorEntry) (THIS_ BSTR par_Description, BSTR par_Component, HRESULT par_ErrorCode) PURE; // Add an error
	STDMETHOD_(HRESULT, AddSoapError) (THIS_ BSTR par_FaultString, BSTR par_FaultActor, BSTR par_Detail, BSTR par_FaultCode, BSTR par_Namespace) PURE; // Add an ISoapError
	STDMETHOD_(HRESULT, AddErrorInfo) (THIS_ BSTR par_Description, BSTR par_source, BSTR par_Helpfile, unsigned long par_HelpContext, HRESULT par_hrFromErrorInfo) PURE; // Add an IErrorInfo
	STDMETHOD_(HRESULT, LoadFault) (THIS_ IXMLDOMDocument* par_Document) PURE; // Load soap error from DOM
	STDMETHOD_(HRESULT, GetHresult) (THIS_ HRESULT* par_HR) PURE; // Return the base HRESULT
	STDMETHOD_(HRESULT, GetErrorEntry) (THIS_ unsigned long par_EntryID, BSTR* par_Description, BSTR* par_Component, HRESULT* par_HR) PURE; // Return an error entry from the stack
	STDMETHOD_(HRESULT, GetActor) (THIS_ BSTR* par_Actor) PURE; // Return the faultactor
	STDMETHOD_(HRESULT, GetErrorInfo) (THIS_ BSTR* par_Description, BSTR* par_source, BSTR* par_Helpfile, unsigned long* par_HelpContext, HRESULT* par_hrFromErrorInfo) PURE; // Return the errorInfo information
	STDMETHOD_(HRESULT, GetSoapError) (THIS_ BSTR* par_FaultString, BSTR* par_FaultActor, BSTR* par_Detail, BSTR* par_FaultCode, BSTR* par_Namespace) PURE; // Return the errorInfo information
};

typedef ISoapErrorInfo* LPSOAPERRORINFO;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IGCTMObjectFactory
// IGCTMObjectFactory Interface
// {3C87B8BE-F2B7-45C5-B34E-4A46A58A80B0}

#undef  INTERFACE
#define INTERFACE IGCTMObjectFactory

DECLARE_INTERFACE_(IGCTMObjectFactory, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IGCTMObjectFactory methods:
	STDMETHOD_(HRESULT, CreateObject) (THIS_ IXMLDOMNode* par_WSMLNode, IDispatch** par_Object) PURE; // Create the target object
};

typedef IGCTMObjectFactory* LPGCTMOBJECTFACTORY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#include <poppack.h>

#endif // __MSSOAP30_PROXY_H

