//---------------------------------------------------------------------------
//
//Version:            1.0
//Copyright:          
//Description:        
//Author:             
//Company:            
//
//Header Type:        Abstract type descriptions.
//
//File:               msxml40_proxy.h
//
//Type Library:       MSXML2
//Type Description:   Microsoft XML, v4.0
//
//GUID:               {F5078F18-C551-11D3-89B9-0000F81FE221}
//System:             WIN32
//Version:            4.0
//
//Code generated by ProxyWiz 1.0
//ProxyWiz Copyright Dr John Maddock 1997, all rights reserved.
//
//---------------------------------------------------------------------------


#ifndef __cplusplus
	#include <windows.h>
	#include <olectl.h>
#else
	#include <owl/pch.h>
	#include <owl/oledialg.h>
#endif

#if !defined(__MSXML40_PROXY_H)
#define __MSXML40_PROXY_H

#include <pshpack8.h>

#include "wizard.h"

#ifndef _PWCLASS
#define _PWCLASS
#endif

//------------------------------------------------------------
//Predeclaration of classes and interfaces

#ifdef __cplusplus

//interface DOMNodeType;
class IXMLDOMNode;
class _PWCLASS TIXMLDOMNodeProxy;
class IXMLDOMNodeList;
class _PWCLASS TIXMLDOMNodeListProxy;
class IXMLDOMNamedNodeMap;
class _PWCLASS TIXMLDOMNamedNodeMapProxy;
class IXMLDOMDocument;
class _PWCLASS TIXMLDOMDocumentProxy;
class IXMLDOMDocumentType;
class _PWCLASS TIXMLDOMDocumentTypeProxy;
class IXMLDOMImplementation;
class _PWCLASS TIXMLDOMImplementationProxy;
class IXMLDOMElement;
class _PWCLASS TIXMLDOMElementProxy;
class IXMLDOMDocumentFragment;
class _PWCLASS TIXMLDOMDocumentFragmentProxy;
class IXMLDOMText;
class _PWCLASS TIXMLDOMTextProxy;
class IXMLDOMComment;
class _PWCLASS TIXMLDOMCommentProxy;
class IXMLDOMCDATASection;
class _PWCLASS TIXMLDOMCDATASectionProxy;
class IXMLDOMProcessingInstruction;
class _PWCLASS TIXMLDOMProcessingInstructionProxy;
class IXMLDOMAttribute;
class _PWCLASS TIXMLDOMAttributeProxy;
class IXMLDOMEntityReference;
class _PWCLASS TIXMLDOMEntityReferenceProxy;
class IXMLDOMParseError;
class _PWCLASS TIXMLDOMParseErrorProxy;
class IXMLDOMSchemaCollection;
class _PWCLASS TIXMLDOMSchemaCollectionProxy;
class ISchema;
class _PWCLASS TISchemaProxy;
class ISchemaItem;
class _PWCLASS TISchemaItemProxy;
class IXSLProcessor;
class _PWCLASS TIXSLProcessorProxy;
interface SERVERXMLHTTP_OPTION; 
interface SXH_PROXY_SETTING; 
class IVBSAXEntityResolver;
class _PWCLASS TIVBSAXEntityResolverProxy;
class IVBSAXContentHandler;
class _PWCLASS TIVBSAXContentHandlerProxy;
class IVBSAXDTDHandler;
class _PWCLASS TIVBSAXDTDHandlerProxy;
class IVBSAXErrorHandler;
class _PWCLASS TIVBSAXErrorHandlerProxy;
class ISAXEntityResolver;
class ISAXContentHandler;
class ISAXDTDHandler;
class ISAXErrorHandler;
class ISAXLocator;
class ISAXAttributes;
class IVBSAXLocator;
class _PWCLASS TIVBSAXLocatorProxy;
class IVBSAXAttributes;
class _PWCLASS TIVBSAXAttributesProxy;
class IMXNamespacePrefixes;
class _PWCLASS TIMXNamespacePrefixesProxy;
class IXMLElement2;
class _PWCLASS TIXMLElement2Proxy;
interface SOMITEMTYPE; 
class ISchemaItemCollection;
class _PWCLASS TISchemaItemCollectionProxy;
class ISchemaStringCollection;
class _PWCLASS TISchemaStringCollectionProxy;
class IXMLElementCollection;
class _PWCLASS TIXMLElementCollectionProxy;
class ISchemaElement;
class _PWCLASS TISchemaElementProxy;
class ISchemaType;
class _PWCLASS TISchemaTypeProxy;
class ISchemaComplexType;
class _PWCLASS TISchemaComplexTypeProxy;
interface SCHEMADERIVATIONMETHOD;
interface SCHEMATYPEVARIETY; 
interface SCHEMAWHITESPACE; 
class ISchemaAny;
class _PWCLASS TISchemaAnyProxy;
interface SCHEMACONTENTTYPE; 
class ISchemaModelGroup;
class _PWCLASS TISchemaModelGroupProxy;
interface SCHEMAPROCESSCONTENTS; 
interface SCHEMAUSE; 
class ISchemaIdentityConstraint;
class _PWCLASS TISchemaIdentityConstraintProxy;
class IXMLElement;
class _PWCLASS TIXMLElementProxy;
struct _xml_error;
// interface XMLELEM_TYPE;
class IXMLDOMSelection;
class _PWCLASS TIXMLDOMSelectionProxy;
interface SXH_SERVER_CERT_OPTION; 
#else

//typedef interface DOMNodeType DOMNodeType;
typedef struct IXMLDOMNode IXMLDOMNode;
typedef struct IXMLDOMNodeList IXMLDOMNodeList;
typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
typedef struct IXMLDOMDocument IXMLDOMDocument;
typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;
typedef struct IXMLDOMImplementation IXMLDOMImplementation;
typedef struct IXMLDOMElement IXMLDOMElement;
typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
typedef struct IXMLDOMText IXMLDOMText;
typedef struct IXMLDOMComment IXMLDOMComment;
typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;
typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
typedef struct IXMLDOMAttribute IXMLDOMAttribute;
typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;
typedef struct IXMLDOMParseError IXMLDOMParseError;
typedef struct IXMLDOMSchemaCollection IXMLDOMSchemaCollection;
typedef struct ISchema ISchema;
typedef struct ISchemaItem ISchemaItem;
typedef struct IXSLProcessor IXSLProcessor;
typedef interface SERVERXMLHTTP_OPTION SERVERXMLHTTP_OPTION; 
typedef interface SXH_PROXY_SETTING SXH_PROXY_SETTING; 
typedef struct IVBSAXEntityResolver IVBSAXEntityResolver;
typedef struct IVBSAXContentHandler IVBSAXContentHandler;
typedef struct IVBSAXDTDHandler IVBSAXDTDHandler;
typedef struct IVBSAXErrorHandler IVBSAXErrorHandler;
typedef struct ISAXEntityResolver ISAXEntityResolver;
typedef struct ISAXContentHandler ISAXContentHandler;
typedef struct ISAXDTDHandler ISAXDTDHandler;
typedef struct ISAXErrorHandler ISAXErrorHandler;
typedef struct ISAXLocator ISAXLocator;
typedef struct ISAXAttributes ISAXAttributes;
typedef struct IVBSAXLocator IVBSAXLocator;
typedef struct IVBSAXAttributes IVBSAXAttributes;
typedef struct IMXNamespacePrefixes IMXNamespacePrefixes;
typedef struct IXMLElement2 IXMLElement2;
typedef interface SOMITEMTYPE SOMITEMTYPE; 
typedef struct ISchemaItemCollection ISchemaItemCollection;
typedef struct ISchemaStringCollection ISchemaStringCollection;
typedef struct IXMLElementCollection IXMLElementCollection;
typedef struct ISchemaElement ISchemaElement;
typedef struct ISchemaType ISchemaType;
typedef struct ISchemaComplexType ISchemaComplexType;
typedef interface SCHEMADERIVATIONMETHOD SCHEMADERIVATIONMETHOD; 
typedef interface SCHEMATYPEVARIETY SCHEMATYPEVARIETY; 
typedef interface SCHEMAWHITESPACE SCHEMAWHITESPACE; 
typedef struct ISchemaAny ISchemaAny;
typedef interface SCHEMACONTENTTYPE SCHEMACONTENTTYPE; 
typedef struct ISchemaModelGroup ISchemaModelGroup;
typedef interface SCHEMAPROCESSCONTENTS SCHEMAPROCESSCONTENTS; 
typedef interface SCHEMAUSE SCHEMAUSE; 
typedef struct ISchemaIdentityConstraint ISchemaIdentityConstraint;
typedef struct IXMLElement IXMLElement;
typedef struct _xml_error _xml_error;
typedef interface XMLELEM_TYPE XMLELEM_TYPE;
typedef struct IXMLDOMSelection IXMLDOMSelection;
typedef interface SXH_SERVER_CERT_OPTION SXH_SERVER_CERT_OPTION;
#endif

// tagDOMNodeType
// Constants that define a node's type
typedef enum tagtagDOMNodeType
{
	NODE_INVALID = 0,
	NODE_ELEMENT = 1,
	NODE_ATTRIBUTE = 2,
	NODE_TEXT = 3,
	NODE_CDATA_SECTION = 4,
	NODE_ENTITY_REFERENCE = 5,
	NODE_ENTITY = 6,
	NODE_PROCESSING_INSTRUCTION = 7,
	NODE_COMMENT = 8,
	NODE_DOCUMENT = 9,
	NODE_DOCUMENT_TYPE = 10,
	NODE_DOCUMENT_FRAGMENT = 11,
	NODE_NOTATION = 12,
} tagDOMNodeType, DOMNodeType ;

//Coclass: DOMDocument W3C-DOM XML Document (Apartment)
// {F6D90F11-9C73-11D3-B32E-00C04F990BB4}
typedef IUnknown DOMDocument;

//Coclass: DOMDocument26 W3C-DOM XML Document (Apartment)
// {F5078F1B-C551-11D3-89B9-0000F81FE221}
typedef IUnknown DOMDocument26;

//Coclass: DOMDocument30 W3C-DOM XML Document (Apartment)
// {F5078F32-C551-11D3-89B9-0000F81FE221}
typedef IUnknown DOMDocument30;

//Coclass: DOMDocument40 W3C-DOM XML Document (Apartment)
// {88D969C0-F192-11D4-A65F-0040963251E5}
typedef IUnknown DOMDocument40;

//Coclass: FreeThreadedDOMDocument W3C-DOM XML Document (Free threaded)
// {F6D90F12-9C73-11D3-B32E-00C04F990BB4}
typedef IUnknown FreeThreadedDOMDocument;

//Coclass: FreeThreadedDOMDocument26 W3C-DOM XML Document (Free threaded)
// {F5078F1C-C551-11D3-89B9-0000F81FE221}
typedef IUnknown FreeThreadedDOMDocument26;

//Coclass: FreeThreadedDOMDocument30 W3C-DOM XML Document (Free threaded)
// {F5078F33-C551-11D3-89B9-0000F81FE221}
typedef IUnknown FreeThreadedDOMDocument30;

//Coclass: FreeThreadedDOMDocument40 W3C-DOM XML Document (Free threaded)
// {88D969C1-F192-11D4-A65F-0040963251E5}
typedef IUnknown FreeThreadedDOMDocument40;

//Coclass: XMLSchemaCache object for caching schemas
// {373984C9-B845-449B-91E7-45AC83036ADE}
typedef IUnknown XMLSchemaCache;

//Coclass: XMLSchemaCache26 object for caching schemas
// {F5078F1D-C551-11D3-89B9-0000F81FE221}
typedef IUnknown XMLSchemaCache26;

//Coclass: XMLSchemaCache30 object for caching schemas
// {F5078F34-C551-11D3-89B9-0000F81FE221}
typedef IUnknown XMLSchemaCache30;

//Coclass: XMLSchemaCache40 object for caching schemas
// {88D969C2-F192-11D4-A65F-0040963251E5}
typedef IUnknown XMLSchemaCache40;

//Coclass: XSLTemplate object for caching compiled XSL stylesheets
// {2933BF94-7B36-11D2-B20E-00C04F983E60}
typedef IUnknown XSLTemplate;

//Coclass: XSLTemplate26 object for caching compiled XSL stylesheets
// {F5078F21-C551-11D3-89B9-0000F81FE221}
typedef IUnknown XSLTemplate26;

//Coclass: XSLTemplate30 object for caching compiled XSL stylesheets
// {F5078F36-C551-11D3-89B9-0000F81FE221}
typedef IUnknown XSLTemplate30;

//Coclass: XSLTemplate40 object for caching compiled XSL stylesheets
// {88D969C3-F192-11D4-A65F-0040963251E5}
typedef IUnknown XSLTemplate40;

//Coclass: DSOControl XML Data Source Object
// {F6D90F14-9C73-11D3-B32E-00C04F990BB4}
typedef IUnknown DSOControl;

//Coclass: DSOControl26 XML Data Source Object
// {F5078F1F-C551-11D3-89B9-0000F81FE221}
typedef IUnknown DSOControl26;

//Coclass: DSOControl30 XML Data Source Object
// {F5078F39-C551-11D3-89B9-0000F81FE221}
typedef IUnknown DSOControl30;

//Coclass: DSOControl40 XML Data Source Object
// {88D969C4-F192-11D4-A65F-0040963251E5}
typedef IUnknown DSOControl40;

//Coclass: XMLHTTP XML HTTP Request class.
// {F6D90F16-9C73-11D3-B32E-00C04F990BB4}
typedef IUnknown XMLHTTP;

//Coclass: XMLHTTP26 XML HTTP Request class.
// {F5078F1E-C551-11D3-89B9-0000F81FE221}
typedef IUnknown XMLHTTP26;

//Coclass: XMLHTTP30 XML HTTP Request class.
// {F5078F35-C551-11D3-89B9-0000F81FE221}
typedef IUnknown XMLHTTP30;

//Coclass: XMLHTTP40 XML HTTP Request class.
// {88D969C5-F192-11D4-A65F-0040963251E5}
typedef IUnknown XMLHTTP40;

//Coclass: ServerXMLHTTP Server XML HTTP Request class.
// {AFBA6B42-5692-48EA-8141-DC517DCF0EF1}
typedef IUnknown ServerXMLHTTP;

//Coclass: ServerXMLHTTP30 Server XML HTTP Request class.
// {AFB40FFD-B609-40A3-9828-F88BBE11E4E3}
typedef IUnknown ServerXMLHTTP30;

//Coclass: ServerXMLHTTP40 Server XML HTTP Request class.
// {88D969C6-F192-11D4-A65F-0040963251E5}
typedef IUnknown ServerXMLHTTP40;

//Coclass: SAXXMLReader SAX XML Reader (version independent) coclass
// {079AA557-4A18-424A-8EEE-E39F0A8D41B9}
typedef IUnknown SAXXMLReader;

//Coclass: SAXXMLReader30 SAX XML Reader 3.0 coclass
// {3124C396-FB13-4836-A6AD-1317F1713688}
typedef IUnknown SAXXMLReader30;

//Coclass: SAXXMLReader40 SAX XML Reader 4.0 coclass
// {7C6E29BC-8B8B-4C3D-859E-AF6CD158BE0F}
typedef IUnknown SAXXMLReader40;

//Coclass: MXXMLWriter Microsoft XML Writer (version independent) coclass
// {FC220AD8-A72A-4EE8-926E-0B7AD152A020}
typedef IUnknown MXXMLWriter;

//Coclass: MXXMLWriter30 Microsoft XML Writer 3.0 coclass
// {3D813DFE-6C91-4A4E-8F41-04346A841D9C}
typedef IUnknown MXXMLWriter30;

//Coclass: MXXMLWriter40 Microsoft XML Writer 4.0 coclass
// {88D969C8-F192-11D4-A65F-0040963251E5}
typedef IUnknown MXXMLWriter40;

//Coclass: MXHTMLWriter Microsoft HTML Writer (version independent) coclass
// {A4C23EC3-6B70-4466-9127-550077239978}
typedef IUnknown MXHTMLWriter;

//Coclass: MXHTMLWriter30 Microsoft HTML Writer 3.0 coclass
// {853D1540-C1A7-4AA9-A226-4D3BD301146D}
typedef IUnknown MXHTMLWriter30;

//Coclass: MXHTMLWriter40 Microsoft HTML Writer 4.0 coclass
// {88D969C9-F192-11D4-A65F-0040963251E5}
typedef IUnknown MXHTMLWriter40;

//Coclass: SAXAttributes SAX Attributes (version independent) coclass
// {4DD441AD-526D-4A77-9F1B-9841ED802FB0}
typedef IUnknown SAXAttributes;

//Coclass: SAXAttributes30 SAX Attributes 3.0 coclass
// {3E784A01-F3AE-4DC0-9354-9526B9370EBA}
typedef IUnknown SAXAttributes30;

//Coclass: SAXAttributes40 SAX Attributes 4.0 coclass
// {88D969CA-F192-11D4-A65F-0040963251E5}
typedef IUnknown SAXAttributes40;

//Coclass: MXNamespaceManager MX Namespace Manager coclass
// {88D969D5-F192-11D4-A65F-0040963251E5}
typedef IUnknown MXNamespaceManager;

//Coclass: MXNamespaceManager40 MX Namespace Manager 4.0 coclass
// {88D969D6-F192-11D4-A65F-0040963251E5}
typedef IUnknown MXNamespaceManager40;

//Coclass: XMLDocument XMLDocument extends IXML Document.  It is obsolete.  You should use DOMDocument.  This object should not be confused with the XMLDocument property on the XML data island.
// {CFC399AF-D876-11D0-9C10-00C04FC99C8E}
// typedef IUnknown XMLDocument;

//------------------------------------------------------------
//Declaration of GUID's

DEFINE_GUID(IID_IXMLDOMNode, 0x2933bf80, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMDocument, 0x2933bf81, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMDocument2, 0x2933bf95, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_CoDOMDocument, 0xf6d90f11, 0x9c73, 0x11d3, 0xb3, 0x2e, 0x0, 0xc0, 0x4f, 0x99, 0xb, 0xb4);
DEFINE_GUID(IID_CoDOMDocument26, 0xf5078f1b, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoDOMDocument30, 0xf5078f32, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoDOMDocument40, 0x88d969c0, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_CoFreeThreadedDOMDocument, 0xf6d90f12, 0x9c73, 0x11d3, 0xb3, 0x2e, 0x0, 0xc0, 0x4f, 0x99, 0xb, 0xb4);
DEFINE_GUID(IID_CoFreeThreadedDOMDocument26, 0xf5078f1c, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoFreeThreadedDOMDocument30, 0xf5078f33, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoFreeThreadedDOMDocument40, 0x88d969c1, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IXMLDOMSchemaCollection, 0x373984c8, 0xb845, 0x449b, 0x91, 0xe7, 0x45, 0xac, 0x83, 0x3, 0x6a, 0xde);
DEFINE_GUID(IID_CoXMLSchemaCache, 0x373984c9, 0xb845, 0x449b, 0x91, 0xe7, 0x45, 0xac, 0x83, 0x3, 0x6a, 0xde);
DEFINE_GUID(IID_CoXMLSchemaCache26, 0xf5078f1d, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoXMLSchemaCache30, 0xf5078f34, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_IXMLDOMSchemaCollection2, 0x50ea08b0, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_CoXMLSchemaCache40, 0x88d969c2, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IXSLTemplate, 0x2933bf93, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_CoXSLTemplate, 0x2933bf94, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_CoXSLTemplate26, 0xf5078f21, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoXSLTemplate30, 0xf5078f36, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoXSLTemplate40, 0x88d969c3, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IDSOControl, 0x310afa62, 0x575, 0x11d2, 0x9c, 0xa9, 0x0, 0x60, 0xb0, 0xec, 0x3d, 0x39);
DEFINE_GUID(IID_CoDSOControl, 0xf6d90f14, 0x9c73, 0x11d3, 0xb3, 0x2e, 0x0, 0xc0, 0x4f, 0x99, 0xb, 0xb4);
DEFINE_GUID(IID_CoDSOControl26, 0xf5078f1f, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoDSOControl30, 0xf5078f39, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoDSOControl40, 0x88d969c4, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IXMLHTTPRequest, 0xed8c108d, 0x4349, 0x11d2, 0x91, 0xa4, 0x0, 0xc0, 0x4f, 0x79, 0x69, 0xe8);
DEFINE_GUID(IID_CoXMLHTTP, 0xf6d90f16, 0x9c73, 0x11d3, 0xb3, 0x2e, 0x0, 0xc0, 0x4f, 0x99, 0xb, 0xb4);
DEFINE_GUID(IID_CoXMLHTTP26, 0xf5078f1e, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoXMLHTTP30, 0xf5078f35, 0xc551, 0x11d3, 0x89, 0xb9, 0x0, 0x0, 0xf8, 0x1f, 0xe2, 0x21);
DEFINE_GUID(IID_CoXMLHTTP40, 0x88d969c5, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IServerXMLHTTPRequest, 0x2e9196bf, 0x13ba, 0x4dd4, 0x91, 0xca, 0x6c, 0x57, 0x1f, 0x28, 0x14, 0x95);
DEFINE_GUID(IID_IServerXMLHTTPRequest2, 0x2e01311b, 0xc322, 0x4b0a, 0xbd, 0x77, 0xb9, 0xc, 0xfd, 0xc8, 0xdc, 0xe7);
DEFINE_GUID(IID_CoServerXMLHTTP, 0xafba6b42, 0x5692, 0x48ea, 0x81, 0x41, 0xdc, 0x51, 0x7d, 0xcf, 0xe, 0xf1);
DEFINE_GUID(IID_CoServerXMLHTTP30, 0xafb40ffd, 0xb609, 0x40a3, 0x98, 0x28, 0xf8, 0x8b, 0xbe, 0x11, 0xe4, 0xe3);
DEFINE_GUID(IID_CoServerXMLHTTP40, 0x88d969c6, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IVBSAXXMLReader, 0x8c033caa, 0x6cd6, 0x4f73, 0xb7, 0x28, 0x45, 0x31, 0xaf, 0x74, 0x94, 0x5f);
DEFINE_GUID(IID_ISAXXMLReader, 0xa4f96ed0, 0xf829, 0x476e, 0x81, 0xc0, 0xcd, 0xc7, 0xbd, 0x2a, 0x8, 0x2);
DEFINE_GUID(IID_IMXReaderControl, 0x808f4e35, 0x8d5a, 0x4fbe, 0x84, 0x66, 0x33, 0xa4, 0x12, 0x79, 0xed, 0x30);
DEFINE_GUID(IID_CoSAXXMLReader, 0x79aa557, 0x4a18, 0x424a, 0x8e, 0xee, 0xe3, 0x9f, 0xa, 0x8d, 0x41, 0xb9);
DEFINE_GUID(IID_CoSAXXMLReader30, 0x3124c396, 0xfb13, 0x4836, 0xa6, 0xad, 0x13, 0x17, 0xf1, 0x71, 0x36, 0x88);
DEFINE_GUID(IID_CoSAXXMLReader40, 0x7c6e29bc, 0x8b8b, 0x4c3d, 0x85, 0x9e, 0xaf, 0x6c, 0xd1, 0x58, 0xbe, 0xf);
DEFINE_GUID(IID_IMXWriter, 0x4d7ff4ba, 0x1565, 0x4ea8, 0x94, 0xe1, 0x6e, 0x72, 0x4a, 0x46, 0xf9, 0x8d);
DEFINE_GUID(IID_ISAXContentHandler, 0x1545cdfa, 0x9e4e, 0x4497, 0xa8, 0xa4, 0x2b, 0xf7, 0xd0, 0x11, 0x2c, 0x44);
DEFINE_GUID(IID_ISAXErrorHandler, 0xa60511c4, 0xccf5, 0x479e, 0x98, 0xa3, 0xdc, 0x8d, 0xc5, 0x45, 0xb7, 0xd0);
DEFINE_GUID(IID_ISAXDTDHandler, 0xe15c1baf, 0xafb3, 0x4d60, 0x8c, 0x36, 0x19, 0xa8, 0xc4, 0x5d, 0xef, 0xed);
DEFINE_GUID(IID_ISAXLexicalHandler, 0x7f85d5f5, 0x47a8, 0x4497, 0xbd, 0xa5, 0x84, 0xba, 0x4, 0x81, 0x9e, 0xa6);
DEFINE_GUID(IID_ISAXDeclHandler, 0x862629ac, 0x771a, 0x47b2, 0x83, 0x37, 0x4e, 0x68, 0x43, 0xc1, 0xbe, 0x90);
DEFINE_GUID(IID_IVBSAXContentHandler, 0x2ed7290a, 0x4dd5, 0x4b46, 0xbb, 0x26, 0x4e, 0x41, 0x55, 0xe7, 0x7f, 0xaa);
DEFINE_GUID(IID_IVBSAXDeclHandler, 0xe8917260, 0x7579, 0x4be1, 0xb5, 0xdd, 0x7a, 0xfb, 0xfa, 0x6f, 0x7, 0x7b);
DEFINE_GUID(IID_IVBSAXDTDHandler, 0x24fb3297, 0x302d, 0x4620, 0xba, 0x39, 0x3a, 0x73, 0x2d, 0x85, 0x5, 0x58);
DEFINE_GUID(IID_IVBSAXErrorHandler, 0xd963d3fe, 0x173c, 0x4862, 0x90, 0x95, 0xb9, 0x2f, 0x66, 0x99, 0x5f, 0x52);
DEFINE_GUID(IID_IVBSAXLexicalHandler, 0x32aac35, 0x8c0e, 0x4d9d, 0x97, 0x9f, 0xe3, 0xb7, 0x2, 0x93, 0x55, 0x76);
DEFINE_GUID(IID_CoMXXMLWriter, 0xfc220ad8, 0xa72a, 0x4ee8, 0x92, 0x6e, 0xb, 0x7a, 0xd1, 0x52, 0xa0, 0x20);
DEFINE_GUID(IID_CoMXXMLWriter30, 0x3d813dfe, 0x6c91, 0x4a4e, 0x8f, 0x41, 0x4, 0x34, 0x6a, 0x84, 0x1d, 0x9c);
DEFINE_GUID(IID_CoMXXMLWriter40, 0x88d969c8, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_CoMXHTMLWriter, 0xa4c23ec3, 0x6b70, 0x4466, 0x91, 0x27, 0x55, 0x0, 0x77, 0x23, 0x99, 0x78);
DEFINE_GUID(IID_CoMXHTMLWriter30, 0x853d1540, 0xc1a7, 0x4aa9, 0xa2, 0x26, 0x4d, 0x3b, 0xd3, 0x1, 0x14, 0x6d);
DEFINE_GUID(IID_CoMXHTMLWriter40, 0x88d969c9, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IMXAttributes, 0xf10d27cc, 0x3ec0, 0x415c, 0x8e, 0xd8, 0x77, 0xab, 0x1c, 0x5e, 0x72, 0x62);
DEFINE_GUID(IID_IVBSAXAttributes, 0x10dc0586, 0x132b, 0x4cac, 0x8b, 0xb3, 0xdb, 0x0, 0xac, 0x8b, 0x7e, 0xe0);
DEFINE_GUID(IID_ISAXAttributes, 0xf078abe1, 0x45d2, 0x4832, 0x91, 0xea, 0x44, 0x66, 0xce, 0x2f, 0x25, 0xc9);
DEFINE_GUID(IID_CoSAXAttributes, 0x4dd441ad, 0x526d, 0x4a77, 0x9f, 0x1b, 0x98, 0x41, 0xed, 0x80, 0x2f, 0xb0);
DEFINE_GUID(IID_CoSAXAttributes30, 0x3e784a01, 0xf3ae, 0x4dc0, 0x93, 0x54, 0x95, 0x26, 0xb9, 0x37, 0xe, 0xba);
DEFINE_GUID(IID_CoSAXAttributes40, 0x88d969ca, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IVBMXNamespaceManager, 0xc90352f5, 0x643c, 0x4fbc, 0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd);
DEFINE_GUID(IID_IMXNamespaceManager, 0xc90352f6, 0x643c, 0x4fbc, 0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd);
DEFINE_GUID(IID_CoMXNamespaceManager, 0x88d969d5, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_CoMXNamespaceManager40, 0x88d969d6, 0xf192, 0x11d4, 0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5);
DEFINE_GUID(IID_IXMLDocument2, 0x2b8de2fe, 0x8d2d, 0x11d1, 0xb2, 0xfc, 0x0, 0xc0, 0x4f, 0xd9, 0x15, 0xa9);
DEFINE_GUID(IID_CoXMLDocument, 0xcfc399af, 0xd876, 0x11d0, 0x9c, 0x10, 0x0, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e);
DEFINE_GUID(IID_ISAXEntityResolver, 0x99bca7bd, 0xe8c4, 0x4d5f, 0xa0, 0xcf, 0x6d, 0x90, 0x79, 0x1, 0xff, 0x7);
DEFINE_GUID(IID_ISAXLocator, 0x9b7e472a, 0xde4, 0x4640, 0xbf, 0xf3, 0x84, 0xd3, 0x8a, 0x5, 0x1c, 0x31);
DEFINE_GUID(IID_IMXNamespacePrefixes, 0xc90352f4, 0x643c, 0x4fbc, 0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd);
DEFINE_GUID(IID_ISchemaItem, 0x50ea08b3, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchema, 0x50ea08b4, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaStringCollection, 0x50ea08b1, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_IVBSAXEntityResolver, 0xc05d096, 0xf45b, 0x4aca, 0xad, 0x1a, 0xaa, 0xb, 0xc2, 0x55, 0x18, 0xdc);
DEFINE_GUID(IID_IVBSAXLocator, 0x796e7ac5, 0x5aa2, 0x4eff, 0xac, 0xad, 0x3f, 0xaa, 0xf0, 0x1a, 0x32, 0x88);
DEFINE_GUID(IID_IXMLDOMAttribute, 0x2933bf85, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMCharacterData, 0x2933bf84, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMText, 0x2933bf87, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMCDATASection, 0x2933bf8a, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMComment, 0x2933bf88, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMDocumentFragment, 0x3efaa413, 0x272f, 0x11d2, 0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82);
DEFINE_GUID(IID_IXMLDOMDocumentType, 0x2933bf8b, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMElement, 0x2933bf86, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMEntityReference, 0x2933bf8e, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMImplementation, 0x2933bf8f, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMNamedNodeMap, 0x2933bf83, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMNodeList, 0x2933bf82, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMParseError, 0x3efaa426, 0x272f, 0x11d2, 0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82);
DEFINE_GUID(IID_IXMLDOMProcessingInstruction, 0x2933bf89, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLElement2, 0x2b8de2ff, 0x8d2d, 0x11d1, 0xb2, 0xfc, 0x0, 0xc0, 0x4f, 0xd9, 0x15, 0xa9);
DEFINE_GUID(IID_IXMLElementCollection, 0x65725580, 0x9b5d, 0x11d0, 0x9b, 0xfe, 0x0, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e);
DEFINE_GUID(IID_IXSLProcessor, 0x2933bf92, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_ISchemaItemCollection, 0x50ea08b2, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_IXMLDOMNotation, 0x2933bf8c, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXMLDOMEntity, 0x2933bf8d, 0x7b36, 0x11d2, 0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60);
DEFINE_GUID(IID_IXTLRuntime, 0x3efaa425, 0x272f, 0x11d2, 0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82);
DEFINE_GUID(IID_ISAXXMLFilter, 0x70409222, 0xca09, 0x4475, 0xac, 0xb8, 0x40, 0x31, 0x2f, 0xe8, 0xd1, 0x45);
DEFINE_GUID(IID_IVBSAXXMLFilter, 0x1299eb1b, 0x5b88, 0x433e, 0x82, 0xde, 0x82, 0xca, 0x75, 0xad, 0x4e, 0x4);
DEFINE_GUID(IID_IMXSchemaDeclHandler, 0xfa4bb38c, 0xfaf9, 0x4cca, 0x93, 0x2, 0xd1, 0xdd, 0xf, 0xe5, 0x20, 0xdb);
DEFINE_GUID(IID_ISchemaParticle, 0x50ea08b5, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaElement, 0x50ea08b7, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaType, 0x50ea08b8, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaComplexType, 0x50ea08b9, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaAny, 0x50ea08bc, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaModelGroup, 0x50ea08bb, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaAttribute, 0x50ea08b6, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaAttributeGroup, 0x50ea08ba, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaIdentityConstraint, 0x50ea08bd, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_ISchemaNotation, 0x50ea08be, 0xdd1b, 0x4664, 0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a);
DEFINE_GUID(IID_IXMLDocument, 0xf52e2b61, 0x18a1, 0x11d1, 0xb1, 0x5, 0x0, 0x80, 0x5f, 0x49, 0x91, 0x6b);
DEFINE_GUID(IID_IXMLElement, 0x3f7f31ac, 0xe15f, 0x11d0, 0x9c, 0x25, 0x0, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e);
DEFINE_GUID(IID_IXMLAttribute, 0xd4d4a0fc, 0x3b73, 0x11d1, 0xb2, 0xb4, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0x96);
DEFINE_GUID(IID_IXMLError, 0x948c5ad3, 0xc58d, 0x11d0, 0x9c, 0xb, 0x0, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e);
DEFINE_GUID(IID_IXMLDOMSelection, 0xaa634fc7, 0x5888, 0x44a7, 0xa2, 0x57, 0x3a, 0x47, 0x15, 0xd, 0x3a, 0xe);

#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDOMNode
// Core DOM node interface
// {2933BF80-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMNode

DECLARE_INTERFACE_(IXMLDOMNode, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE;
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE;
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
};

typedef IXMLDOMNode* LPXMLDOMNODE;

#ifdef __cplusplus
}
#endif  // __cplusplus




#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMDocument
// {2933BF81-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMDocument

DECLARE_INTERFACE_(IXMLDOMDocument, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMDocument methods:
	STDMETHOD_(HRESULT, Get_doctype) (THIS_ IXMLDOMDocumentType** documentType) PURE; // node corresponding to the DOCTYPE
	STDMETHOD_(HRESULT, Get_implementation) (THIS_ IXMLDOMImplementation** impl) PURE; // info on this DOM implementation
	STDMETHOD_(HRESULT, Get_documentElement) (THIS_ IXMLDOMElement** DOMElement) PURE; // the root of the tree
	STDMETHOD_(HRESULT, SetRef_documentElement) (THIS_ IXMLDOMElement* DOMElement) PURE; // the root of the tree
	STDMETHOD_(HRESULT, createElement) (THIS_ BSTR tagName, IXMLDOMElement** element) PURE; // create an Element node
	STDMETHOD_(HRESULT, createDocumentFragment) (THIS_ IXMLDOMDocumentFragment** docFrag) PURE; // create a DocumentFragment node
	STDMETHOD_(HRESULT, createTextNode) (THIS_ BSTR data, IXMLDOMText** text) PURE; // create a text node
	STDMETHOD_(HRESULT, createComment) (THIS_ BSTR data, IXMLDOMComment** comment) PURE; // create a comment node
	STDMETHOD_(HRESULT, createCDATASection) (THIS_ BSTR data, IXMLDOMCDATASection** cdata) PURE; // create a CDATA section node
	STDMETHOD_(HRESULT, createProcessingInstruction) (THIS_ BSTR target, BSTR data, IXMLDOMProcessingInstruction** pi) PURE; // create a processing instruction node
	STDMETHOD_(HRESULT, createAttribute) (THIS_ BSTR name, IXMLDOMAttribute** attribute) PURE; // create an attribute node
	STDMETHOD_(HRESULT, createEntityReference) (THIS_ BSTR name, IXMLDOMEntityReference** entityRef) PURE; // create an entity reference node
	STDMETHOD_(HRESULT, getElementsByTagName) (THIS_ BSTR tagName, IXMLDOMNodeList** resultList) PURE; // build a list of elements by name
	STDMETHOD_(HRESULT, createNode) (THIS_ VARIANT type, BSTR name, BSTR namespaceURI, IXMLDOMNode** node) PURE; // create a node of the specified node type and name
	STDMETHOD_(HRESULT, nodeFromID) (THIS_ BSTR idString, IXMLDOMNode** node) PURE; // retrieve node from it's ID
	STDMETHOD_(HRESULT, load) (THIS_ VARIANT xmlSource, VARIANT_BOOL* isSuccessful) PURE; // load document from the specified XML source
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* value) PURE; // get the state of the XML document
	STDMETHOD_(HRESULT, Get_parseError) (THIS_ IXMLDOMParseError** errorObj) PURE; // get the last parser error
	STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* urlString) PURE; // get the URL for the loaded XML document
	STDMETHOD_(HRESULT, Get_async) (THIS_ VARIANT_BOOL* isAsync) PURE; // flag for asynchronous download
	STDMETHOD_(HRESULT, Set_async) (THIS_ VARIANT_BOOL isAsync) PURE; // flag for asynchronous download
	STDMETHOD_(HRESULT, abort) (THIS ) PURE; // abort an asynchronous download
	STDMETHOD_(HRESULT, loadXML) (THIS_ BSTR bstrXML, VARIANT_BOOL* isSuccessful) PURE; // load the document from a string
	STDMETHOD_(HRESULT, save) (THIS_ VARIANT destination) PURE; // save the document to a specified destination
	STDMETHOD_(HRESULT, Get_validateOnParse) (THIS_ VARIANT_BOOL* isValidating) PURE; // indicates whether the parser performs validation
	STDMETHOD_(HRESULT, Set_validateOnParse) (THIS_ VARIANT_BOOL isValidating) PURE; // indicates whether the parser performs validation
	STDMETHOD_(HRESULT, Get_resolveExternals) (THIS_ VARIANT_BOOL* isResolving) PURE; // indicates whether the parser resolves references to external DTD/Entities/Schema
	STDMETHOD_(HRESULT, Set_resolveExternals) (THIS_ VARIANT_BOOL isResolving) PURE; // indicates whether the parser resolves references to external DTD/Entities/Schema
	STDMETHOD_(HRESULT, Get_preserveWhiteSpace) (THIS_ VARIANT_BOOL* isPreserving) PURE; // indicates whether the parser preserves whitespace
	STDMETHOD_(HRESULT, Set_preserveWhiteSpace) (THIS_ VARIANT_BOOL isPreserving) PURE; // indicates whether the parser preserves whitespace
	STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ VARIANT ) PURE; // register a readystatechange event handler
	STDMETHOD_(HRESULT, Set_ondataavailable) (THIS_ VARIANT ) PURE; // register an ondataavailable event handler
	STDMETHOD_(HRESULT, Set_ontransformnode) (THIS_ VARIANT ) PURE; // register an ontransformnode event handler
};

typedef IXMLDOMDocument* LPXMLDOMDOCUMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMDocument2
// {2933BF95-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMDocument2

DECLARE_INTERFACE_(IXMLDOMDocument2, IXMLDOMDocument)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** DOMDocument) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
	//IXMLDOMDocument methods:
	STDMETHOD_(HRESULT, Get_doctype) (THIS_ IXMLDOMDocumentType** documentType) PURE; // node corresponding to the DOCTYPE
	STDMETHOD_(HRESULT, Get_implementation) (THIS_ IXMLDOMImplementation** impl) PURE; // info on this DOM implementation
	STDMETHOD_(HRESULT, Get_documentElement) (THIS_ IXMLDOMElement** DOMElement) PURE; // the root of the tree
	STDMETHOD_(HRESULT, SetRef_documentElement) (THIS_ IXMLDOMElement* DOMElement) PURE; // the root of the tree
	STDMETHOD_(HRESULT, createElement) (THIS_ BSTR tagName, IXMLDOMElement** element) PURE; // create an Element node
	STDMETHOD_(HRESULT, createDocumentFragment) (THIS_ IXMLDOMDocumentFragment** docFrag) PURE; // create a DocumentFragment node
	STDMETHOD_(HRESULT, createTextNode) (THIS_ BSTR data, IXMLDOMText** text) PURE; // create a text node
	STDMETHOD_(HRESULT, createComment) (THIS_ BSTR data, IXMLDOMComment** comment) PURE; // create a comment node
	STDMETHOD_(HRESULT, createCDATASection) (THIS_ BSTR data, IXMLDOMCDATASection** cdata) PURE; // create a CDATA section node
	STDMETHOD_(HRESULT, createProcessingInstruction) (THIS_ BSTR target, BSTR data, IXMLDOMProcessingInstruction** pi) PURE; // create a processing instruction node
	STDMETHOD_(HRESULT, createAttribute) (THIS_ BSTR name, IXMLDOMAttribute** attribute) PURE; // create an attribute node
	STDMETHOD_(HRESULT, createEntityReference) (THIS_ BSTR name, IXMLDOMEntityReference** entityRef) PURE; // create an entity reference node
	STDMETHOD_(HRESULT, getElementsByTagName) (THIS_ BSTR tagName, IXMLDOMNodeList** resultList) PURE; // build a list of elements by name
	STDMETHOD_(HRESULT, createNode) (THIS_ VARIANT type, BSTR name, BSTR namespaceURI, IXMLDOMNode** node) PURE; // create a node of the specified node type and name
	STDMETHOD_(HRESULT, nodeFromID) (THIS_ BSTR idString, IXMLDOMNode** node) PURE; // retrieve node from it's ID
	STDMETHOD_(HRESULT, load) (THIS_ VARIANT xmlSource, VARIANT_BOOL* isSuccessful) PURE; // load document from the specified XML source
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* value) PURE; // get the state of the XML document
	STDMETHOD_(HRESULT, Get_parseError) (THIS_ IXMLDOMParseError** errorObj) PURE; // get the last parser error
	STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* urlString) PURE; // get the URL for the loaded XML document
	STDMETHOD_(HRESULT, Get_async) (THIS_ VARIANT_BOOL* isAsync) PURE; // flag for asynchronous download
	STDMETHOD_(HRESULT, Set_async) (THIS_ VARIANT_BOOL isAsync) PURE; // flag for asynchronous download
	STDMETHOD_(HRESULT, abort) (THIS ) PURE; // abort an asynchronous download
	STDMETHOD_(HRESULT, loadXML) (THIS_ BSTR bstrXML, VARIANT_BOOL* isSuccessful) PURE; // load the document from a string
	STDMETHOD_(HRESULT, save) (THIS_ VARIANT destination) PURE; // save the document to a specified destination
	STDMETHOD_(HRESULT, Get_validateOnParse) (THIS_ VARIANT_BOOL* isValidating) PURE; // indicates whether the parser performs validation
	STDMETHOD_(HRESULT, Set_validateOnParse) (THIS_ VARIANT_BOOL isValidating) PURE; // indicates whether the parser performs validation
	STDMETHOD_(HRESULT, Get_resolveExternals) (THIS_ VARIANT_BOOL* isResolving) PURE; // indicates whether the parser resolves references to external DTD/Entities/Schema
	STDMETHOD_(HRESULT, Set_resolveExternals) (THIS_ VARIANT_BOOL isResolving) PURE; // indicates whether the parser resolves references to external DTD/Entities/Schema
	STDMETHOD_(HRESULT, Get_preserveWhiteSpace) (THIS_ VARIANT_BOOL* isPreserving) PURE; // indicates whether the parser preserves whitespace
	STDMETHOD_(HRESULT, Set_preserveWhiteSpace) (THIS_ VARIANT_BOOL isPreserving) PURE; // indicates whether the parser preserves whitespace
	STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ VARIANT ) PURE; // register a readystatechange event handler
	STDMETHOD_(HRESULT, Set_ondataavailable) (THIS_ VARIANT ) PURE; // register an ondataavailable event handler
	STDMETHOD_(HRESULT, Set_ontransformnode) (THIS_ VARIANT ) PURE; // register an ontransformnode event handler
#endif
	//IXMLDOMDocument2 methods:
	STDMETHOD_(HRESULT, Get_namespaces) (THIS_ IXMLDOMSchemaCollection** namespaceCollection) PURE; // A collection of all namespaces for this document
	STDMETHOD_(HRESULT, Get_schemas) (THIS_ VARIANT* otherCollection) PURE; // The associated schema cache
	STDMETHOD_(HRESULT, SetRef_schemas) (THIS_ VARIANT otherCollection) PURE; // The associated schema cache
	STDMETHOD_(HRESULT, validate) (THIS_ IXMLDOMParseError** errorObj) PURE; // perform runtime validation on the currently loaded XML document
	STDMETHOD_(HRESULT, setProperty) (THIS_ BSTR name, VARIANT value) PURE; // set the value of the named property
	STDMETHOD_(HRESULT, getProperty) (THIS_ BSTR name, VARIANT* value) PURE; // get the value of the named property
};

typedef IXMLDOMDocument2* LPXMLDOMDOCUMENT2;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMDocument2  {2933BF95-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMDocument2Proxy : public TAutoProxy
{
public:
	TIXMLDOMDocument2Proxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//doctype: node corresponding to the DOCTYPE  [dispid 38]
	void doctype(TIXMLDOMDocumentTypeProxy& Obj);

	//implementation: info on this DOM implementation  [dispid 39]
	void implementation(TIXMLDOMImplementationProxy& Obj);

	//documentElement: the root of the tree  [dispid 40]
	void documentElement(TIXMLDOMElementProxy& Obj);

	//documentElement: the root of the tree  [dispid 40]
	void documentElement(IXMLDOMElement* arg0);

	//createElement: create an Element node  [dispid 41]
	void createElement(TIXMLDOMElementProxy& Obj, TAutoString tagName);

	//createDocumentFragment: create a DocumentFragment node  [dispid 42]
	void createDocumentFragment(TIXMLDOMDocumentFragmentProxy& Obj);

	//createTextNode: create a text node  [dispid 43]
	void createTextNode(TIXMLDOMTextProxy& Obj, TAutoString data);

	//createComment: create a comment node  [dispid 44]
	void createComment(TIXMLDOMCommentProxy& Obj, TAutoString data);

	//createCDATASection: create a CDATA section node  [dispid 45]
	void createCDATASection(TIXMLDOMCDATASectionProxy& Obj, TAutoString data);

	//createProcessingInstruction: create a processing instruction node  [dispid 46]
	void createProcessingInstruction(TIXMLDOMProcessingInstructionProxy& Obj, TAutoString target, TAutoString data);

	//createAttribute: create an attribute node  [dispid 47]
	void createAttribute(TIXMLDOMAttributeProxy& Obj, TAutoString name);

	//createEntityReference: create an entity reference node  [dispid 49]
	void createEntityReference(TIXMLDOMEntityReferenceProxy& Obj, TAutoString name);

	//getElementsByTagName: build a list of elements by name  [dispid 50]
	void getElementsByTagName(TIXMLDOMNodeListProxy& Obj, TAutoString tagName);

	//createNode: create a node of the specified node type and name  [dispid 54]
	void createNode(TIXMLDOMNodeProxy& Obj, TAutoVal type, TAutoString name, TAutoString namespaceURI);

	//nodeFromID: retrieve node from it's ID  [dispid 56]
	void nodeFromID(TIXMLDOMNodeProxy& Obj, TAutoString idString);

	//load: load document from the specified XML source  [dispid 58]
	TBool load(TAutoVal xmlSource);

	//readyState: get the state of the XML document  [dispid -525]
	long readyState();

	//parseError: get the last parser error  [dispid 59]
	void parseError(TIXMLDOMParseErrorProxy& Obj);

	//url: get the URL for the loaded XML document  [dispid 60]
	TAutoString url();

	//async: flag for asynchronous download  [dispid 61]
	TBool async();

	//async: flag for asynchronous download  [dispid 61]
	void async(TBool arg0);

	//abort: abort an asynchronous download  [dispid 62]
	void abort();

	//loadXML: load the document from a string  [dispid 63]
	TBool loadXML(TAutoString bstrXML);

	//save: save the document to a specified destination  [dispid 64]
	void save(TAutoVal destination);

	//validateOnParse: indicates whether the parser performs validation  [dispid 65]
	TBool validateOnParse();

	//validateOnParse: indicates whether the parser performs validation  [dispid 65]
	void validateOnParse(TBool arg0);

	//resolveExternals: indicates whether the parser resolves references to external DTD/Entities/Schema  [dispid 66]
	TBool resolveExternals();

	//resolveExternals: indicates whether the parser resolves references to external DTD/Entities/Schema  [dispid 66]
	void resolveExternals(TBool arg0);

	//preserveWhiteSpace: indicates whether the parser preserves whitespace  [dispid 67]
	TBool preserveWhiteSpace();

	//preserveWhiteSpace: indicates whether the parser preserves whitespace  [dispid 67]
	void preserveWhiteSpace(TBool arg0);

	//onreadystatechange: register a readystatechange event handler  [dispid 68]
	void onreadystatechange(TAutoVal arg0);

	//ondataavailable: register an ondataavailable event handler  [dispid 69]
	void ondataavailable(TAutoVal arg0);

	//ontransformnode: register an ontransformnode event handler  [dispid 70]
	void ontransformnode(TAutoVal arg0);

	//namespaces: A collection of all namespaces for this document  [dispid 201]
	void namespaces(TIXMLDOMSchemaCollectionProxy& Obj);

	//schemas: The associated schema cache  [dispid 202]
	TAutoVal schemas();

	//schemas: The associated schema cache  [dispid 202]
	void schemas(TAutoVal arg0);

	//validate: perform runtime validation on the currently loaded XML document  [dispid 203]
	void validate(TIXMLDOMParseErrorProxy& Obj);

	//setProperty: set the value of the named property  [dispid 204]
	void setProperty(TAutoString name, TAutoVal value);

	//getProperty: get the value of the named property  [dispid 205]
	TAutoVal getProperty(TAutoString name);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMSchemaCollection
// XML Schemas Collection
// {373984C8-B845-449B-91E7-45AC83036ADE}

#undef  INTERFACE
#define INTERFACE IXMLDOMSchemaCollection

DECLARE_INTERFACE_(IXMLDOMSchemaCollection, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLDOMSchemaCollection methods:
	STDMETHOD_(HRESULT, add) (THIS_ BSTR namespaceURI, VARIANT var) PURE; // add a new schema
	STDMETHOD_(HRESULT, get) (THIS_ BSTR namespaceURI, IXMLDOMNode** schemaNode) PURE; // lookup schema by namespaceURI
	STDMETHOD_(HRESULT, remove) (THIS_ BSTR namespaceURI) PURE; // remove schema by namespaceURI
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* length) PURE; // number of schemas in collection
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ long index, BSTR* length) PURE; // Get namespaceURI for schema by index
	STDMETHOD_(HRESULT, addCollection) (THIS_ IXMLDOMSchemaCollection* otherCollection) PURE; // copy & merge other collection into this one
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE; 
};

typedef IXMLDOMSchemaCollection* LPXMLDOMSCHEMACOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMSchemaCollection  {373984C8-B845-449B-91E7-45AC83036ADE}
// XML Schemas Collection [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMSchemaCollectionProxy : public TAutoProxy
{
public:
	TIXMLDOMSchemaCollectionProxy() : TAutoProxy(0x0) {}

	//add: add a new schema  [dispid 2]
	void add(TAutoString namespaceURI, TAutoVal var);

	//get: lookup schema by namespaceURI  [dispid 3]
	void get(TIXMLDOMNodeProxy& Obj, TAutoString namespaceURI);

	//remove: remove schema by namespaceURI  [dispid 4]
	void remove(TAutoString namespaceURI);

	//length: number of schemas in collection  [dispid 5]
	long length();

	//namespaceURI: Get namespaceURI for schema by index  [dispid 0]
	TAutoString namespaceURI(long index);

	//addCollection: copy & merge other collection into this one  [dispid 6]
	void addCollection(IXMLDOMSchemaCollection* otherCollection);

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMSchemaCollection2
// XML Schemas Collection 2
// {50EA08B0-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE IXMLDOMSchemaCollection2

DECLARE_INTERFACE_(IXMLDOMSchemaCollection2, IXMLDOMSchemaCollection)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMSchemaCollection methods:
	STDMETHOD_(HRESULT, add) (THIS_ BSTR namespaceURI, VARIANT var) PURE; // add a new schema
	STDMETHOD_(HRESULT, get) (THIS_ BSTR namespaceURI, IXMLDOMNode** schemaNode) PURE; // lookup schema by namespaceURI
	STDMETHOD_(HRESULT, remove) (THIS_ BSTR namespaceURI) PURE; // remove schema by namespaceURI
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* length) PURE; // number of schemas in collection
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ long index, BSTR* length) PURE; // Get namespaceURI for schema by index
	STDMETHOD_(HRESULT, addCollection) (THIS_ IXMLDOMSchemaCollection* otherCollection) PURE; // copy & merge other collection into this one
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE; 
#endif
	//IXMLDOMSchemaCollection2 methods:
	STDMETHOD_(HRESULT, validate) (THIS ) PURE; 
	STDMETHOD_(HRESULT, Set_validateOnLoad) (THIS_ VARIANT_BOOL validateOnLoad) PURE; 
	STDMETHOD_(HRESULT, Get_validateOnLoad) (THIS_ VARIANT_BOOL* validateOnLoad) PURE; 
	STDMETHOD_(HRESULT, getSchema) (THIS_ BSTR namespaceURI, ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, getDeclaration) (THIS_ IXMLDOMNode* node, ISchemaItem** item) PURE; 
};

typedef IXMLDOMSchemaCollection2* LPXMLDOMSCHEMACOLLECTION2;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMSchemaCollection2  {50EA08B0-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schemas Collection 2 [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMSchemaCollection2Proxy : public TAutoProxy
{
public:
	TIXMLDOMSchemaCollection2Proxy() : TAutoProxy(0x0) {}

	//add: add a new schema  [dispid 2]
	void add(TAutoString namespaceURI, TAutoVal var);

	//get: lookup schema by namespaceURI  [dispid 3]
	void get(TIXMLDOMNodeProxy& Obj, TAutoString namespaceURI);

	//remove: remove schema by namespaceURI  [dispid 4]
	void remove(TAutoString namespaceURI);

	//length: number of schemas in collection  [dispid 5]
	long length();

	//namespaceURI: Get namespaceURI for schema by index  [dispid 0]
	TAutoString namespaceURI(long index);

	//addCollection: copy & merge other collection into this one  [dispid 6]
	void addCollection(IXMLDOMSchemaCollection* otherCollection);

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

	//validate:   [dispid 1419]
	void validate();

	//validateOnLoad:   [dispid 1420]
	void validateOnLoad(TBool arg0);

	//validateOnLoad:   [dispid 1420]
	TBool validateOnLoad();

	//getSchema:   [dispid 1421]
	void getSchema(TISchemaProxy& Obj, TAutoString namespaceURI);

	//getDeclaration:   [dispid 1422]
	void getDeclaration(TISchemaItemProxy& Obj, IXMLDOMNode* node);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXSLTemplate
// IXSLTemplate Interface
// {2933BF93-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXSLTemplate

DECLARE_INTERFACE_(IXSLTemplate, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXSLTemplate methods:
	STDMETHOD_(HRESULT, SetRef_stylesheet) (THIS_ IXMLDOMNode* stylesheet) PURE; // stylesheet to use with processors
	STDMETHOD_(HRESULT, Get_stylesheet) (THIS_ IXMLDOMNode** stylesheet) PURE; // stylesheet to use with processors
	STDMETHOD_(HRESULT, createProcessor) (THIS_ IXSLProcessor** ppProcessor) PURE; // create a new processor object
};

typedef IXSLTemplate* LPXSLTEMPLATE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXSLTemplate  {2933BF93-7B36-11D2-B20E-00C04F983E60}
// IXSLTemplate Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXSLTemplateProxy : public TAutoProxy
{
public:
	TIXSLTemplateProxy() : TAutoProxy(0x0) {}

	//stylesheet: stylesheet to use with processors  [dispid 2]
	void stylesheet(IXMLDOMNode* arg0);

	//stylesheet: stylesheet to use with processors  [dispid 2]
	void stylesheet(TIXMLDOMNodeProxy& Obj);

	//createProcessor: create a new processor object  [dispid 3]
	void createProcessor(TIXSLProcessorProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IDSOControl
// DSO Control
// {310AFA62-0575-11D2-9CA9-0060B0EC3D39}

#undef  INTERFACE
#define INTERFACE IDSOControl

DECLARE_INTERFACE_(IDSOControl, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IDSOControl methods:
	STDMETHOD_(HRESULT, Get_XMLDocument) (THIS_ IXMLDOMDocument** ppDoc) PURE; 
	STDMETHOD_(HRESULT, Set_XMLDocument) (THIS_ IXMLDOMDocument* ppDoc) PURE; 
	STDMETHOD_(HRESULT, Get_JavaDSOCompatible) (THIS_ long* fJavaDSOCompatible) PURE; 
	STDMETHOD_(HRESULT, Set_JavaDSOCompatible) (THIS_ long fJavaDSOCompatible) PURE; 
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* state) PURE; 
};

typedef IDSOControl* LPDSOCONTROL;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IDSOControl  {310AFA62-0575-11D2-9CA9-0060B0EC3D39}
// DSO Control [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIDSOControlProxy : public TAutoProxy
{
public:
	TIDSOControlProxy() : TAutoProxy(0x0) {}

	//XMLDocument:   [dispid 65537]
	void XMLDocument(TIXMLDOMDocumentProxy& Obj);

	//XMLDocument:   [dispid 65537]
	void XMLDocument(IXMLDOMDocument* arg0);

	//JavaDSOCompatible:   [dispid 65538]
	long JavaDSOCompatible();

	//JavaDSOCompatible:   [dispid 65538]
	void JavaDSOCompatible(long arg0);

	//readyState:   [dispid -525]
	long readyState();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLHTTPRequest
// IXMLHTTPRequest Interface
// {ED8C108D-4349-11D2-91A4-00C04F7969E8}

#undef  INTERFACE
#define INTERFACE IXMLHTTPRequest

DECLARE_INTERFACE_(IXMLHTTPRequest, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLHTTPRequest methods:
	STDMETHOD_(HRESULT, open) (THIS_ BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword) PURE; // Open HTTP connection
	STDMETHOD_(HRESULT, setRequestHeader) (THIS_ BSTR bstrHeader, BSTR bstrValue) PURE; // Add HTTP request header
	STDMETHOD_(HRESULT, getResponseHeader) (THIS_ BSTR bstrHeader, BSTR* pbstrValue) PURE; // Get HTTP response header
	STDMETHOD_(HRESULT, getAllResponseHeaders) (THIS_ BSTR* pbstrHeaders) PURE; // Get all HTTP response headers
	STDMETHOD_(HRESULT, send) (THIS_ VARIANT varBody) PURE; // Send HTTP request
	STDMETHOD_(HRESULT, abort) (THIS ) PURE; // Abort HTTP request
	STDMETHOD_(HRESULT, Get_status) (THIS_ long* plStatus) PURE; // Get HTTP status code
	STDMETHOD_(HRESULT, Get_statusText) (THIS_ BSTR* pbstrStatus) PURE; // Get HTTP status text
	STDMETHOD_(HRESULT, Get_responseXML) (THIS_ IDispatch** ppBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseText) (THIS_ BSTR* pbstrBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseBody) (THIS_ VARIANT* pvarBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseStream) (THIS_ VARIANT* pvarBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* plState) PURE; // Get ready state
	STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ IDispatch* ) PURE; // Register a complete event handler
};

typedef IXMLHTTPRequest* LPXMLHTTPREQUEST;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLHTTPRequest  {ED8C108D-4349-11D2-91A4-00C04F7969E8}
// IXMLHTTPRequest Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLHTTPRequestProxy : public TAutoProxy
{
public:
	TIXMLHTTPRequestProxy() : TAutoProxy(0x0) {}

	//open: Open HTTP connection  [dispid 1]
	void open(TAutoString bstrMethod, TAutoString bstrUrl, TAutoVal varAsync = TNoArg(), TAutoVal bstrUser = TNoArg(), TAutoVal bstrPassword = TNoArg());

	//setRequestHeader: Add HTTP request header  [dispid 2]
	void setRequestHeader(TAutoString bstrHeader, TAutoString bstrValue);

	//getResponseHeader: Get HTTP response header  [dispid 3]
	TAutoString getResponseHeader(TAutoString bstrHeader);

	//getAllResponseHeaders: Get all HTTP response headers  [dispid 4]
	TAutoString getAllResponseHeaders();

	//send: Send HTTP request  [dispid 5]
	void send(TAutoVal varBody = TNoArg());

	//abort: Abort HTTP request  [dispid 6]
	void abort();

	//status: Get HTTP status code  [dispid 7]
	long status();

	//statusText: Get HTTP status text  [dispid 8]
	TAutoString statusText();

	//responseXML: Get response body  [dispid 9]
	IDispatch* responseXML();

	//responseText: Get response body  [dispid 10]
	TAutoString responseText();

	//responseBody: Get response body  [dispid 11]
	TAutoVal responseBody();

	//responseStream: Get response body  [dispid 12]
	TAutoVal responseStream();

	//readyState: Get ready state  [dispid 13]
	long readyState();

	//onreadystatechange: Register a complete event handler  [dispid 14]
	void onreadystatechange(IDispatch* arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IServerXMLHTTPRequest
// IServerXMLHTTPRequest Interface
// {2E9196BF-13BA-4DD4-91CA-6C571F281495}

#undef  INTERFACE
#define INTERFACE IServerXMLHTTPRequest

DECLARE_INTERFACE_(IServerXMLHTTPRequest, IXMLHTTPRequest)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLHTTPRequest methods:
	STDMETHOD_(HRESULT, open) (THIS_ BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword) PURE; // Open HTTP connection
	STDMETHOD_(HRESULT, setRequestHeader) (THIS_ BSTR bstrHeader, BSTR bstrValue) PURE; // Add HTTP request header
	STDMETHOD_(HRESULT, getResponseHeader) (THIS_ BSTR bstrHeader, BSTR* pbstrValue) PURE; // Get HTTP response header
	STDMETHOD_(HRESULT, getAllResponseHeaders) (THIS_ BSTR* pbstrHeaders) PURE; // Get all HTTP response headers
	STDMETHOD_(HRESULT, send) (THIS_ VARIANT varBody) PURE; // Send HTTP request
	STDMETHOD_(HRESULT, abort) (THIS ) PURE; // Abort HTTP request
	STDMETHOD_(HRESULT, Get_status) (THIS_ long* plStatus) PURE; // Get HTTP status code
	STDMETHOD_(HRESULT, Get_statusText) (THIS_ BSTR* pbstrStatus) PURE; // Get HTTP status text
	STDMETHOD_(HRESULT, Get_responseXML) (THIS_ IDispatch** ppBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseText) (THIS_ BSTR* pbstrBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseBody) (THIS_ VARIANT* pvarBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseStream) (THIS_ VARIANT* pvarBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* plState) PURE; // Get ready state
	STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ IDispatch* ) PURE; // Register a complete event handler
#endif
	//IServerXMLHTTPRequest methods:
	STDMETHOD_(HRESULT, setTimeouts) (THIS_ long resolveTimeout, long connectTimeout, long sendTimeout, long receiveTimeout) PURE; // Specify timeout settings (in milliseconds)
	STDMETHOD_(HRESULT, waitForResponse) (THIS_ VARIANT timeoutInSeconds, VARIANT_BOOL* isSuccessful) PURE; // Wait for asynchronous send to complete, with optional timeout (in seconds)
	STDMETHOD_(HRESULT, getOption) (THIS_ SERVERXMLHTTP_OPTION option, VARIANT* value) PURE; // Get an option value
	STDMETHOD_(HRESULT, setOption) (THIS_ SERVERXMLHTTP_OPTION option, VARIANT value) PURE; // Set an option value
};

typedef IServerXMLHTTPRequest* LPSERVERXMLHTTPREQUEST;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IServerXMLHTTPRequest2
// IServerXMLHTTPRequest2 Interface
// {2E01311B-C322-4B0A-BD77-B90CFDC8DCE7}

#undef  INTERFACE
#define INTERFACE IServerXMLHTTPRequest2

DECLARE_INTERFACE_(IServerXMLHTTPRequest2, IServerXMLHTTPRequest)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLHTTPRequest methods:
	STDMETHOD_(HRESULT, open) (THIS_ BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword) PURE; // Open HTTP connection
	STDMETHOD_(HRESULT, setRequestHeader) (THIS_ BSTR bstrHeader, BSTR bstrValue) PURE; // Add HTTP request header
	STDMETHOD_(HRESULT, getResponseHeader) (THIS_ BSTR bstrHeader, BSTR* pbstrValue) PURE; // Get HTTP response header
	STDMETHOD_(HRESULT, getAllResponseHeaders) (THIS_ BSTR* pbstrHeaders) PURE; // Get all HTTP response headers
	STDMETHOD_(HRESULT, send) (THIS_ VARIANT varBody) PURE; // Send HTTP request
	STDMETHOD_(HRESULT, abort) (THIS ) PURE; // Abort HTTP request
	STDMETHOD_(HRESULT, Get_status) (THIS_ long* plStatus) PURE; // Get HTTP status code
	STDMETHOD_(HRESULT, Get_statusText) (THIS_ BSTR* pbstrStatus) PURE; // Get HTTP status text
	STDMETHOD_(HRESULT, Get_responseXML) (THIS_ IDispatch** ppBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseText) (THIS_ BSTR* pbstrBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseBody) (THIS_ VARIANT* pvarBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_responseStream) (THIS_ VARIANT* pvarBody) PURE; // Get response body
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* plState) PURE; // Get ready state
	STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ IDispatch* ) PURE; // Register a complete event handler
	//IServerXMLHTTPRequest methods:
	STDMETHOD_(HRESULT, setTimeouts) (THIS_ long resolveTimeout, long connectTimeout, long sendTimeout, long receiveTimeout) PURE; // Specify timeout settings (in milliseconds)
	STDMETHOD_(HRESULT, waitForResponse) (THIS_ VARIANT timeoutInSeconds, VARIANT_BOOL* isSuccessful) PURE; // Wait for asynchronous send to complete, with optional timeout (in seconds)
	STDMETHOD_(HRESULT, getOption) (THIS_ SERVERXMLHTTP_OPTION option, VARIANT* value) PURE; // Get an option value
	STDMETHOD_(HRESULT, setOption) (THIS_ SERVERXMLHTTP_OPTION option, VARIANT value) PURE; // Set an option value
#endif
	//IServerXMLHTTPRequest2 methods:
	STDMETHOD_(HRESULT, setProxy) (THIS_ SXH_PROXY_SETTING proxySetting, VARIANT varProxyServer, VARIANT varBypassList) PURE; // Specify proxy configuration
	STDMETHOD_(HRESULT, setProxyCredentials) (THIS_ BSTR bstrUserName, BSTR bstrPassword) PURE; // Specify proxy authentication credentials
};

typedef IServerXMLHTTPRequest2* LPSERVERXMLHTTPREQUEST2;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IServerXMLHTTPRequest2  {2E01311B-C322-4B0A-BD77-B90CFDC8DCE7}
// IServerXMLHTTPRequest2 Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIServerXMLHTTPRequest2Proxy : public TAutoProxy
{
public:
	TIServerXMLHTTPRequest2Proxy() : TAutoProxy(0x0) {}

	//open: Open HTTP connection  [dispid 1]
	void open(TAutoString bstrMethod, TAutoString bstrUrl, TAutoVal varAsync = TNoArg(), TAutoVal bstrUser = TNoArg(), TAutoVal bstrPassword = TNoArg());

	//setRequestHeader: Add HTTP request header  [dispid 2]
	void setRequestHeader(TAutoString bstrHeader, TAutoString bstrValue);

	//getResponseHeader: Get HTTP response header  [dispid 3]
	TAutoString getResponseHeader(TAutoString bstrHeader);

	//getAllResponseHeaders: Get all HTTP response headers  [dispid 4]
	TAutoString getAllResponseHeaders();

	//send: Send HTTP request  [dispid 5]
	void send(TAutoVal varBody = TNoArg());

	//abort: Abort HTTP request  [dispid 6]
	void abort();

	//status: Get HTTP status code  [dispid 7]
	long status();

	//statusText: Get HTTP status text  [dispid 8]
	TAutoString statusText();

	//responseXML: Get response body  [dispid 9]
	IDispatch* responseXML();

	//responseText: Get response body  [dispid 10]
	TAutoString responseText();

	//responseBody: Get response body  [dispid 11]
	TAutoVal responseBody();

	//responseStream: Get response body  [dispid 12]
	TAutoVal responseStream();

	//readyState: Get ready state  [dispid 13]
	long readyState();

	//onreadystatechange: Register a complete event handler  [dispid 14]
	void onreadystatechange(IDispatch* arg0);

	//setTimeouts: Specify timeout settings (in milliseconds)  [dispid 15]
	void setTimeouts(long resolveTimeout, long connectTimeout, long sendTimeout, long receiveTimeout);

	//waitForResponse: Wait for asynchronous send to complete, with optional timeout (in seconds)  [dispid 16]
	TBool waitForResponse(TAutoVal timeoutInSeconds = TNoArg());

	//getOption: Get an option value  [dispid 17]
	TAutoVal getOption(SERVERXMLHTTP_OPTION option);

	//setOption: Set an option value  [dispid 18]
	void setOption(SERVERXMLHTTP_OPTION option, TAutoVal value);

	//setProxy: Specify proxy configuration  [dispid 19]
	void setProxy(SXH_PROXY_SETTING proxySetting, TAutoVal varProxyServer = TNoArg(), TAutoVal varBypassList = TNoArg());

	//setProxyCredentials: Specify proxy authentication credentials  [dispid 20]
	void setProxyCredentials(TAutoString bstrUserName, TAutoString bstrPassword);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXXMLReader
// IVBSAXXMLReader interface
// {8C033CAA-6CD6-4F73-B728-4531AF74945F}

#undef  INTERFACE
#define INTERFACE IVBSAXXMLReader

DECLARE_INTERFACE_(IVBSAXXMLReader, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXXMLReader methods:
	STDMETHOD_(HRESULT, getFeature) (THIS_ BSTR strName, VARIANT_BOOL* fValue) PURE; // Look up the value of a feature.
	STDMETHOD_(HRESULT, putFeature) (THIS_ BSTR strName, VARIANT_BOOL fValue) PURE; // Set the state of a feature.
	STDMETHOD_(HRESULT, getProperty) (THIS_ BSTR strName, VARIANT* varValue) PURE; // Look up the value of a property.
	STDMETHOD_(HRESULT, putProperty) (THIS_ BSTR strName, VARIANT varValue) PURE; // Set the value of a property.
	STDMETHOD_(HRESULT, Get_entityResolver) (THIS_ IVBSAXEntityResolver** oResolver) PURE; // Allow an application to register an entity resolver or look up the current entity resolver.
	STDMETHOD_(HRESULT, SetRef_entityResolver) (THIS_ IVBSAXEntityResolver* oResolver) PURE; // Allow an application to register an entity resolver or look up the current entity resolver.
	STDMETHOD_(HRESULT, Get_contentHandler) (THIS_ IVBSAXContentHandler** oHandler) PURE; // Allow an application to register a content event handler or look up the current content event handler.
	STDMETHOD_(HRESULT, SetRef_contentHandler) (THIS_ IVBSAXContentHandler* oHandler) PURE; // Allow an application to register a content event handler or look up the current content event handler.
	STDMETHOD_(HRESULT, Get_dtdHandler) (THIS_ IVBSAXDTDHandler** oHandler) PURE; // Allow an application to register a DTD event handler or look up the current DTD event handler.
	STDMETHOD_(HRESULT, SetRef_dtdHandler) (THIS_ IVBSAXDTDHandler* oHandler) PURE; // Allow an application to register a DTD event handler or look up the current DTD event handler.
	STDMETHOD_(HRESULT, Get_errorHandler) (THIS_ IVBSAXErrorHandler** oHandler) PURE; // Allow an application to register an error event handler or look up the current error event handler.
	STDMETHOD_(HRESULT, SetRef_errorHandler) (THIS_ IVBSAXErrorHandler* oHandler) PURE; // Allow an application to register an error event handler or look up the current error event handler.
	STDMETHOD_(HRESULT, Get_baseURL) (THIS_ BSTR* strBaseURL) PURE; // Set or get the base URL for the document.
	STDMETHOD_(HRESULT, Set_baseURL) (THIS_ BSTR strBaseURL) PURE; // Set or get the base URL for the document.
	STDMETHOD_(HRESULT, Get_secureBaseURL) (THIS_ BSTR* strSecureBaseURL) PURE; // Set or get the secure base URL for the document.
	STDMETHOD_(HRESULT, Set_secureBaseURL) (THIS_ BSTR strSecureBaseURL) PURE; // Set or get the secure base URL for the document.
	STDMETHOD_(HRESULT, parse) (THIS_ VARIANT varInput) PURE; // Parse an XML document.
	STDMETHOD_(HRESULT, parseURL) (THIS_ BSTR strURL) PURE; // Parse an XML document from a system identifier (URI).
};

typedef IVBSAXXMLReader* LPVBSAXXMLREADER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXXMLReader  {8C033CAA-6CD6-4F73-B728-4531AF74945F}
// IVBSAXXMLReader interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXXMLReaderProxy : public TAutoProxy
{
public:
	TIVBSAXXMLReaderProxy() : TAutoProxy(0x0) {}

	//getFeature: Look up the value of a feature.  [dispid 1282]
	TBool getFeature(TAutoString strName);

	//putFeature: Set the state of a feature.  [dispid 1283]
	void putFeature(TAutoString strName, TBool fValue);

	//getProperty: Look up the value of a property.  [dispid 1284]
	TAutoVal getProperty(TAutoString strName);

	//putProperty: Set the value of a property.  [dispid 1285]
	void putProperty(TAutoString strName, TAutoVal varValue);

	//entityResolver: Allow an application to register an entity resolver or look up the current entity resolver.  [dispid 1286]
	void entityResolver(TIVBSAXEntityResolverProxy& Obj);

	//entityResolver: Allow an application to register an entity resolver or look up the current entity resolver.  [dispid 1286]
	void entityResolver(IVBSAXEntityResolver* arg0);

	//contentHandler: Allow an application to register a content event handler or look up the current content event handler.  [dispid 1287]
	void contentHandler(TIVBSAXContentHandlerProxy& Obj);

	//contentHandler: Allow an application to register a content event handler or look up the current content event handler.  [dispid 1287]
	void contentHandler(IVBSAXContentHandler* arg0);

	//dtdHandler: Allow an application to register a DTD event handler or look up the current DTD event handler.  [dispid 1288]
	void dtdHandler(TIVBSAXDTDHandlerProxy& Obj);

	//dtdHandler: Allow an application to register a DTD event handler or look up the current DTD event handler.  [dispid 1288]
	void dtdHandler(IVBSAXDTDHandler* arg0);

	//errorHandler: Allow an application to register an error event handler or look up the current error event handler.  [dispid 1289]
	void errorHandler(TIVBSAXErrorHandlerProxy& Obj);

	//errorHandler: Allow an application to register an error event handler or look up the current error event handler.  [dispid 1289]
	void errorHandler(IVBSAXErrorHandler* arg0);

	//baseURL: Set or get the base URL for the document.  [dispid 1290]
	TAutoString baseURL();

	//baseURL: Set or get the base URL for the document.  [dispid 1290]
	void baseURL(TAutoString arg0);

	//secureBaseURL: Set or get the secure base URL for the document.  [dispid 1291]
	TAutoString secureBaseURL();

	//secureBaseURL: Set or get the secure base URL for the document.  [dispid 1291]
	void secureBaseURL(TAutoString arg0);

	//parse: Parse an XML document.  [dispid 1292]
	void parse(TAutoVal varInput);

	//parseURL: Parse an XML document from a system identifier (URI).  [dispid 1293]
	void parseURL(TAutoString strURL);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXXMLReader
// ISAXXMLReader interface
// {A4F96ED0-F829-476E-81C0-CDC7BD2A0802}

#undef  INTERFACE
#define INTERFACE ISAXXMLReader

DECLARE_INTERFACE_(ISAXXMLReader, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXXMLReader methods:
	STDMETHOD_(HRESULT, getFeature) (THIS_ unsigned short* pwchName, VARIANT_BOOL* pvfValue) PURE; 
	STDMETHOD_(HRESULT, putFeature) (THIS_ unsigned short* pwchName, VARIANT_BOOL vfValue) PURE; 
	STDMETHOD_(HRESULT, getProperty) (THIS_ unsigned short* pwchName, VARIANT* pvarValue) PURE; 
	STDMETHOD_(HRESULT, putProperty) (THIS_ unsigned short* pwchName, VARIANT varValue) PURE; 
	STDMETHOD_(HRESULT, getEntityResolver) (THIS_ ISAXEntityResolver** ppResolver) PURE; 
	STDMETHOD_(HRESULT, putEntityResolver) (THIS_ ISAXEntityResolver* pResolver) PURE; 
	STDMETHOD_(HRESULT, getContentHandler) (THIS_ ISAXContentHandler** ppHandler) PURE; 
	STDMETHOD_(HRESULT, putContentHandler) (THIS_ ISAXContentHandler* pHandler) PURE; 
	STDMETHOD_(HRESULT, getDTDHandler) (THIS_ ISAXDTDHandler** ppHandler) PURE; 
	STDMETHOD_(HRESULT, putDTDHandler) (THIS_ ISAXDTDHandler* pHandler) PURE; 
	STDMETHOD_(HRESULT, getErrorHandler) (THIS_ ISAXErrorHandler** ppHandler) PURE; 
	STDMETHOD_(HRESULT, putErrorHandler) (THIS_ ISAXErrorHandler* pHandler) PURE; 
	STDMETHOD_(HRESULT, getBaseURL) (THIS_ unsigned short** ppwchBaseUrl) PURE; 
	STDMETHOD_(HRESULT, putBaseURL) (THIS_ unsigned short* pwchBaseUrl) PURE; 
	STDMETHOD_(HRESULT, getSecureBaseURL) (THIS_ unsigned short** ppwchSecureBaseUrl) PURE; 
	STDMETHOD_(HRESULT, putSecureBaseURL) (THIS_ unsigned short* pwchSecureBaseUrl) PURE; 
	STDMETHOD_(HRESULT, parse) (THIS_ VARIANT varInput) PURE; 
	STDMETHOD_(HRESULT, parseURL) (THIS_ unsigned short* pwchUrl) PURE; 
};

typedef ISAXXMLReader* LPSAXXMLREADER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IMXReaderControl
// IMXReaderControl interface
// {808F4E35-8D5A-4FBE-8466-33A41279ED30}

#undef  INTERFACE
#define INTERFACE IMXReaderControl

DECLARE_INTERFACE_(IMXReaderControl, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IMXReaderControl methods:
	STDMETHOD_(HRESULT, abort) (THIS ) PURE; // Abort the reader
	STDMETHOD_(HRESULT, resume) (THIS ) PURE; // Resume the reader
	STDMETHOD_(HRESULT, suspend) (THIS ) PURE; // Suspend the reader
};

typedef IMXReaderControl* LPMXREADERCONTROL;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IMXReaderControl  {808F4E35-8D5A-4FBE-8466-33A41279ED30}
// IMXReaderControl interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIMXReaderControlProxy : public TAutoProxy
{
public:
	TIMXReaderControlProxy() : TAutoProxy(0x0) {}

	//abort: Abort the reader  [dispid 1398]
	void abort();

	//resume: Resume the reader  [dispid 1399]
	void resume();

	//suspend: Suspend the reader  [dispid 1400]
	void suspend();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IMXWriter
// IMXWriter interface
// {4D7FF4BA-1565-4EA8-94E1-6E724A46F98D}

#undef  INTERFACE
#define INTERFACE IMXWriter

DECLARE_INTERFACE_(IMXWriter, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IMXWriter methods:
	STDMETHOD_(HRESULT, Set_output) (THIS_ VARIANT varDestination) PURE; // Set or get the output.
	STDMETHOD_(HRESULT, Get_output) (THIS_ VARIANT* varDestination) PURE; // Set or get the output.
	STDMETHOD_(HRESULT, Set_encoding) (THIS_ BSTR strEncoding) PURE; // Set or get the output encoding.
	STDMETHOD_(HRESULT, Get_encoding) (THIS_ BSTR* strEncoding) PURE; // Set or get the output encoding.
	STDMETHOD_(HRESULT, Set_byteOrderMark) (THIS_ VARIANT_BOOL fWriteByteOrderMark) PURE; // Determine whether or not to write the byte order mark
	STDMETHOD_(HRESULT, Get_byteOrderMark) (THIS_ VARIANT_BOOL* fWriteByteOrderMark) PURE; // Determine whether or not to write the byte order mark
	STDMETHOD_(HRESULT, Set_indent) (THIS_ VARIANT_BOOL fIndentMode) PURE; // Enable or disable auto indent mode.
	STDMETHOD_(HRESULT, Get_indent) (THIS_ VARIANT_BOOL* fIndentMode) PURE; // Enable or disable auto indent mode.
	STDMETHOD_(HRESULT, Set_standalone) (THIS_ VARIANT_BOOL fValue) PURE; // Set or get the standalone document declaration.
	STDMETHOD_(HRESULT, Get_standalone) (THIS_ VARIANT_BOOL* fValue) PURE; // Set or get the standalone document declaration.
	STDMETHOD_(HRESULT, Set_omitXMLDeclaration) (THIS_ VARIANT_BOOL fValue) PURE; // Determine whether or not to omit the XML declaration.
	STDMETHOD_(HRESULT, Get_omitXMLDeclaration) (THIS_ VARIANT_BOOL* fValue) PURE; // Determine whether or not to omit the XML declaration.
	STDMETHOD_(HRESULT, Set_version) (THIS_ BSTR strVersion) PURE; // Set or get the xml version info.
	STDMETHOD_(HRESULT, Get_version) (THIS_ BSTR* strVersion) PURE; // Set or get the xml version info.
	STDMETHOD_(HRESULT, Set_disableOutputEscaping) (THIS_ VARIANT_BOOL fValue) PURE; // When enabled, the writer no longer escapes out its input when writing it out.
	STDMETHOD_(HRESULT, Get_disableOutputEscaping) (THIS_ VARIANT_BOOL* fValue) PURE; // When enabled, the writer no longer escapes out its input when writing it out.
	STDMETHOD_(HRESULT, flush) (THIS ) PURE; // Flushes all writer buffers forcing the writer to write to the underlying output object
};

typedef IMXWriter* LPMXWRITER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IMXWriter  {4D7FF4BA-1565-4EA8-94E1-6E724A46F98D}
// IMXWriter interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIMXWriterProxy : public TAutoProxy
{
public:
	TIMXWriterProxy() : TAutoProxy(0x0) {}

	//output: Set or get the output.  [dispid 1385]
	void output(TAutoVal arg0);

	//output: Set or get the output.  [dispid 1385]
	TAutoVal output();

	//encoding: Set or get the output encoding.  [dispid 1387]
	void encoding(TAutoString arg0);

	//encoding: Set or get the output encoding.  [dispid 1387]
	TAutoString encoding();

	//byteOrderMark: Determine whether or not to write the byte order mark  [dispid 1388]
	void byteOrderMark(TBool arg0);

	//byteOrderMark: Determine whether or not to write the byte order mark  [dispid 1388]
	TBool byteOrderMark();

	//indent: Enable or disable auto indent mode.  [dispid 1389]
	void indent(TBool arg0);

	//indent: Enable or disable auto indent mode.  [dispid 1389]
	TBool indent();

	//standalone: Set or get the standalone document declaration.  [dispid 1390]
	void standalone(TBool arg0);

	//standalone: Set or get the standalone document declaration.  [dispid 1390]
	TBool standalone();

	//omitXMLDeclaration: Determine whether or not to omit the XML declaration.  [dispid 1391]
	void omitXMLDeclaration(TBool arg0);

	//omitXMLDeclaration: Determine whether or not to omit the XML declaration.  [dispid 1391]
	TBool omitXMLDeclaration();

	//version: Set or get the xml version info.  [dispid 1392]
	void version(TAutoString arg0);

	//version: Set or get the xml version info.  [dispid 1392]
	TAutoString version();

	//disableOutputEscaping: When enabled, the writer no longer escapes out its input when writing it out.  [dispid 1393]
	void disableOutputEscaping(TBool arg0);

	//disableOutputEscaping: When enabled, the writer no longer escapes out its input when writing it out.  [dispid 1393]
	TBool disableOutputEscaping();

	//flush: Flushes all writer buffers forcing the writer to write to the underlying output object  [dispid 1394]
	void flush();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXContentHandler
// ISAXContentHandler interface
// {1545CDFA-9E4E-4497-A8A4-2BF7D0112C44}

#undef  INTERFACE
#define INTERFACE ISAXContentHandler

DECLARE_INTERFACE_(ISAXContentHandler, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXContentHandler methods:
	STDMETHOD_(HRESULT, putDocumentLocator) (THIS_ ISAXLocator* pLocator) PURE; 
	STDMETHOD_(HRESULT, startDocument) (THIS ) PURE; 
	STDMETHOD_(HRESULT, endDocument) (THIS ) PURE; 
	STDMETHOD_(HRESULT, startPrefixMapping) (THIS_ unsigned short* pwchPrefix, int cchPrefix, unsigned short* pwchUri, int cchUri) PURE; 
	STDMETHOD_(HRESULT, endPrefixMapping) (THIS_ unsigned short* pwchPrefix, int cchPrefix) PURE; 
	STDMETHOD_(HRESULT, startElement) (THIS_ unsigned short* pwchNamespaceUri, int cchNamespaceUri, unsigned short* pwchLocalName, int cchLocalName, unsigned short* pwchQName, int cchQName, ISAXAttributes* pAttributes) PURE; 
	STDMETHOD_(HRESULT, endElement) (THIS_ unsigned short* pwchNamespaceUri, int cchNamespaceUri, unsigned short* pwchLocalName, int cchLocalName, unsigned short* pwchQName, int cchQName) PURE; 
	STDMETHOD_(HRESULT, characters) (THIS_ unsigned short* pwchChars, int cchChars) PURE; 
	STDMETHOD_(HRESULT, ignorableWhitespace) (THIS_ unsigned short* pwchChars, int cchChars) PURE; 
	STDMETHOD_(HRESULT, processingInstruction) (THIS_ unsigned short* pwchTarget, int cchTarget, unsigned short* pwchData, int cchData) PURE; 
	STDMETHOD_(HRESULT, skippedEntity) (THIS_ unsigned short* pwchName, int cchName) PURE; 
};

typedef ISAXContentHandler* LPSAXCONTENTHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXErrorHandler
// ISAXErrorHandler interface
// {A60511C4-CCF5-479E-98A3-DC8DC545B7D0}

#undef  INTERFACE
#define INTERFACE ISAXErrorHandler

DECLARE_INTERFACE_(ISAXErrorHandler, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXErrorHandler methods:
	STDMETHOD_(HRESULT, error) (THIS_ ISAXLocator* pLocator, unsigned short* pwchErrorMessage, HRESULT hrErrorCode) PURE; 
	STDMETHOD_(HRESULT, fatalError) (THIS_ ISAXLocator* pLocator, unsigned short* pwchErrorMessage, HRESULT hrErrorCode) PURE; 
	STDMETHOD_(HRESULT, ignorableWarning) (THIS_ ISAXLocator* pLocator, unsigned short* pwchErrorMessage, HRESULT hrErrorCode) PURE; 
};

typedef ISAXErrorHandler* LPSAXERRORHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXDTDHandler
// ISAXDTDHandler interface
// {E15C1BAF-AFB3-4D60-8C36-19A8C45DEFED}

#undef  INTERFACE
#define INTERFACE ISAXDTDHandler

DECLARE_INTERFACE_(ISAXDTDHandler, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXDTDHandler methods:
	STDMETHOD_(HRESULT, notationDecl) (THIS_ unsigned short* pwchName, int cchName, unsigned short* pwchPublicId, int cchPublicId, unsigned short* pwchSystemId, int cchSystemId) PURE; 
	STDMETHOD_(HRESULT, unparsedEntityDecl) (THIS_ unsigned short* pwchName, int cchName, unsigned short* pwchPublicId, int cchPublicId, unsigned short* pwchSystemId, int cchSystemId, unsigned short* pwchNotationName, int cchNotationName) PURE; 
};

typedef ISAXDTDHandler* LPSAXDTDHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXLexicalHandler
// ISAXLexicalHandler interface
// {7F85D5F5-47A8-4497-BDA5-84BA04819EA6}

#undef  INTERFACE
#define INTERFACE ISAXLexicalHandler

DECLARE_INTERFACE_(ISAXLexicalHandler, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXLexicalHandler methods:
	STDMETHOD_(HRESULT, startDTD) (THIS_ unsigned short* pwchName, int cchName, unsigned short* pwchPublicId, int cchPublicId, unsigned short* pwchSystemId, int cchSystemId) PURE; 
	STDMETHOD_(HRESULT, endDTD) (THIS ) PURE; 
	STDMETHOD_(HRESULT, startEntity) (THIS_ unsigned short* pwchName, int cchName) PURE; 
	STDMETHOD_(HRESULT, endEntity) (THIS_ unsigned short* pwchName, int cchName) PURE; 
	STDMETHOD_(HRESULT, startCDATA) (THIS ) PURE; 
	STDMETHOD_(HRESULT, endCDATA) (THIS ) PURE; 
	STDMETHOD_(HRESULT, comment) (THIS_ unsigned short* pwchChars, int cchChars) PURE; 
};

typedef ISAXLexicalHandler* LPSAXLEXICALHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXDeclHandler
// ISAXDeclHandler interface
// {862629AC-771A-47B2-8337-4E6843C1BE90}

#undef  INTERFACE
#define INTERFACE ISAXDeclHandler

DECLARE_INTERFACE_(ISAXDeclHandler, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXDeclHandler methods:
	STDMETHOD_(HRESULT, elementDecl) (THIS_ unsigned short* pwchName, int cchName, unsigned short* pwchModel, int cchModel) PURE; 
	STDMETHOD_(HRESULT, attributeDecl) (THIS_ unsigned short* pwchElementName, int cchElementName, unsigned short* pwchAttributeName, int cchAttributeName, unsigned short* pwchType, int cchType, unsigned short* pwchValueDefault, int cchValueDefault, unsigned short* pwchValue, int cchValue) PURE; 
	STDMETHOD_(HRESULT, internalEntityDecl) (THIS_ unsigned short* pwchName, int cchName, unsigned short* pwchValue, int cchValue) PURE; 
	STDMETHOD_(HRESULT, externalEntityDecl) (THIS_ unsigned short* pwchName, int cchName, unsigned short* pwchPublicId, int cchPublicId, unsigned short* pwchSystemId, int cchSystemId) PURE; 
};

typedef ISAXDeclHandler* LPSAXDECLHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXContentHandler
// IVBSAXContentHandler interface
// {2ED7290A-4DD5-4B46-BB26-4E4155E77FAA}

#undef  INTERFACE
#define INTERFACE IVBSAXContentHandler

DECLARE_INTERFACE_(IVBSAXContentHandler, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXContentHandler methods:
	STDMETHOD_(HRESULT, SetRef_documentLocator) (THIS_ IVBSAXLocator* ) PURE; // Receive an object for locating the origin of SAX document events.
	STDMETHOD_(HRESULT, startDocument) (THIS ) PURE; // Receive notification of the beginning of a document.
	STDMETHOD_(HRESULT, endDocument) (THIS ) PURE; // Receive notification of the end of a document.
	STDMETHOD_(HRESULT, startPrefixMapping) (THIS_ BSTR* strPrefix, BSTR* strURI) PURE; // Begin the scope of a prefix-URI Namespace mapping.
	STDMETHOD_(HRESULT, endPrefixMapping) (THIS_ BSTR* strPrefix) PURE; // End the scope of a prefix-URI mapping.
	STDMETHOD_(HRESULT, startElement) (THIS_ BSTR* strNamespaceURI, BSTR* strLocalName, BSTR* strQName, IVBSAXAttributes* oAttributes) PURE; // Receive notification of the beginning of an element.
	STDMETHOD_(HRESULT, endElement) (THIS_ BSTR* strNamespaceURI, BSTR* strLocalName, BSTR* strQName) PURE; // Receive notification of the end of an element.
	STDMETHOD_(HRESULT, characters) (THIS_ BSTR* strChars) PURE; // Receive notification of character data.
	STDMETHOD_(HRESULT, ignorableWhitespace) (THIS_ BSTR* strChars) PURE; // Receive notification of ignorable whitespace in element content.
	STDMETHOD_(HRESULT, processingInstruction) (THIS_ BSTR* strTarget, BSTR* strData) PURE; // Receive notification of a processing instruction.
	STDMETHOD_(HRESULT, skippedEntity) (THIS_ BSTR* strName) PURE; // Receive notification of a skipped entity.
};

typedef IVBSAXContentHandler* LPVBSAXCONTENTHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXContentHandler  {2ED7290A-4DD5-4B46-BB26-4E4155E77FAA}
// IVBSAXContentHandler interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXContentHandlerProxy : public TAutoProxy
{
public:
	TIVBSAXContentHandlerProxy() : TAutoProxy(0x0) {}

	//documentLocator: Receive an object for locating the origin of SAX document events.  [dispid 1322]
	void documentLocator(IVBSAXLocator* arg0);

	//startDocument: Receive notification of the beginning of a document.  [dispid 1323]
	void startDocument();

	//endDocument: Receive notification of the end of a document.  [dispid 1324]
	void endDocument();

	//startPrefixMapping: Begin the scope of a prefix-URI Namespace mapping.  [dispid 1325]
	void startPrefixMapping(BSTR* strPrefix, BSTR* strURI);

	//endPrefixMapping: End the scope of a prefix-URI mapping.  [dispid 1326]
	void endPrefixMapping(BSTR* strPrefix);

	//startElement: Receive notification of the beginning of an element.  [dispid 1327]
	void startElement(BSTR* strNamespaceURI, BSTR* strLocalName, BSTR* strQName, IVBSAXAttributes* oAttributes);

	//endElement: Receive notification of the end of an element.  [dispid 1328]
	void endElement(BSTR* strNamespaceURI, BSTR* strLocalName, BSTR* strQName);

	//characters: Receive notification of character data.  [dispid 1329]
	void characters(BSTR* strChars);

	//ignorableWhitespace: Receive notification of ignorable whitespace in element content.  [dispid 1330]
	void ignorableWhitespace(BSTR* strChars);

	//processingInstruction: Receive notification of a processing instruction.  [dispid 1331]
	void processingInstruction(BSTR* strTarget, BSTR* strData);

	//skippedEntity: Receive notification of a skipped entity.  [dispid 1332]
	void skippedEntity(BSTR* strName);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXDeclHandler
// IVBSAXDeclHandler interface
// {E8917260-7579-4BE1-B5DD-7AFBFA6F077B}

#undef  INTERFACE
#define INTERFACE IVBSAXDeclHandler

DECLARE_INTERFACE_(IVBSAXDeclHandler, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXDeclHandler methods:
	STDMETHOD_(HRESULT, elementDecl) (THIS_ BSTR* strName, BSTR* strModel) PURE; // Report an element type declaration.
	STDMETHOD_(HRESULT, attributeDecl) (THIS_ BSTR* strElementName, BSTR* strAttributeName, BSTR* strType, BSTR* strValueDefault, BSTR* strValue) PURE; // Report an attribute type declaration.
	STDMETHOD_(HRESULT, internalEntityDecl) (THIS_ BSTR* strName, BSTR* strValue) PURE; // Report an internal entity declaration.
	STDMETHOD_(HRESULT, externalEntityDecl) (THIS_ BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) PURE; // Report a parsed external entity declaration.
};

typedef IVBSAXDeclHandler* LPVBSAXDECLHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXDeclHandler  {E8917260-7579-4BE1-B5DD-7AFBFA6F077B}
// IVBSAXDeclHandler interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXDeclHandlerProxy : public TAutoProxy
{
public:
	TIVBSAXDeclHandlerProxy() : TAutoProxy(0x0) {}

	//elementDecl: Report an element type declaration.  [dispid 1367]
	void elementDecl(BSTR* strName, BSTR* strModel);

	//attributeDecl: Report an attribute type declaration.  [dispid 1368]
	void attributeDecl(BSTR* strElementName, BSTR* strAttributeName, BSTR* strType, BSTR* strValueDefault, BSTR* strValue);

	//internalEntityDecl: Report an internal entity declaration.  [dispid 1369]
	void internalEntityDecl(BSTR* strName, BSTR* strValue);

	//externalEntityDecl: Report a parsed external entity declaration.  [dispid 1370]
	void externalEntityDecl(BSTR* strName, BSTR* strPublicId, BSTR* strSystemId);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXDTDHandler
// IVBSAXDTDHandler interface
// {24FB3297-302D-4620-BA39-3A732D850558}

#undef  INTERFACE
#define INTERFACE IVBSAXDTDHandler

DECLARE_INTERFACE_(IVBSAXDTDHandler, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXDTDHandler methods:
	STDMETHOD_(HRESULT, notationDecl) (THIS_ BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) PURE; // Receive notification of a notation declaration event.
	STDMETHOD_(HRESULT, unparsedEntityDecl) (THIS_ BSTR* strName, BSTR* strPublicId, BSTR* strSystemId, BSTR* strNotationName) PURE; // Receive notification of an unparsed entity declaration event.
};

typedef IVBSAXDTDHandler* LPVBSAXDTDHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXDTDHandler  {24FB3297-302D-4620-BA39-3A732D850558}
// IVBSAXDTDHandler interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXDTDHandlerProxy : public TAutoProxy
{
public:
	TIVBSAXDTDHandlerProxy() : TAutoProxy(0x0) {}

	//notationDecl: Receive notification of a notation declaration event.  [dispid 1335]
	void notationDecl(BSTR* strName, BSTR* strPublicId, BSTR* strSystemId);

	//unparsedEntityDecl: Receive notification of an unparsed entity declaration event.  [dispid 1336]
	void unparsedEntityDecl(BSTR* strName, BSTR* strPublicId, BSTR* strSystemId, BSTR* strNotationName);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXErrorHandler
// IVBSAXErrorHandler interface
// {D963D3FE-173C-4862-9095-B92F66995F52}

#undef  INTERFACE
#define INTERFACE IVBSAXErrorHandler

DECLARE_INTERFACE_(IVBSAXErrorHandler, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXErrorHandler methods:
	STDMETHOD_(HRESULT, error) (THIS_ IVBSAXLocator* oLocator, BSTR* strErrorMessage, long nErrorCode) PURE; // Receive notification of a recoverable error.
	STDMETHOD_(HRESULT, fatalError) (THIS_ IVBSAXLocator* oLocator, BSTR* strErrorMessage, long nErrorCode) PURE; // Receive notification of a non-recoverable error.
	STDMETHOD_(HRESULT, ignorableWarning) (THIS_ IVBSAXLocator* oLocator, BSTR* strErrorMessage, long nErrorCode) PURE; // Receive notification of an ignorable warning.
};

typedef IVBSAXErrorHandler* LPVBSAXERRORHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXErrorHandler  {D963D3FE-173C-4862-9095-B92F66995F52}
// IVBSAXErrorHandler interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXErrorHandlerProxy : public TAutoProxy
{
public:
	TIVBSAXErrorHandlerProxy() : TAutoProxy(0x0) {}

	//error: Receive notification of a recoverable error.  [dispid 1339]
	void error(IVBSAXLocator* oLocator, BSTR* strErrorMessage, long nErrorCode);

	//fatalError: Receive notification of a non-recoverable error.  [dispid 1340]
	void fatalError(IVBSAXLocator* oLocator, BSTR* strErrorMessage, long nErrorCode);

	//ignorableWarning: Receive notification of an ignorable warning.  [dispid 1341]
	void ignorableWarning(IVBSAXLocator* oLocator, BSTR* strErrorMessage, long nErrorCode);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXLexicalHandler
// IVBSAXLexicalHandler interface
// {032AAC35-8C0E-4D9D-979F-E3B702935576}

#undef  INTERFACE
#define INTERFACE IVBSAXLexicalHandler

DECLARE_INTERFACE_(IVBSAXLexicalHandler, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXLexicalHandler methods:
	STDMETHOD_(HRESULT, startDTD) (THIS_ BSTR* strName, BSTR* strPublicId, BSTR* strSystemId) PURE; // Report the start of DTD declarations, if any.
	STDMETHOD_(HRESULT, endDTD) (THIS ) PURE; // Report the end of DTD declarations.
	STDMETHOD_(HRESULT, startEntity) (THIS_ BSTR* strName) PURE; // Report the beginning of some internal and external XML entities.
	STDMETHOD_(HRESULT, endEntity) (THIS_ BSTR* strName) PURE; // Report the end of an entity.
	STDMETHOD_(HRESULT, startCDATA) (THIS ) PURE; // Report the start of a CDATA section.
	STDMETHOD_(HRESULT, endCDATA) (THIS ) PURE; // Report the end of a CDATA section.
	STDMETHOD_(HRESULT, comment) (THIS_ BSTR* strChars) PURE; // Report an XML comment anywhere in the document.
};

typedef IVBSAXLexicalHandler* LPVBSAXLEXICALHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXLexicalHandler  {032AAC35-8C0E-4D9D-979F-E3B702935576}
// IVBSAXLexicalHandler interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXLexicalHandlerProxy : public TAutoProxy
{
public:
	TIVBSAXLexicalHandlerProxy() : TAutoProxy(0x0) {}

	//startDTD: Report the start of DTD declarations, if any.  [dispid 1358]
	void startDTD(BSTR* strName, BSTR* strPublicId, BSTR* strSystemId);

	//endDTD: Report the end of DTD declarations.  [dispid 1359]
	void endDTD();

	//startEntity: Report the beginning of some internal and external XML entities.  [dispid 1360]
	void startEntity(BSTR* strName);

	//endEntity: Report the end of an entity.  [dispid 1361]
	void endEntity(BSTR* strName);

	//startCDATA: Report the start of a CDATA section.  [dispid 1362]
	void startCDATA();

	//endCDATA: Report the end of a CDATA section.  [dispid 1363]
	void endCDATA();

	//comment: Report an XML comment anywhere in the document.  [dispid 1364]
	void comment(BSTR* strChars);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IMXAttributes
// IMXAttributes interface
// {F10D27CC-3EC0-415C-8ED8-77AB1C5E7262}

#undef  INTERFACE
#define INTERFACE IMXAttributes

DECLARE_INTERFACE_(IMXAttributes, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IMXAttributes methods:
	STDMETHOD_(HRESULT, addAttribute) (THIS_ BSTR strURI, BSTR strLocalName, BSTR strQName, BSTR strType, BSTR strValue) PURE; // Add an attribute to the end of the list.
	STDMETHOD_(HRESULT, addAttributeFromIndex) (THIS_ VARIANT varAtts, int nIndex) PURE; // Add an attribute, whose value is equal to the indexed attribute in the input attributes object, to the end of the list.
	STDMETHOD_(HRESULT, clear) (THIS ) PURE; // Clear the attribute list for reuse.
	STDMETHOD_(HRESULT, removeAttribute) (THIS_ int nIndex) PURE; // Remove an attribute from the list.
	STDMETHOD_(HRESULT, setAttribute) (THIS_ int nIndex, BSTR strURI, BSTR strLocalName, BSTR strQName, BSTR strType, BSTR strValue) PURE; // Set an attribute in the list.
	STDMETHOD_(HRESULT, setAttributes) (THIS_ VARIANT varAtts) PURE; // Copy an entire Attributes object.
	STDMETHOD_(HRESULT, setLocalName) (THIS_ int nIndex, BSTR strLocalName) PURE; // Set the local name of a specific attribute.
	STDMETHOD_(HRESULT, setQName) (THIS_ int nIndex, BSTR strQName) PURE; // Set the qualified name of a specific attribute.
	STDMETHOD_(HRESULT, setType) (THIS_ int nIndex, BSTR strType) PURE; // Set the type of a specific attribute.
	STDMETHOD_(HRESULT, setURI) (THIS_ int nIndex, BSTR strURI) PURE; // Set the Namespace URI of a specific attribute.
	STDMETHOD_(HRESULT, setValue) (THIS_ int nIndex, BSTR strValue) PURE; // Set the value of a specific attribute.
};

typedef IMXAttributes* LPMXATTRIBUTES;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IMXAttributes  {F10D27CC-3EC0-415C-8ED8-77AB1C5E7262}
// IMXAttributes interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIMXAttributesProxy : public TAutoProxy
{
public:
	TIMXAttributesProxy() : TAutoProxy(0x0) {}

	//addAttribute: Add an attribute to the end of the list.  [dispid 1373]
	void addAttribute(TAutoString strURI, TAutoString strLocalName, TAutoString strQName, TAutoString strType, TAutoString strValue);

	//addAttributeFromIndex: Add an attribute, whose value is equal to the indexed attribute in the input attributes object, to the end of the list.  [dispid 1383]
	void addAttributeFromIndex(TAutoVal varAtts, int nIndex);

	//clear: Clear the attribute list for reuse.  [dispid 1374]
	void clear();

	//removeAttribute: Remove an attribute from the list.  [dispid 1375]
	void removeAttribute(int nIndex);

	//setAttribute: Set an attribute in the list.  [dispid 1376]
	void setAttribute(int nIndex, TAutoString strURI, TAutoString strLocalName, TAutoString strQName, TAutoString strType, TAutoString strValue);

	//setAttributes: Copy an entire Attributes object.  [dispid 1377]
	void setAttributes(TAutoVal varAtts);

	//setLocalName: Set the local name of a specific attribute.  [dispid 1378]
	void setLocalName(int nIndex, TAutoString strLocalName);

	//setQName: Set the qualified name of a specific attribute.  [dispid 1379]
	void setQName(int nIndex, TAutoString strQName);

	//setType: Set the type of a specific attribute.  [dispid 1380]
	void setType(int nIndex, TAutoString strType);

	//setURI: Set the Namespace URI of a specific attribute.  [dispid 1381]
	void setURI(int nIndex, TAutoString strURI);

	//setValue: Set the value of a specific attribute.  [dispid 1382]
	void setValue(int nIndex, TAutoString strValue);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXAttributes
// IVBSAXAttributes interface
// {10DC0586-132B-4CAC-8BB3-DB00AC8B7EE0}

#undef  INTERFACE
#define INTERFACE IVBSAXAttributes

DECLARE_INTERFACE_(IVBSAXAttributes, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXAttributes methods:
	STDMETHOD_(HRESULT, Get_length) (THIS_ int* nLength) PURE; // Get the number of attributes in the list.
	STDMETHOD_(HRESULT, getURI) (THIS_ int nIndex, BSTR* strURI) PURE; // Look up an attribute's Namespace URI by index.
	STDMETHOD_(HRESULT, getLocalName) (THIS_ int nIndex, BSTR* strLocalName) PURE; // Look up an attribute's local name by index.
	STDMETHOD_(HRESULT, getQName) (THIS_ int nIndex, BSTR* strQName) PURE; // Look up an attribute's XML 1.0 qualified name by index.
	STDMETHOD_(HRESULT, getIndexFromName) (THIS_ BSTR strURI, BSTR strLocalName, int* nIndex) PURE; // Look up the index of an attribute by Namespace name.
	STDMETHOD_(HRESULT, getIndexFromQName) (THIS_ BSTR strQName, int* nIndex) PURE; // Look up the index of an attribute by XML 1.0 qualified name.
	STDMETHOD_(HRESULT, getType) (THIS_ int nIndex, BSTR* strType) PURE; // Look up an attribute's type by index.
	STDMETHOD_(HRESULT, getTypeFromName) (THIS_ BSTR strURI, BSTR strLocalName, BSTR* strType) PURE; // Look up an attribute's type by Namespace name.
	STDMETHOD_(HRESULT, getTypeFromQName) (THIS_ BSTR strQName, BSTR* strType) PURE; // Look up an attribute's type by XML 1.0 qualified name.
	STDMETHOD_(HRESULT, getValue) (THIS_ int nIndex, BSTR* strValue) PURE; // Look up an attribute's value by index.
	STDMETHOD_(HRESULT, getValueFromName) (THIS_ BSTR strURI, BSTR strLocalName, BSTR* strValue) PURE; // Look up an attribute's value by Namespace name.
	STDMETHOD_(HRESULT, getValueFromQName) (THIS_ BSTR strQName, BSTR* strValue) PURE; // Look up an attribute's value by XML 1.0 qualified name.
};

typedef IVBSAXAttributes* LPVBSAXATTRIBUTES;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXAttributes  {10DC0586-132B-4CAC-8BB3-DB00AC8B7EE0}
// IVBSAXAttributes interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXAttributesProxy : public TAutoProxy
{
public:
	TIVBSAXAttributesProxy() : TAutoProxy(0x0) {}

	//length: Get the number of attributes in the list.  [dispid 1344]
	int length();

	//getURI: Look up an attribute's Namespace URI by index.  [dispid 1345]
	TAutoString getURI(int nIndex);

	//getLocalName: Look up an attribute's local name by index.  [dispid 1346]
	TAutoString getLocalName(int nIndex);

	//getQName: Look up an attribute's XML 1.0 qualified name by index.  [dispid 1347]
	TAutoString getQName(int nIndex);

	//getIndexFromName: Look up the index of an attribute by Namespace name.  [dispid 1348]
	int getIndexFromName(TAutoString strURI, TAutoString strLocalName);

	//getIndexFromQName: Look up the index of an attribute by XML 1.0 qualified name.  [dispid 1349]
	int getIndexFromQName(TAutoString strQName);

	//getType: Look up an attribute's type by index.  [dispid 1350]
	TAutoString getType(int nIndex);

	//getTypeFromName: Look up an attribute's type by Namespace name.  [dispid 1351]
	TAutoString getTypeFromName(TAutoString strURI, TAutoString strLocalName);

	//getTypeFromQName: Look up an attribute's type by XML 1.0 qualified name.  [dispid 1352]
	TAutoString getTypeFromQName(TAutoString strQName);

	//getValue: Look up an attribute's value by index.  [dispid 1353]
	TAutoString getValue(int nIndex);

	//getValueFromName: Look up an attribute's value by Namespace name.  [dispid 1354]
	TAutoString getValueFromName(TAutoString strURI, TAutoString strLocalName);

	//getValueFromQName: Look up an attribute's value by XML 1.0 qualified name.  [dispid 1355]
	TAutoString getValueFromQName(TAutoString strQName);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXAttributes
// ISAXAttributes interface
// {F078ABE1-45D2-4832-91EA-4466CE2F25C9}

#undef  INTERFACE
#define INTERFACE ISAXAttributes

DECLARE_INTERFACE_(ISAXAttributes, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXAttributes methods:
	STDMETHOD_(HRESULT, getLength) (THIS_ int* pnLength) PURE; 
	STDMETHOD_(HRESULT, getURI) (THIS_ int nIndex, unsigned short** ppwchUri, int* pcchUri) PURE; 
	STDMETHOD_(HRESULT, getLocalName) (THIS_ int nIndex, unsigned short** ppwchLocalName, int* pcchLocalName) PURE; 
	STDMETHOD_(HRESULT, getQName) (THIS_ int nIndex, unsigned short** ppwchQName, int* pcchQName) PURE; 
	STDMETHOD_(HRESULT, getName) (THIS_ int nIndex, unsigned short** ppwchUri, int* pcchUri, unsigned short** ppwchLocalName, int* pcchLocalName, unsigned short** ppwchQName, int* pcchQName) PURE; 
	STDMETHOD_(HRESULT, getIndexFromName) (THIS_ unsigned short* pwchUri, int cchUri, unsigned short* pwchLocalName, int cchLocalName, int* pnIndex) PURE; 
	STDMETHOD_(HRESULT, getIndexFromQName) (THIS_ unsigned short* pwchQName, int cchQName, int* pnIndex) PURE; 
	STDMETHOD_(HRESULT, getType) (THIS_ int nIndex, unsigned short** ppwchType, int* pcchType) PURE; 
	STDMETHOD_(HRESULT, getTypeFromName) (THIS_ unsigned short* pwchUri, int cchUri, unsigned short* pwchLocalName, int cchLocalName, unsigned short** ppwchType, int* pcchType) PURE; 
	STDMETHOD_(HRESULT, getTypeFromQName) (THIS_ unsigned short* pwchQName, int cchQName, unsigned short** ppwchType, int* pcchType) PURE; 
	STDMETHOD_(HRESULT, getValue) (THIS_ int nIndex, unsigned short** ppwchValue, int* pcchValue) PURE; 
	STDMETHOD_(HRESULT, getValueFromName) (THIS_ unsigned short* pwchUri, int cchUri, unsigned short* pwchLocalName, int cchLocalName, unsigned short** ppwchValue, int* pcchValue) PURE; 
	STDMETHOD_(HRESULT, getValueFromQName) (THIS_ unsigned short* pwchQName, int cchQName, unsigned short** ppwchValue, int* pcchValue) PURE; 
};

typedef ISAXAttributes* LPSAXATTRIBUTES;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBMXNamespaceManager
// IVBMXNamespaceManager interface
// {C90352F5-643C-4FBC-BB23-E996EB2D51FD}

#undef  INTERFACE
#define INTERFACE IVBMXNamespaceManager

DECLARE_INTERFACE_(IVBMXNamespaceManager, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBMXNamespaceManager methods:
	STDMETHOD_(HRESULT, Set_allowOverride) (THIS_ VARIANT_BOOL fOverride) PURE; 
	STDMETHOD_(HRESULT, Get_allowOverride) (THIS_ VARIANT_BOOL* fOverride) PURE; 
	STDMETHOD_(HRESULT, reset) (THIS ) PURE; 
	STDMETHOD_(HRESULT, pushContext) (THIS ) PURE; 
	STDMETHOD_(HRESULT, pushNodeContext) (THIS_ IXMLDOMNode* contextNode, VARIANT_BOOL fDeep) PURE; 
	STDMETHOD_(HRESULT, popContext) (THIS ) PURE; 
	STDMETHOD_(HRESULT, declarePrefix) (THIS_ BSTR prefix, BSTR namespaceURI) PURE; 
	STDMETHOD_(HRESULT, getDeclaredPrefixes) (THIS_ IMXNamespacePrefixes** prefixes) PURE; 
	STDMETHOD_(HRESULT, getPrefixes) (THIS_ BSTR namespaceURI, IMXNamespacePrefixes** prefixes) PURE; 
	STDMETHOD_(HRESULT, getURI) (THIS_ BSTR prefix, VARIANT* uri) PURE; 
	STDMETHOD_(HRESULT, getURIFromNode) (THIS_ BSTR strPrefix, IXMLDOMNode* contextNode, VARIANT* uri) PURE; 
};

typedef IVBMXNamespaceManager* LPVBMXNAMESPACEMANAGER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBMXNamespaceManager  {C90352F5-643C-4FBC-BB23-E996EB2D51FD}
// IVBMXNamespaceManager interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBMXNamespaceManagerProxy : public TAutoProxy
{
public:
	TIVBMXNamespaceManagerProxy() : TAutoProxy(0x0) {}

	//allowOverride:   [dispid 1406]
	void allowOverride(TBool arg0);

	//allowOverride:   [dispid 1406]
	TBool allowOverride();

	//reset:   [dispid 1407]
	void reset();

	//pushContext:   [dispid 1408]
	void pushContext();

	//pushNodeContext:   [dispid 1409]
	void pushNodeContext(IXMLDOMNode* contextNode, TBool fDeep);

	//popContext:   [dispid 1410]
	void popContext();

	//declarePrefix:   [dispid 1411]
	void declarePrefix(TAutoString prefix, TAutoString namespaceURI);

	//getDeclaredPrefixes:   [dispid 1412]
	void getDeclaredPrefixes(TIMXNamespacePrefixesProxy& Obj);

	//getPrefixes:   [dispid 1413]
	void getPrefixes(TIMXNamespacePrefixesProxy& Obj, TAutoString namespaceURI);

	//getURI:   [dispid 1414]
	TAutoVal getURI(TAutoString prefix);

	//getURIFromNode:   [dispid 1415]
	TAutoVal getURIFromNode(TAutoString strPrefix, IXMLDOMNode* contextNode);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IMXNamespaceManager
// IMXNamespaceManager interface
// {C90352F6-643C-4FBC-BB23-E996EB2D51FD}

#undef  INTERFACE
#define INTERFACE IMXNamespaceManager

DECLARE_INTERFACE_(IMXNamespaceManager, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//IMXNamespaceManager methods:
	STDMETHOD_(HRESULT, putAllowOverride) (THIS_ VARIANT_BOOL fOverride) PURE; 
	STDMETHOD_(HRESULT, getAllowOverride) (THIS_ VARIANT_BOOL* fOverride) PURE; 
	STDMETHOD_(HRESULT, reset) (THIS ) PURE; 
	STDMETHOD_(HRESULT, pushContext) (THIS ) PURE; 
	STDMETHOD_(HRESULT, pushNodeContext) (THIS_ IXMLDOMNode* contextNode, VARIANT_BOOL fDeep) PURE; 
	STDMETHOD_(HRESULT, popContext) (THIS ) PURE; 
	STDMETHOD_(HRESULT, declarePrefix) (THIS_ unsigned short* prefix, unsigned short* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, getDeclaredPrefix) (THIS_ long nIndex, unsigned short* pwchPrefix, int* pcchPrefix) PURE; 
	STDMETHOD_(HRESULT, getPrefix) (THIS_ unsigned short* pwszNamespaceURI, long nIndex, unsigned short* pwchPrefix, int* pcchPrefix) PURE; 
	STDMETHOD_(HRESULT, getURI) (THIS_ unsigned short* pwchPrefix, IXMLDOMNode* pContextNode, unsigned short* pwchUri, int* pcchUri) PURE; 
};

typedef IMXNamespaceManager* LPMXNAMESPACEMANAGER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDocument2
// {2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9}

#undef  INTERFACE
#define INTERFACE IXMLDocument2

DECLARE_INTERFACE_(IXMLDocument2, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLDocument2 methods:
	STDMETHOD_(HRESULT, Get_root) (THIS_ IXMLElement2** p) PURE; // get root IXMLElement of the XML document.
	STDMETHOD_(HRESULT, Get_fileSize) (THIS_ BSTR* p) PURE; 
	STDMETHOD_(HRESULT, Get_fileModifiedDate) (THIS_ BSTR* p) PURE; 
	STDMETHOD_(HRESULT, Get_fileUpdatedDate) (THIS_ BSTR* p) PURE; 
	STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* p) PURE; // set URL to load an XML document from the URL.
	STDMETHOD_(HRESULT, Set_url) (THIS_ BSTR p) PURE; // set URL to load an XML document from the URL.
	STDMETHOD_(HRESULT, Get_mimeType) (THIS_ BSTR* p) PURE; 
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* pl) PURE; // get ready state.
	STDMETHOD_(HRESULT, Get_charset) (THIS_ BSTR* p) PURE; // get encoding.
	STDMETHOD_(HRESULT, Set_charset) (THIS_ BSTR p) PURE; // get encoding.
	STDMETHOD_(HRESULT, Get_version) (THIS_ BSTR* p) PURE; // get XML version number.
	STDMETHOD_(HRESULT, Get_doctype) (THIS_ BSTR* p) PURE; // get document type.
	STDMETHOD_(HRESULT, Get_dtdURL) (THIS_ BSTR* p) PURE; 
	STDMETHOD_(HRESULT, createElement) (THIS_ VARIANT vType, VARIANT var1, IXMLElement2** ppElem) PURE; // create different types of IXMLElements.
	STDMETHOD_(HRESULT, Get_async) (THIS_ VARIANT_BOOL* pf) PURE; // get asynchronous loading flag.
	STDMETHOD_(HRESULT, Set_async) (THIS_ VARIANT_BOOL pf) PURE; // get asynchronous loading flag.
};

typedef IXMLDocument2* LPXMLDOCUMENT2;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXEntityResolver
// ISAXEntityResolver interface
// {99BCA7BD-E8C4-4D5F-A0CF-6D907901FF07}

#undef  INTERFACE
#define INTERFACE ISAXEntityResolver

DECLARE_INTERFACE_(ISAXEntityResolver, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXEntityResolver methods:
	STDMETHOD_(HRESULT, resolveEntity) (THIS_ unsigned short* pwchPublicId, unsigned short* pwchSystemId, VARIANT* pvarInput) PURE; 
};

typedef ISAXEntityResolver* LPSAXENTITYRESOLVER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXLocator
// ISAXLocator interface
// {9B7E472A-0DE4-4640-BFF3-84D38A051C31}

#undef  INTERFACE
#define INTERFACE ISAXLocator

DECLARE_INTERFACE_(ISAXLocator, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
	//ISAXLocator methods:
	STDMETHOD_(HRESULT, getColumnNumber) (THIS_ int* pnColumn) PURE; 
	STDMETHOD_(HRESULT, getLineNumber) (THIS_ int* pnLine) PURE; 
	STDMETHOD_(HRESULT, getPublicId) (THIS_ unsigned short** ppwchPublicId) PURE; 
	STDMETHOD_(HRESULT, getSystemId) (THIS_ unsigned short** ppwchSystemId) PURE; 
};

typedef ISAXLocator* LPSAXLOCATOR;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IMXNamespacePrefixes
// IMXNamespacePrefixes interface
// {C90352F4-643C-4FBC-BB23-E996EB2D51FD}

#undef  INTERFACE
#define INTERFACE IMXNamespacePrefixes

DECLARE_INTERFACE_(IMXNamespacePrefixes, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IMXNamespacePrefixes methods:
	STDMETHOD_(HRESULT, Get_item) (THIS_ long index, BSTR* prefix) PURE; 
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* length) PURE; 
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE; 
};

typedef IMXNamespacePrefixes* LPMXNAMESPACEPREFIXES;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IMXNamespacePrefixes  {C90352F4-643C-4FBC-BB23-E996EB2D51FD}
// IMXNamespacePrefixes interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIMXNamespacePrefixesProxy : public TAutoProxy
{
public:
	TIMXNamespacePrefixesProxy() : TAutoProxy(0x0) {}

	//item:   [dispid 0]
	TAutoString item(long index);

	//length:   [dispid 1416]
	long length();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaItem
// XML Schema Item
// {50EA08B3-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaItem

DECLARE_INTERFACE_(ISchemaItem, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
};

typedef ISchemaItem* LPSCHEMAITEM;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISchemaItem  {50EA08B3-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Item [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaItemProxy : public TAutoProxy
{
public:
	TISchemaItemProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchema
// XML Schema
// {50EA08B4-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchema

DECLARE_INTERFACE_(ISchema, ISchemaItem)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
#endif
	//ISchema methods:
	STDMETHOD_(HRESULT, Get_targetNamespace) (THIS_ BSTR* targetNamespace) PURE; 
	STDMETHOD_(HRESULT, Get_version) (THIS_ BSTR* version) PURE; 
	STDMETHOD_(HRESULT, Get_types) (THIS_ ISchemaItemCollection** types) PURE; 
	STDMETHOD_(HRESULT, Get_elements) (THIS_ ISchemaItemCollection** elements) PURE; 
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ ISchemaItemCollection** attributes) PURE; 
	STDMETHOD_(HRESULT, Get_attributeGroups) (THIS_ ISchemaItemCollection** attributeGroups) PURE; 
	STDMETHOD_(HRESULT, Get_modelGroups) (THIS_ ISchemaItemCollection** modelGroups) PURE; 
	STDMETHOD_(HRESULT, Get_notations) (THIS_ ISchemaItemCollection** notations) PURE; 
	STDMETHOD_(HRESULT, Get_schemaLocations) (THIS_ ISchemaStringCollection** schemaLocations) PURE; 
};

typedef ISchema* LPSCHEMA;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISchema  {50EA08B4-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaProxy : public TAutoProxy
{
public:
	TISchemaProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//targetNamespace:   [dispid 1474]
	TAutoString targetNamespace();

	//version:   [dispid 1481]
	TAutoString version();

	//types:   [dispid 1477]
	void types(TISchemaItemCollectionProxy& Obj);

	//elements:   [dispid 1434]
	void elements(TISchemaItemCollectionProxy& Obj);

	//attributes:   [dispid 1427]
	void attributes(TISchemaItemCollectionProxy& Obj);

	//attributeGroups:   [dispid 1426]
	void attributeGroups(TISchemaItemCollectionProxy& Obj);

	//modelGroups:   [dispid 1456]
	void modelGroups(TISchemaItemCollectionProxy& Obj);

	//notations:   [dispid 1460]
	void notations(TISchemaItemCollectionProxy& Obj);

	//schemaLocations:   [dispid 1468]
	void schemaLocations(TISchemaStringCollectionProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaStringCollection
// XML Schema String Collection
// {50EA08B1-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaStringCollection

DECLARE_INTERFACE_(ISchemaStringCollection, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISchemaStringCollection methods:
	STDMETHOD_(HRESULT, Get_item) (THIS_ long index, BSTR* bstr) PURE; 
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* length) PURE; 
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE; 
};

typedef ISchemaStringCollection* LPSCHEMASTRINGCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISchemaStringCollection  {50EA08B1-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema String Collection [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaStringCollectionProxy : public TAutoProxy
{
public:
	TISchemaStringCollectionProxy() : TAutoProxy(0x0) {}

	//item:   [dispid 0]
	TAutoString item(long index);

	//length:   [dispid 1447]
	long length();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXEntityResolver
// IVBSAXEntityResolver interface
// {0C05D096-F45B-4ACA-AD1A-AA0BC25518DC}

#undef  INTERFACE
#define INTERFACE IVBSAXEntityResolver

DECLARE_INTERFACE_(IVBSAXEntityResolver, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXEntityResolver methods:
	STDMETHOD_(HRESULT, resolveEntity) (THIS_ BSTR* strPublicId, BSTR* strSystemId, VARIANT* varInput) PURE; // Allow the application to resolve external entities.
};

typedef IVBSAXEntityResolver* LPVBSAXENTITYRESOLVER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXEntityResolver  {0C05D096-F45B-4ACA-AD1A-AA0BC25518DC}
// IVBSAXEntityResolver interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXEntityResolverProxy : public TAutoProxy
{
public:
	TIVBSAXEntityResolverProxy() : TAutoProxy(0x0) {}

	//resolveEntity: Allow the application to resolve external entities.  [dispid 1319]
	TAutoVal resolveEntity(BSTR* strPublicId, BSTR* strSystemId);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXLocator
// IVBSAXLocator interface
// {796E7AC5-5AA2-4EFF-ACAD-3FAAF01A3288}

#undef  INTERFACE
#define INTERFACE IVBSAXLocator

DECLARE_INTERFACE_(IVBSAXLocator, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXLocator methods:
	STDMETHOD_(HRESULT, Get_columnNumber) (THIS_ int* nColumn) PURE; // Get the column number where the current document event ends.
	STDMETHOD_(HRESULT, Get_lineNumber) (THIS_ int* nLine) PURE; // Get the line number where the current document event ends.
	STDMETHOD_(HRESULT, Get_publicId) (THIS_ BSTR* strPublicId) PURE; // Get the public identifier for the current document event.
	STDMETHOD_(HRESULT, Get_systemId) (THIS_ BSTR* strSystemId) PURE; // Get the system identifier for the current document event.
};

typedef IVBSAXLocator* LPVBSAXLOCATOR;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IVBSAXLocator  {796E7AC5-5AA2-4EFF-ACAD-3FAAF01A3288}
// IVBSAXLocator interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXLocatorProxy : public TAutoProxy
{
public:
	TIVBSAXLocatorProxy() : TAutoProxy(0x0) {}

	//columnNumber: Get the column number where the current document event ends.  [dispid 1313]
	int columnNumber();

	//lineNumber: Get the line number where the current document event ends.  [dispid 1314]
	int lineNumber();

	//publicId: Get the public identifier for the current document event.  [dispid 1315]
	TAutoString publicId();

	//systemId: Get the system identifier for the current document event.  [dispid 1316]
	TAutoString systemId();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMAttribute
// {2933BF85-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMAttribute

DECLARE_INTERFACE_(IXMLDOMAttribute, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMAttribute methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* attributeName) PURE; // get name of the attribute
	STDMETHOD_(HRESULT, Get_value) (THIS_ VARIANT* attributeValue) PURE; // string value of the attribute
	STDMETHOD_(HRESULT, Set_value) (THIS_ VARIANT attributeValue) PURE; // string value of the attribute
};

typedef IXMLDOMAttribute* LPXMLDOMATTRIBUTE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMAttribute  {2933BF85-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMAttributeProxy : public TAutoProxy
{
public:
	TIXMLDOMAttributeProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//name: get name of the attribute  [dispid 118]
	TAutoString name();

	//value: string value of the attribute  [dispid 120]
	TAutoVal value();

	//value: string value of the attribute  [dispid 120]
	void value(TAutoVal arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMCharacterData
// {2933BF84-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMCharacterData

DECLARE_INTERFACE_(IXMLDOMCharacterData, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMCharacterData methods:
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* data) PURE; // value of the node
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR data) PURE; // value of the node
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* dataLength) PURE; // number of characters in value
	STDMETHOD_(HRESULT, substringData) (THIS_ long offset, long count, BSTR* data) PURE; // retrieve substring of value
	STDMETHOD_(HRESULT, appendData) (THIS_ BSTR data) PURE; // append string to value
	STDMETHOD_(HRESULT, insertData) (THIS_ long offset, BSTR data) PURE; // insert string into value
	STDMETHOD_(HRESULT, deleteData) (THIS_ long offset, long count) PURE; // delete string within the value
	STDMETHOD_(HRESULT, replaceData) (THIS_ long offset, long count, BSTR data) PURE; // replace string within the value
};

typedef IXMLDOMCharacterData* LPXMLDOMCHARACTERDATA;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMText
// {2933BF87-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMText

DECLARE_INTERFACE_(IXMLDOMText, IXMLDOMCharacterData)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
	//IXMLDOMCharacterData methods:
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* data) PURE; // value of the node
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR data) PURE; // value of the node
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* dataLength) PURE; // number of characters in value
	STDMETHOD_(HRESULT, substringData) (THIS_ long offset, long count, BSTR* data) PURE; // retrieve substring of value
	STDMETHOD_(HRESULT, appendData) (THIS_ BSTR data) PURE; // append string to value
	STDMETHOD_(HRESULT, insertData) (THIS_ long offset, BSTR data) PURE; // insert string into value
	STDMETHOD_(HRESULT, deleteData) (THIS_ long offset, long count) PURE; // delete string within the value
	STDMETHOD_(HRESULT, replaceData) (THIS_ long offset, long count, BSTR data) PURE; // replace string within the value
#endif
	//IXMLDOMText methods:
	STDMETHOD_(HRESULT, splitText) (THIS_ long offset, IXMLDOMText** rightHandTextNode) PURE; // split the text node into two text nodes at the position specified
};

typedef IXMLDOMText* LPXMLDOMTEXT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMCDATASection
// {2933BF8A-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMCDATASection

DECLARE_INTERFACE_(IXMLDOMCDATASection, IXMLDOMText)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
	//IXMLDOMCharacterData methods:
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* data) PURE; // value of the node
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR data) PURE; // value of the node
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* dataLength) PURE; // number of characters in value
	STDMETHOD_(HRESULT, substringData) (THIS_ long offset, long count, BSTR* data) PURE; // retrieve substring of value
	STDMETHOD_(HRESULT, appendData) (THIS_ BSTR data) PURE; // append string to value
	STDMETHOD_(HRESULT, insertData) (THIS_ long offset, BSTR data) PURE; // insert string into value
	STDMETHOD_(HRESULT, deleteData) (THIS_ long offset, long count) PURE; // delete string within the value
	STDMETHOD_(HRESULT, replaceData) (THIS_ long offset, long count, BSTR data) PURE; // replace string within the value
	//IXMLDOMText methods:
	STDMETHOD_(HRESULT, splitText) (THIS_ long offset, IXMLDOMText** rightHandTextNode) PURE; // split the text node into two text nodes at the position specified
#endif
	//IXMLDOMCDATASection methods:
};

typedef IXMLDOMCDATASection* LPXMLDOMCDATASECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMCDATASection  {2933BF8A-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMCDATASectionProxy : public TAutoProxy
{
public:
	TIXMLDOMCDATASectionProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//data: value of the node  [dispid 109]
	TAutoString data();

	//data: value of the node  [dispid 109]
	void data(TAutoString arg0);

	//length: number of characters in value  [dispid 110]
	long length();

	//substringData: retrieve substring of value  [dispid 111]
	TAutoString substringData(long offset, long count);

	//appendData: append string to value  [dispid 112]
	void appendData(TAutoString data);

	//insertData: insert string into value  [dispid 113]
	void insertData(long offset, TAutoString data);

	//deleteData: delete string within the value  [dispid 114]
	void deleteData(long offset, long count);

	//replaceData: replace string within the value  [dispid 115]
	void replaceData(long offset, long count, TAutoString data);

	//splitText: split the text node into two text nodes at the position specified  [dispid 123]
	void splitText(TIXMLDOMTextProxy& Obj, long offset);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMComment
// {2933BF88-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMComment

DECLARE_INTERFACE_(IXMLDOMComment, IXMLDOMCharacterData)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
	//IXMLDOMCharacterData methods:
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* data) PURE; // value of the node
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR data) PURE; // value of the node
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* dataLength) PURE; // number of characters in value
	STDMETHOD_(HRESULT, substringData) (THIS_ long offset, long count, BSTR* data) PURE; // retrieve substring of value
	STDMETHOD_(HRESULT, appendData) (THIS_ BSTR data) PURE; // append string to value
	STDMETHOD_(HRESULT, insertData) (THIS_ long offset, BSTR data) PURE; // insert string into value
	STDMETHOD_(HRESULT, deleteData) (THIS_ long offset, long count) PURE; // delete string within the value
	STDMETHOD_(HRESULT, replaceData) (THIS_ long offset, long count, BSTR data) PURE; // replace string within the value
#endif
	//IXMLDOMComment methods:
};

typedef IXMLDOMComment* LPXMLDOMCOMMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMComment  {2933BF88-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMCommentProxy : public TAutoProxy
{
public:
	TIXMLDOMCommentProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//data: value of the node  [dispid 109]
	TAutoString data();

	//data: value of the node  [dispid 109]
	void data(TAutoString arg0);

	//length: number of characters in value  [dispid 110]
	long length();

	//substringData: retrieve substring of value  [dispid 111]
	TAutoString substringData(long offset, long count);

	//appendData: append string to value  [dispid 112]
	void appendData(TAutoString data);

	//insertData: insert string into value  [dispid 113]
	void insertData(long offset, TAutoString data);

	//deleteData: delete string within the value  [dispid 114]
	void deleteData(long offset, long count);

	//replaceData: replace string within the value  [dispid 115]
	void replaceData(long offset, long count, TAutoString data);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMDocumentFragment
// {3EFAA413-272F-11D2-836F-0000F87A7782}

#undef  INTERFACE
#define INTERFACE IXMLDOMDocumentFragment

DECLARE_INTERFACE_(IXMLDOMDocumentFragment, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMDocumentFragment methods:
};

typedef IXMLDOMDocumentFragment* LPXMLDOMDOCUMENTFRAGMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMDocumentFragment  {3EFAA413-272F-11D2-836F-0000F87A7782}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMDocumentFragmentProxy : public TAutoProxy
{
public:
	TIXMLDOMDocumentFragmentProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);
};

#endif

#ifdef __cplusplus
// IXMLDOMDocument  {2933BF81-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMDocumentProxy : public TAutoProxy
{
public:
	TIXMLDOMDocumentProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//doctype: node corresponding to the DOCTYPE  [dispid 38]
	void doctype(TIXMLDOMDocumentTypeProxy& Obj);

	//implementation: info on this DOM implementation  [dispid 39]
	void implementation(TIXMLDOMImplementationProxy& Obj);

	//documentElement: the root of the tree  [dispid 40]
	void documentElement(TIXMLDOMElementProxy& Obj);

	//documentElement: the root of the tree  [dispid 40]
	void documentElement(IXMLDOMElement* arg0);

	//createElement: create an Element node  [dispid 41]
	void createElement(TIXMLDOMElementProxy& Obj, TAutoString tagName);

	//createDocumentFragment: create a DocumentFragment node  [dispid 42]
	void createDocumentFragment(TIXMLDOMDocumentFragmentProxy& Obj);

	//createTextNode: create a text node  [dispid 43]
	void createTextNode(TIXMLDOMTextProxy& Obj, TAutoString data);

	//createComment: create a comment node  [dispid 44]
	void createComment(TIXMLDOMCommentProxy& Obj, TAutoString data);

	//createCDATASection: create a CDATA section node  [dispid 45]
	void createCDATASection(TIXMLDOMCDATASectionProxy& Obj, TAutoString data);

	//createProcessingInstruction: create a processing instruction node  [dispid 46]
	void createProcessingInstruction(TIXMLDOMProcessingInstructionProxy& Obj, TAutoString target, TAutoString data);

	//createAttribute: create an attribute node  [dispid 47]
	void createAttribute(TIXMLDOMAttributeProxy& Obj, TAutoString name);

	//createEntityReference: create an entity reference node  [dispid 49]
	void createEntityReference(TIXMLDOMEntityReferenceProxy& Obj, TAutoString name);

	//getElementsByTagName: build a list of elements by name  [dispid 50]
	void getElementsByTagName(TIXMLDOMNodeListProxy& Obj, TAutoString tagName);

	//createNode: create a node of the specified node type and name  [dispid 54]
	void createNode(TIXMLDOMNodeProxy& Obj, TAutoVal type, TAutoString name, TAutoString namespaceURI);

	//nodeFromID: retrieve node from it's ID  [dispid 56]
	void nodeFromID(TIXMLDOMNodeProxy& Obj, TAutoString idString);

	//load: load document from the specified XML source  [dispid 58]
	TBool load(TAutoVal xmlSource);

	//readyState: get the state of the XML document  [dispid -525]
	long readyState();

	//parseError: get the last parser error  [dispid 59]
	void parseError(TIXMLDOMParseErrorProxy& Obj);

	//url: get the URL for the loaded XML document  [dispid 60]
	TAutoString url();

	//async: flag for asynchronous download  [dispid 61]
	TBool async();

	//async: flag for asynchronous download  [dispid 61]
	void async(TBool arg0);

	//abort: abort an asynchronous download  [dispid 62]
	void abort();

	//loadXML: load the document from a string  [dispid 63]
	TBool loadXML(TAutoString bstrXML);

	//save: save the document to a specified destination  [dispid 64]
	void save(TAutoVal destination);

	//validateOnParse: indicates whether the parser performs validation  [dispid 65]
	TBool validateOnParse();

	//validateOnParse: indicates whether the parser performs validation  [dispid 65]
	void validateOnParse(TBool arg0);

	//resolveExternals: indicates whether the parser resolves references to external DTD/Entities/Schema  [dispid 66]
	TBool resolveExternals();

	//resolveExternals: indicates whether the parser resolves references to external DTD/Entities/Schema  [dispid 66]
	void resolveExternals(TBool arg0);

	//preserveWhiteSpace: indicates whether the parser preserves whitespace  [dispid 67]
	TBool preserveWhiteSpace();

	//preserveWhiteSpace: indicates whether the parser preserves whitespace  [dispid 67]
	void preserveWhiteSpace(TBool arg0);

	//onreadystatechange: register a readystatechange event handler  [dispid 68]
	void onreadystatechange(TAutoVal arg0);

	//ondataavailable: register an ondataavailable event handler  [dispid 69]
	void ondataavailable(TAutoVal arg0);

	//ontransformnode: register an ontransformnode event handler  [dispid 70]
	void ontransformnode(TAutoVal arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMDocumentType
// {2933BF8B-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMDocumentType

DECLARE_INTERFACE_(IXMLDOMDocumentType, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMDocumentType methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* rootName) PURE; // name of the document type (root of the tree)
	STDMETHOD_(HRESULT, Get_entities) (THIS_ IXMLDOMNamedNodeMap** entityMap) PURE; // a list of entities in the document
	STDMETHOD_(HRESULT, Get_notations) (THIS_ IXMLDOMNamedNodeMap** notationMap) PURE; // a list of notations in the document
};

typedef IXMLDOMDocumentType* LPXMLDOMDOCUMENTTYPE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMDocumentType  {2933BF8B-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMDocumentTypeProxy : public TAutoProxy
{
public:
	TIXMLDOMDocumentTypeProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//name: name of the document type (root of the tree)  [dispid 131]
	TAutoString name();

	//entities: a list of entities in the document  [dispid 132]
	void entities(TIXMLDOMNamedNodeMapProxy& Obj);

	//notations: a list of notations in the document  [dispid 133]
	void notations(TIXMLDOMNamedNodeMapProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMElement
// {2933BF86-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMElement

DECLARE_INTERFACE_(IXMLDOMElement, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMElement methods:
	STDMETHOD_(HRESULT, Get_tagName) (THIS_ BSTR* tagName) PURE; // get the tagName of the element
	STDMETHOD_(HRESULT, getAttribute) (THIS_ BSTR name, VARIANT* value) PURE; // look up the string value of an attribute by name
	STDMETHOD_(HRESULT, setAttribute) (THIS_ BSTR name, VARIANT value) PURE; // set the string value of an attribute by name
	STDMETHOD_(HRESULT, removeAttribute) (THIS_ BSTR name) PURE; // remove an attribute by name
	STDMETHOD_(HRESULT, getAttributeNode) (THIS_ BSTR name, IXMLDOMAttribute** attributeNode) PURE; // look up the attribute node by name
	STDMETHOD_(HRESULT, setAttributeNode) (THIS_ IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) PURE; // set the specified attribute on the element
	STDMETHOD_(HRESULT, removeAttributeNode) (THIS_ IXMLDOMAttribute* DOMAttribute, IXMLDOMAttribute** attributeNode) PURE; // remove the specified attribute
	STDMETHOD_(HRESULT, getElementsByTagName) (THIS_ BSTR tagName, IXMLDOMNodeList** resultList) PURE; // build a list of elements by name
	STDMETHOD_(HRESULT, normalize) (THIS ) PURE; // collapse all adjacent text nodes in sub-tree
};

typedef IXMLDOMElement* LPXMLDOMELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMElement  {2933BF86-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMElementProxy : public TAutoProxy
{
public:
	TIXMLDOMElementProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//tagName: get the tagName of the element  [dispid 97]
	TAutoString tagName();

	//getAttribute: look up the string value of an attribute by name  [dispid 99]
	TAutoVal getAttribute(TAutoString name);

	//setAttribute: set the string value of an attribute by name  [dispid 100]
	void setAttribute(TAutoString name, TAutoVal value);

	//removeAttribute: remove an attribute by name  [dispid 101]
	void removeAttribute(TAutoString name);

	//getAttributeNode: look up the attribute node by name  [dispid 102]
	void getAttributeNode(TIXMLDOMAttributeProxy& Obj, TAutoString name);

	//setAttributeNode: set the specified attribute on the element  [dispid 103]
	void setAttributeNode(TIXMLDOMAttributeProxy& Obj, IXMLDOMAttribute* DOMAttribute);

	//removeAttributeNode: remove the specified attribute  [dispid 104]
	void removeAttributeNode(TIXMLDOMAttributeProxy& Obj, IXMLDOMAttribute* DOMAttribute);

	//getElementsByTagName: build a list of elements by name  [dispid 105]
	void getElementsByTagName(TIXMLDOMNodeListProxy& Obj, TAutoString tagName);

	//normalize: collapse all adjacent text nodes in sub-tree  [dispid 106]
	void normalize();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMEntityReference
// {2933BF8E-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMEntityReference

DECLARE_INTERFACE_(IXMLDOMEntityReference, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMEntityReference methods:
};

typedef IXMLDOMEntityReference* LPXMLDOMENTITYREFERENCE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMEntityReference  {2933BF8E-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMEntityReferenceProxy : public TAutoProxy
{
public:
	TIXMLDOMEntityReferenceProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMImplementation
// {2933BF8F-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMImplementation

DECLARE_INTERFACE_(IXMLDOMImplementation, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLDOMImplementation methods:
	STDMETHOD_(HRESULT, hasFeature) (THIS_ BSTR feature, BSTR version, VARIANT_BOOL* hasFeature) PURE; 
};

typedef IXMLDOMImplementation* LPXMLDOMIMPLEMENTATION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMImplementation  {2933BF8F-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMImplementationProxy : public TAutoProxy
{
public:
	TIXMLDOMImplementationProxy() : TAutoProxy(0x0) {}

	//hasFeature:   [dispid 145]
	TBool hasFeature(TAutoString feature, TAutoString version);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMNamedNodeMap
// {2933BF83-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMNamedNodeMap

DECLARE_INTERFACE_(IXMLDOMNamedNodeMap, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLDOMNamedNodeMap methods:
	STDMETHOD_(HRESULT, getNamedItem) (THIS_ BSTR name, IXMLDOMNode** namedItem) PURE; // lookup item by name
	STDMETHOD_(HRESULT, setNamedItem) (THIS_ IXMLDOMNode* newItem, IXMLDOMNode** nameItem) PURE; // set item by name
	STDMETHOD_(HRESULT, removeNamedItem) (THIS_ BSTR name, IXMLDOMNode** namedItem) PURE; // remove item by name
	STDMETHOD_(HRESULT, Get_item) (THIS_ long index, IXMLDOMNode** listItem) PURE; // collection of nodes
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* listLength) PURE; // number of nodes in the collection
	STDMETHOD_(HRESULT, getQualifiedItem) (THIS_ BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) PURE; // lookup the item by name and namespace
	STDMETHOD_(HRESULT, removeQualifiedItem) (THIS_ BSTR baseName, BSTR namespaceURI, IXMLDOMNode** qualifiedItem) PURE; // remove the item by name and namespace
	STDMETHOD_(HRESULT, nextNode) (THIS_ IXMLDOMNode** nextItem) PURE; // get next node from iterator
	STDMETHOD_(HRESULT, reset) (THIS ) PURE; // reset the position of iterator
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE; 
};

typedef IXMLDOMNamedNodeMap* LPXMLDOMNAMEDNODEMAP;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMNamedNodeMap  {2933BF83-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMNamedNodeMapProxy : public TAutoProxy
{
public:
	TIXMLDOMNamedNodeMapProxy() : TAutoProxy(0x0) {}

	//getNamedItem: lookup item by name  [dispid 83]
	void getNamedItem(TIXMLDOMNodeProxy& Obj, TAutoString name);

	//setNamedItem: set item by name  [dispid 84]
	void setNamedItem(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newItem);

	//removeNamedItem: remove item by name  [dispid 85]
	void removeNamedItem(TIXMLDOMNodeProxy& Obj, TAutoString name);

	//item: collection of nodes  [dispid 0]
	void item(TIXMLDOMNodeProxy& Obj, long index);

	//length: number of nodes in the collection  [dispid 74]
	long length();

	//getQualifiedItem: lookup the item by name and namespace  [dispid 87]
	void getQualifiedItem(TIXMLDOMNodeProxy& Obj, TAutoString baseName, TAutoString namespaceURI);

	//removeQualifiedItem: remove the item by name and namespace  [dispid 88]
	void removeQualifiedItem(TIXMLDOMNodeProxy& Obj, TAutoString baseName, TAutoString namespaceURI);

	//nextNode: get next node from iterator  [dispid 89]
	void nextNode(TIXMLDOMNodeProxy& Obj);

	//reset: reset the position of iterator  [dispid 90]
	void reset();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMNodeList
// {2933BF82-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMNodeList

DECLARE_INTERFACE_(IXMLDOMNodeList, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLDOMNodeList methods:
	STDMETHOD_(HRESULT, Get_item) (THIS_ long index, IXMLDOMNode** listItem) PURE; // collection of nodes
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* listLength) PURE; // number of nodes in the collection
	STDMETHOD_(HRESULT, nextNode) (THIS_ IXMLDOMNode** nextItem) PURE; // get next node from iterator
	STDMETHOD_(HRESULT, reset) (THIS ) PURE; // reset the position of iterator
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE; 
};

typedef IXMLDOMNodeList* LPXMLDOMNODELIST;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMNodeList  {2933BF82-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMNodeListProxy : public TAutoProxy
{
public:
	TIXMLDOMNodeListProxy() : TAutoProxy(0x0) {}

	//item: collection of nodes  [dispid 0]
	void item(TIXMLDOMNodeProxy& Obj, long index);

	//length: number of nodes in the collection  [dispid 74]
	long length();

	//nextNode: get next node from iterator  [dispid 76]
	void nextNode(TIXMLDOMNodeProxy& Obj);

	//reset: reset the position of iterator  [dispid 77]
	void reset();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif

#ifdef __cplusplus
// IXMLDOMNode  {2933BF80-7B36-11D2-B20E-00C04F983E60}
// Core DOM node interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMNodeProxy : public TAutoProxy
{
public:
	TIXMLDOMNodeProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMParseError
// structure for reporting parser errors
// {3EFAA426-272F-11D2-836F-0000F87A7782}

#undef  INTERFACE
#define INTERFACE IXMLDOMParseError

DECLARE_INTERFACE_(IXMLDOMParseError, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLDOMParseError methods:
	STDMETHOD_(HRESULT, Get_errorCode) (THIS_ long* errorCode) PURE; // the error code
	STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* urlString) PURE; // the URL of the XML document containing the error
	STDMETHOD_(HRESULT, Get_reason) (THIS_ BSTR* reasonString) PURE; // the cause of the error
	STDMETHOD_(HRESULT, Get_srcText) (THIS_ BSTR* sourceString) PURE; // the data where the error occurred
	STDMETHOD_(HRESULT, Get_line) (THIS_ long* lineNumber) PURE; // the line number in the XML document where the error occurred
	STDMETHOD_(HRESULT, Get_linepos) (THIS_ long* linePosition) PURE; // the character position in the line containing the error
	STDMETHOD_(HRESULT, Get_filepos) (THIS_ long* filePosition) PURE; // the absolute file position in the XML document containing the error
};

typedef IXMLDOMParseError* LPXMLDOMPARSEERROR;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMParseError  {3EFAA426-272F-11D2-836F-0000F87A7782}
// structure for reporting parser errors [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMParseErrorProxy : public TAutoProxy
{
public:
	TIXMLDOMParseErrorProxy() : TAutoProxy(0x0) {}

	//errorCode: the error code  [dispid 0]
	long errorCode();

	//url: the URL of the XML document containing the error  [dispid 179]
	TAutoString url();

	//reason: the cause of the error  [dispid 180]
	TAutoString reason();

	//srcText: the data where the error occurred  [dispid 181]
	TAutoString srcText();

	//line: the line number in the XML document where the error occurred  [dispid 182]
	long line();

	//linepos: the character position in the line containing the error  [dispid 183]
	long linepos();

	//filepos: the absolute file position in the XML document containing the error  [dispid 184]
	long filepos();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMProcessingInstruction
// {2933BF89-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMProcessingInstruction

DECLARE_INTERFACE_(IXMLDOMProcessingInstruction, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMProcessingInstruction methods:
	STDMETHOD_(HRESULT, Get_target) (THIS_ BSTR* name) PURE; // the target
	STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* value) PURE; // the data
	STDMETHOD_(HRESULT, Set_data) (THIS_ BSTR value) PURE; // the data
};

typedef IXMLDOMProcessingInstruction* LPXMLDOMPROCESSINGINSTRUCTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLDOMProcessingInstruction  {2933BF89-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMProcessingInstructionProxy : public TAutoProxy
{
public:
	TIXMLDOMProcessingInstructionProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//target: the target  [dispid 127]
	TAutoString target();

	//data: the data  [dispid 128]
	TAutoString data();

	//data: the data  [dispid 128]
	void data(TAutoString arg0);
};

#endif

#ifdef __cplusplus
// IXMLDOMText  {2933BF87-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMTextProxy : public TAutoProxy
{
public:
	TIXMLDOMTextProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//data: value of the node  [dispid 109]
	TAutoString data();

	//data: value of the node  [dispid 109]
	void data(TAutoString arg0);

	//length: number of characters in value  [dispid 110]
	long length();

	//substringData: retrieve substring of value  [dispid 111]
	TAutoString substringData(long offset, long count);

	//appendData: append string to value  [dispid 112]
	void appendData(TAutoString data);

	//insertData: insert string into value  [dispid 113]
	void insertData(long offset, TAutoString data);

	//deleteData: delete string within the value  [dispid 114]
	void deleteData(long offset, long count);

	//replaceData: replace string within the value  [dispid 115]
	void replaceData(long offset, long count, TAutoString data);

	//splitText: split the text node into two text nodes at the position specified  [dispid 123]
	void splitText(TIXMLDOMTextProxy& Obj, long offset);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLElement2
// IXMLElement2 extends IXMLElement.
// {2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}

#undef  INTERFACE
#define INTERFACE IXMLElement2

DECLARE_INTERFACE_(IXMLElement2, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLElement2 methods:
	STDMETHOD_(HRESULT, Get_tagName) (THIS_ BSTR* p) PURE; // get tag name.
	STDMETHOD_(HRESULT, Set_tagName) (THIS_ BSTR p) PURE; // get tag name.
	STDMETHOD_(HRESULT, Get_parent) (THIS_ IXMLElement2** ppParent) PURE; // get parent IXMLElement.
	STDMETHOD_(HRESULT, setAttribute) (THIS_ BSTR strPropertyName, VARIANT PropertyValue) PURE; // set attribute.
	STDMETHOD_(HRESULT, getAttribute) (THIS_ BSTR strPropertyName, VARIANT* PropertyValue) PURE; // get attribute.
	STDMETHOD_(HRESULT, removeAttribute) (THIS_ BSTR strPropertyName) PURE; // remove attribute.
	STDMETHOD_(HRESULT, Get_children) (THIS_ IXMLElementCollection** pp) PURE; // get a IXMLElementCollection of all children.
	STDMETHOD_(HRESULT, Get_type) (THIS_ long* plType) PURE; // get type of this IXMLElement.
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* p) PURE; // get text.
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR p) PURE; // get text.
	STDMETHOD_(HRESULT, addChild) (THIS_ IXMLElement2* pChildElem, long lIndex, long lReserved) PURE; // add a child.
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLElement2* pChildElem) PURE; // remove a child.
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLElementCollection** pp) PURE; // get a IXMLElementCollection of all attributes.
};

typedef IXMLElement2* LPXMLELEMENT2;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXMLElement2  {2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}
// IXMLElement2 extends IXMLElement. [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLElement2Proxy : public TAutoProxy
{
public:
	TIXMLElement2Proxy() : TAutoProxy(0x0) {}

	//tagName: get tag name.  [dispid 65737]
	TAutoString tagName();

	//tagName: get tag name.  [dispid 65737]
	void tagName(TAutoString arg0);

	//parent: get parent IXMLElement.  [dispid 65738]
	void parent(TIXMLElement2Proxy& Obj);

	//setAttribute: set attribute.  [dispid 65739]
	void setAttribute(TAutoString strPropertyName, TAutoVal PropertyValue);

	//getAttribute: get attribute.  [dispid 65740]
	TAutoVal getAttribute(TAutoString strPropertyName);

	//removeAttribute: remove attribute.  [dispid 65741]
	void removeAttribute(TAutoString strPropertyName);

	//children: get a IXMLElementCollection of all children.  [dispid 65742]
	void children(TIXMLElementCollectionProxy& Obj);

	//type: get type of this IXMLElement.  [dispid 65743]
	long type();

	//text: get text.  [dispid 65744]
	TAutoString text();

	//text: get text.  [dispid 65744]
	void text(TAutoString arg0);

	//addChild: add a child.  [dispid 65745]
	void addChild(IXMLElement2* pChildElem, long lIndex, long lReserved);

	//removeChild: remove a child.  [dispid 65746]
	void removeChild(IXMLElement2* pChildElem);

	//attributes: get a IXMLElementCollection of all attributes.  [dispid 65747]
	void attributes(TIXMLElementCollectionProxy& Obj);
};

#endif

/*

#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLElementCollection
// IXMLElementCollection helps to enumerate through a XML document tree.
// {65725580-9B5D-11D0-9BFE-00C04FC99C8E}

#undef  INTERFACE
#define INTERFACE IXMLElementCollection

DECLARE_INTERFACE_(IXMLElementCollection, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLElementCollection methods:
	STDMETHOD_(HRESULT, Set_length) (THIS_ long p) PURE;
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE;
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE;
	STDMETHOD_(HRESULT, item) (THIS_ VARIANT var1, VARIANT var2, IDispatch** ppDisp) PURE; // get current item, or (optional) by index and name.
};

typedef IXMLElementCollection* LPXMLELEMENTCOLLECTION;

#ifdef __cplusplus
}
#endif  // __cplusplus

*/

#ifdef __cplusplus
// IXMLElementCollection  {65725580-9B5D-11D0-9BFE-00C04FC99C8E}
// IXMLElementCollection helps to enumerate through a XML document tree. [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLElementCollectionProxy : public TAutoProxy
{
public:
	TIXMLElementCollectionProxy() : TAutoProxy(0x0) {}

	//length:   [dispid 65537]
	long length();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

	//item: get current item, or (optional) by index and name.  [dispid 65539]
	IDispatch* item(TAutoVal var1 = TNoArg(), TAutoVal var2 = TNoArg());
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXSLProcessor
// IXSLProcessor Interface
// {2933BF92-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXSLProcessor

DECLARE_INTERFACE_(IXSLProcessor, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXSLProcessor methods:
	STDMETHOD_(HRESULT, Set_input) (THIS_ VARIANT pVar) PURE; // XML input tree to transform
	STDMETHOD_(HRESULT, Get_input) (THIS_ VARIANT* pVar) PURE; // XML input tree to transform
	STDMETHOD_(HRESULT, Get_ownerTemplate) (THIS_ IXSLTemplate** ppTemplate) PURE; // template object used to create this processor object
	STDMETHOD_(HRESULT, setStartMode) (THIS_ BSTR mode, BSTR namespaceURI) PURE; // set XSL mode and it's namespace
	STDMETHOD_(HRESULT, Get_startMode) (THIS_ BSTR* mode) PURE; // starting XSL mode
	STDMETHOD_(HRESULT, Get_startModeURI) (THIS_ BSTR* namespaceURI) PURE; // namespace of starting XSL mode
	STDMETHOD_(HRESULT, Set_output) (THIS_ VARIANT pOutput) PURE; // custom stream object for transform output
	STDMETHOD_(HRESULT, Get_output) (THIS_ VARIANT* pOutput) PURE; // custom stream object for transform output
	STDMETHOD_(HRESULT, transform) (THIS_ VARIANT_BOOL* pDone) PURE; // start/resume the XSL transformation process
	STDMETHOD_(HRESULT, reset) (THIS ) PURE; // reset state of processor and abort current transform
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* pReadyState) PURE; // current state of the processor
	STDMETHOD_(HRESULT, addParameter) (THIS_ BSTR baseName, VARIANT parameter, BSTR namespaceURI) PURE; // set <xsl:param> values
	STDMETHOD_(HRESULT, addObject) (THIS_ IDispatch* obj, BSTR namespaceURI) PURE; // pass object to stylesheet
	STDMETHOD_(HRESULT, Get_stylesheet) (THIS_ IXMLDOMNode** stylesheet) PURE; // current stylesheet being used
};

typedef IXSLProcessor* LPXSLPROCESSOR;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IXSLProcessor  {2933BF92-7B36-11D2-B20E-00C04F983E60}
// IXSLProcessor Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXSLProcessorProxy : public TAutoProxy
{
public:
	TIXSLProcessorProxy() : TAutoProxy(0x0) {}

	//input: XML input tree to transform  [dispid 2]
	void input(TAutoVal arg0);

	//input: XML input tree to transform  [dispid 2]
	TAutoVal input();

	//ownerTemplate: template object used to create this processor object  [dispid 3]
	void ownerTemplate(TIXSLTemplateProxy& Obj);

	//setStartMode: set XSL mode and it's namespace  [dispid 4]
	void setStartMode(TAutoString mode, TAutoString namespaceURI);

	//startMode: starting XSL mode  [dispid 5]
	TAutoString startMode();

	//startModeURI: namespace of starting XSL mode  [dispid 6]
	TAutoString startModeURI();

	//output: custom stream object for transform output  [dispid 7]
	void output(TAutoVal arg0);

	//output: custom stream object for transform output  [dispid 7]
	TAutoVal output();

	//transform: start/resume the XSL transformation process  [dispid 8]
	TBool transform();

	//reset: reset state of processor and abort current transform  [dispid 9]
	void reset();

	//readyState: current state of the processor  [dispid 10]
	long readyState();

	//addParameter: set <xsl:param> values  [dispid 11]
	void addParameter(TAutoString baseName, TAutoVal parameter, TAutoString namespaceURI);

	//addObject: pass object to stylesheet  [dispid 12]
	void addObject(IDispatch* obj, TAutoString namespaceURI);

	//stylesheet: current stylesheet being used  [dispid 13]
	void stylesheet(TIXMLDOMNodeProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaItemCollection
// XML Schema Item Collection
// {50EA08B2-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaItemCollection

DECLARE_INTERFACE_(ISchemaItemCollection, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//ISchemaItemCollection methods:
	STDMETHOD_(HRESULT, Get_item) (THIS_ long index, ISchemaItem** item) PURE; 
	STDMETHOD_(HRESULT, itemByName) (THIS_ BSTR name, ISchemaItem** item) PURE; 
	STDMETHOD_(HRESULT, itemByQName) (THIS_ BSTR name, BSTR namespaceURI, ISchemaItem** item) PURE; 
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* length) PURE; 
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE; 
};

typedef ISchemaItemCollection* LPSCHEMAITEMCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ISchemaItemCollection  {50EA08B2-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Item Collection [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaItemCollectionProxy : public TAutoProxy
{
public:
	TISchemaItemCollectionProxy() : TAutoProxy(0x0) {}

	//item:   [dispid 0]
	void item(TISchemaItemProxy& Obj, long index);

	//itemByName:   [dispid 1423]
	void itemByName(TISchemaItemProxy& Obj, TAutoString name);

	//itemByQName:   [dispid 1424]
	void itemByQName(TISchemaItemProxy& Obj, TAutoString name, TAutoString namespaceURI);

	//length:   [dispid 1447]
	long length();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif


//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IXMLDOMCharacterData  {2933BF84-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMCharacterDataProxy : public TAutoProxy
{
public:
	TIXMLDOMCharacterDataProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//data: value of the node  [dispid 109]
	TAutoString data();

	//data: value of the node  [dispid 109]
	void data(TAutoString arg0);

	//length: number of characters in value  [dispid 110]
	long length();

	//substringData: retrieve substring of value  [dispid 111]
	TAutoString substringData(long offset, long count);

	//appendData: append string to value  [dispid 112]
	void appendData(TAutoString data);

	//insertData: insert string into value  [dispid 113]
	void insertData(long offset, TAutoString data);

	//deleteData: delete string within the value  [dispid 114]
	void deleteData(long offset, long count);

	//replaceData: replace string within the value  [dispid 115]
	void replaceData(long offset, long count, TAutoString data);
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMNotation
// {2933BF8C-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMNotation

DECLARE_INTERFACE_(IXMLDOMNotation, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMNotation methods:
	STDMETHOD_(HRESULT, Get_publicId) (THIS_ VARIANT* publicId) PURE; // the public ID
	STDMETHOD_(HRESULT, Get_systemId) (THIS_ VARIANT* systemId) PURE; // the system ID
};

typedef IXMLDOMNotation* LPXMLDOMNOTATION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IXMLDOMNotation  {2933BF8C-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMNotationProxy : public TAutoProxy
{
public:
	TIXMLDOMNotationProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//publicId: the public ID  [dispid 136]
	TAutoVal publicId();

	//systemId: the system ID  [dispid 137]
	TAutoVal systemId();
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMEntity
// {2933BF8D-7B36-11D2-B20E-00C04F983E60}

#undef  INTERFACE
#define INTERFACE IXMLDOMEntity

DECLARE_INTERFACE_(IXMLDOMEntity, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXMLDOMEntity methods:
	STDMETHOD_(HRESULT, Get_publicId) (THIS_ VARIANT* publicId) PURE; // the public ID
	STDMETHOD_(HRESULT, Get_systemId) (THIS_ VARIANT* systemId) PURE; // the system ID
	STDMETHOD_(HRESULT, Get_notationName) (THIS_ BSTR* name) PURE; // the name of the notation
};

typedef IXMLDOMEntity* LPXMLDOMENTITY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IXMLDOMEntity  {2933BF8D-7B36-11D2-B20E-00C04F983E60}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMEntityProxy : public TAutoProxy
{
public:
	TIXMLDOMEntityProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//publicId: the public ID  [dispid 140]
	TAutoVal publicId();

	//systemId: the system ID  [dispid 141]
	TAutoVal systemId();

	//notationName: the name of the notation  [dispid 142]
	TAutoString notationName();
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXTLRuntime
// XTL runtime object
// {3EFAA425-272F-11D2-836F-0000F87A7782}

#undef  INTERFACE
#define INTERFACE IXTLRuntime

DECLARE_INTERFACE_(IXTLRuntime, IXMLDOMNode)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNode methods:
	STDMETHOD_(HRESULT, Get_nodeName) (THIS_ BSTR* name) PURE; // name of the node
	STDMETHOD_(HRESULT, Get_nodeValue) (THIS_ VARIANT* value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Set_nodeValue) (THIS_ VARIANT value) PURE; // value stored in the node
	STDMETHOD_(HRESULT, Get_nodeType) (THIS_ DOMNodeType* type) PURE; // the node's type
	STDMETHOD_(HRESULT, Get_parentNode) (THIS_ IXMLDOMNode** parent) PURE; // parent of the node
	STDMETHOD_(HRESULT, Get_childNodes) (THIS_ IXMLDOMNodeList** childList) PURE; // the collection of the node's children
	STDMETHOD_(HRESULT, Get_firstChild) (THIS_ IXMLDOMNode** firstChild) PURE; // first child of the node
	STDMETHOD_(HRESULT, Get_lastChild) (THIS_ IXMLDOMNode** lastChild) PURE; // last child of the node
	STDMETHOD_(HRESULT, Get_previousSibling) (THIS_ IXMLDOMNode** previousSibling) PURE; // left sibling of the node
	STDMETHOD_(HRESULT, Get_nextSibling) (THIS_ IXMLDOMNode** nextSibling) PURE; // right sibling of the node
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ IXMLDOMNamedNodeMap** attributeMap) PURE; // the collection of the node's attributes
	STDMETHOD_(HRESULT, insertBefore) (THIS_ IXMLDOMNode* newChild, VARIANT refChild, IXMLDOMNode** outNewChild) PURE; // insert a child node
	STDMETHOD_(HRESULT, replaceChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode* oldChild, IXMLDOMNode** outOldChild) PURE; // replace a child node
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLDOMNode* childNode, IXMLDOMNode** oldChild) PURE; // remove a child node
	STDMETHOD_(HRESULT, appendChild) (THIS_ IXMLDOMNode* newChild, IXMLDOMNode** outNewChild) PURE; // append a child node
	STDMETHOD_(HRESULT, hasChildNodes) (THIS_ VARIANT_BOOL* hasChild) PURE; 
	STDMETHOD_(HRESULT, Get_ownerDocument) (THIS_ IXMLDOMDocument** ) PURE; // document that contains the node
	STDMETHOD_(HRESULT, cloneNode) (THIS_ VARIANT_BOOL deep, IXMLDOMNode** cloneRoot) PURE; 
	STDMETHOD_(HRESULT, Get_nodeTypeString) (THIS_ BSTR* nodeType) PURE; // the type of node in string form
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR text) PURE; // text content of the node and subtree
	STDMETHOD_(HRESULT, Get_specified) (THIS_ VARIANT_BOOL* isSpecified) PURE; // indicates whether node is a default value
	STDMETHOD_(HRESULT, Get_definition) (THIS_ IXMLDOMNode** definitionNode) PURE; // pointer to the definition of the node in the DTD or schema
	STDMETHOD_(HRESULT, Get_nodeTypedValue) (THIS_ VARIANT* typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Set_nodeTypedValue) (THIS_ VARIANT typedValue) PURE; // get the strongly typed value of the node
	STDMETHOD_(HRESULT, Get_dataType) (THIS_ VARIANT* dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Set_dataType) (THIS_ BSTR dataTypeName) PURE; // the data type of the node
	STDMETHOD_(HRESULT, Get_xml) (THIS_ BSTR* xmlString) PURE; // return the XML source for the node and each of its descendants
	STDMETHOD_(HRESULT, transformNode) (THIS_ IXMLDOMNode* stylesheet, BSTR* xmlString) PURE; // apply the stylesheet to the subtree
	STDMETHOD_(HRESULT, selectNodes) (THIS_ BSTR queryString, IXMLDOMNodeList** resultList) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, selectSingleNode) (THIS_ BSTR queryString, IXMLDOMNode** resultNode) PURE; // execute query on the subtree
	STDMETHOD_(HRESULT, Get_parsed) (THIS_ VARIANT_BOOL* isParsed) PURE; // has sub-tree been completely parsed
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; // the URI for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_prefix) (THIS_ BSTR* prefixString) PURE; // the prefix for the namespace applying to the node
	STDMETHOD_(HRESULT, Get_baseName) (THIS_ BSTR* nameString) PURE; // the base name of the node (nodename with the prefix stripped off)
	STDMETHOD_(HRESULT, transformNodeToObject) (THIS_ IXMLDOMNode* stylesheet, VARIANT outputObject) PURE; // apply the stylesheet to the subtree, returning the result through a document or a stream
#endif
	//IXTLRuntime methods:
	STDMETHOD_(HRESULT, uniqueID) (THIS_ IXMLDOMNode* pNode, long* pID) PURE; 
	STDMETHOD_(HRESULT, depth) (THIS_ IXMLDOMNode* pNode, long* pDepth) PURE; 
	STDMETHOD_(HRESULT, childNumber) (THIS_ IXMLDOMNode* pNode, long* pNumber) PURE; 
	STDMETHOD_(HRESULT, ancestorChildNumber) (THIS_ BSTR bstrNodeName, IXMLDOMNode* pNode, long* pNumber) PURE; 
	STDMETHOD_(HRESULT, absoluteChildNumber) (THIS_ IXMLDOMNode* pNode, long* pNumber) PURE; 
	STDMETHOD_(HRESULT, formatIndex) (THIS_ long lIndex, BSTR bstrFormat, BSTR* pbstrFormattedString) PURE; 
	STDMETHOD_(HRESULT, formatNumber) (THIS_ double dblNumber, BSTR bstrFormat, BSTR* pbstrFormattedString) PURE; 
	STDMETHOD_(HRESULT, formatDate) (THIS_ VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString) PURE; 
	STDMETHOD_(HRESULT, formatTime) (THIS_ VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR* pbstrFormattedString) PURE; 
};

typedef IXTLRuntime* LPXTLRUNTIME;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IXTLRuntime  {3EFAA425-272F-11D2-836F-0000F87A7782}
// XTL runtime object [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXTLRuntimeProxy : public TAutoProxy
{
public:
	TIXTLRuntimeProxy() : TAutoProxy(0x0) {}

	//nodeName: name of the node  [dispid 2]
	TAutoString nodeName();

	//nodeValue: value stored in the node  [dispid 3]
	TAutoVal nodeValue();

	//nodeValue: value stored in the node  [dispid 3]
	void nodeValue(TAutoVal arg0);

	//nodeType: the node's type  [dispid 4]
	DOMNodeType nodeType();

	//parentNode: parent of the node  [dispid 6]
	void parentNode(TIXMLDOMNodeProxy& Obj);

	//childNodes: the collection of the node's children  [dispid 7]
	void childNodes(TIXMLDOMNodeListProxy& Obj);

	//firstChild: first child of the node  [dispid 8]
	void firstChild(TIXMLDOMNodeProxy& Obj);

	//lastChild: last child of the node  [dispid 9]
	void lastChild(TIXMLDOMNodeProxy& Obj);

	//previousSibling: left sibling of the node  [dispid 10]
	void previousSibling(TIXMLDOMNodeProxy& Obj);

	//nextSibling: right sibling of the node  [dispid 11]
	void nextSibling(TIXMLDOMNodeProxy& Obj);

	//attributes: the collection of the node's attributes  [dispid 12]
	void attributes(TIXMLDOMNamedNodeMapProxy& Obj);

	//insertBefore: insert a child node  [dispid 13]
	void insertBefore(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, TAutoVal refChild);

	//replaceChild: replace a child node  [dispid 14]
	void replaceChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild, IXMLDOMNode* oldChild);

	//removeChild: remove a child node  [dispid 15]
	void removeChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* childNode);

	//appendChild: append a child node  [dispid 16]
	void appendChild(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* newChild);

	//hasChildNodes:   [dispid 17]
	TBool hasChildNodes();

	//ownerDocument: document that contains the node  [dispid 18]
	void ownerDocument(TIXMLDOMDocumentProxy& Obj);

	//cloneNode:   [dispid 19]
	void cloneNode(TIXMLDOMNodeProxy& Obj, TBool deep);

	//nodeTypeString: the type of node in string form  [dispid 21]
	TAutoString nodeTypeString();

	//text: text content of the node and subtree  [dispid 24]
	TAutoString text();

	//text: text content of the node and subtree  [dispid 24]
	void text(TAutoString arg0);

	//specified: indicates whether node is a default value  [dispid 22]
	TBool specified();

	//definition: pointer to the definition of the node in the DTD or schema  [dispid 23]
	void definition(TIXMLDOMNodeProxy& Obj);

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	TAutoVal nodeTypedValue();

	//nodeTypedValue: get the strongly typed value of the node  [dispid 25]
	void nodeTypedValue(TAutoVal arg0);

	//dataType: the data type of the node  [dispid 26]
	TAutoVal dataType();

	//dataType: the data type of the node  [dispid 26]
	void dataType(TAutoString arg0);

	//xml: return the XML source for the node and each of its descendants  [dispid 27]
	TAutoString xml();

	//transformNode: apply the stylesheet to the subtree  [dispid 28]
	TAutoString transformNode(IXMLDOMNode* stylesheet);

	//selectNodes: execute query on the subtree  [dispid 29]
	void selectNodes(TIXMLDOMNodeListProxy& Obj, TAutoString queryString);

	//selectSingleNode: execute query on the subtree  [dispid 30]
	void selectSingleNode(TIXMLDOMNodeProxy& Obj, TAutoString queryString);

	//parsed: has sub-tree been completely parsed  [dispid 31]
	TBool parsed();

	//namespaceURI: the URI for the namespace applying to the node  [dispid 32]
	TAutoString namespaceURI();

	//prefix: the prefix for the namespace applying to the node  [dispid 33]
	TAutoString prefix();

	//baseName: the base name of the node (nodename with the prefix stripped off)  [dispid 34]
	TAutoString baseName();

	//transformNodeToObject: apply the stylesheet to the subtree, returning the result through a document or a stream  [dispid 35]
	void transformNodeToObject(IXMLDOMNode* stylesheet, TAutoVal outputObject);

	//uniqueID:   [dispid 187]
	long uniqueID(IXMLDOMNode* pNode);

	//depth:   [dispid 188]
	long depth(IXMLDOMNode* pNode);

	//childNumber:   [dispid 189]
	long childNumber(IXMLDOMNode* pNode);

	//ancestorChildNumber:   [dispid 190]
	long ancestorChildNumber(TAutoString bstrNodeName, IXMLDOMNode* pNode);

	//absoluteChildNumber:   [dispid 191]
	long absoluteChildNumber(IXMLDOMNode* pNode);

	//formatIndex:   [dispid 192]
	TAutoString formatIndex(long lIndex, TAutoString bstrFormat);

	//formatNumber:   [dispid 193]
	TAutoString formatNumber(double dblNumber, TAutoString bstrFormat);

	//formatDate:   [dispid 194]
	TAutoString formatDate(TAutoVal varDate, TAutoString bstrFormat, TAutoVal varDestLocale = TNoArg());

	//formatTime:   [dispid 195]
	TAutoString formatTime(TAutoVal varTime, TAutoString bstrFormat, TAutoVal varDestLocale = TNoArg());
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISAXXMLFilter
// ISAXXMLFilter interface
// {70409222-CA09-4475-ACB8-40312FE8D145}

#undef  INTERFACE
#define INTERFACE ISAXXMLFilter

DECLARE_INTERFACE_(ISAXXMLFilter, ISAXXMLReader)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//ISAXXMLReader methods:
	STDMETHOD_(HRESULT, getFeature) (THIS_ unsigned short* pwchName, VARIANT_BOOL* pvfValue) PURE; 
	STDMETHOD_(HRESULT, putFeature) (THIS_ unsigned short* pwchName, VARIANT_BOOL vfValue) PURE; 
	STDMETHOD_(HRESULT, getProperty) (THIS_ unsigned short* pwchName, VARIANT* pvarValue) PURE; 
	STDMETHOD_(HRESULT, putProperty) (THIS_ unsigned short* pwchName, VARIANT varValue) PURE; 
	STDMETHOD_(HRESULT, getEntityResolver) (THIS_ ISAXEntityResolver** ppResolver) PURE; 
	STDMETHOD_(HRESULT, putEntityResolver) (THIS_ ISAXEntityResolver* pResolver) PURE; 
	STDMETHOD_(HRESULT, getContentHandler) (THIS_ ISAXContentHandler** ppHandler) PURE; 
	STDMETHOD_(HRESULT, putContentHandler) (THIS_ ISAXContentHandler* pHandler) PURE; 
	STDMETHOD_(HRESULT, getDTDHandler) (THIS_ ISAXDTDHandler** ppHandler) PURE; 
	STDMETHOD_(HRESULT, putDTDHandler) (THIS_ ISAXDTDHandler* pHandler) PURE; 
	STDMETHOD_(HRESULT, getErrorHandler) (THIS_ ISAXErrorHandler** ppHandler) PURE; 
	STDMETHOD_(HRESULT, putErrorHandler) (THIS_ ISAXErrorHandler* pHandler) PURE; 
	STDMETHOD_(HRESULT, getBaseURL) (THIS_ unsigned short** ppwchBaseUrl) PURE; 
	STDMETHOD_(HRESULT, putBaseURL) (THIS_ unsigned short* pwchBaseUrl) PURE; 
	STDMETHOD_(HRESULT, getSecureBaseURL) (THIS_ unsigned short** ppwchSecureBaseUrl) PURE; 
	STDMETHOD_(HRESULT, putSecureBaseURL) (THIS_ unsigned short* pwchSecureBaseUrl) PURE; 
	STDMETHOD_(HRESULT, parse) (THIS_ VARIANT varInput) PURE; 
	STDMETHOD_(HRESULT, parseURL) (THIS_ unsigned short* pwchUrl) PURE; 
#endif
	//ISAXXMLFilter methods:
	STDMETHOD_(HRESULT, getParent) (THIS_ ISAXXMLReader** ppReader) PURE; 
	STDMETHOD_(HRESULT, putParent) (THIS_ ISAXXMLReader* pReader) PURE; 
};

typedef ISAXXMLFilter* LPSAXXMLFILTER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IVBSAXXMLFilter
// IVBSAXXMLFilter interface
// {1299EB1B-5B88-433E-82DE-82CA75AD4E04}

#undef  INTERFACE
#define INTERFACE IVBSAXXMLFilter

DECLARE_INTERFACE_(IVBSAXXMLFilter, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IVBSAXXMLFilter methods:
	STDMETHOD_(HRESULT, Get_parent) (THIS_ IVBSAXXMLReader** oReader) PURE; // Set or get the parent reader
	STDMETHOD_(HRESULT, SetRef_parent) (THIS_ IVBSAXXMLReader* oReader) PURE; // Set or get the parent reader
};

typedef IVBSAXXMLFilter* LPVBSAXXMLFILTER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IVBSAXXMLFilter  {1299EB1B-5B88-433E-82DE-82CA75AD4E04}
// IVBSAXXMLFilter interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIVBSAXXMLFilterProxy : public TAutoProxy
{
public:
	TIVBSAXXMLFilterProxy() : TAutoProxy(0x0) {}

	//parent: Set or get the parent reader  [dispid 1309]
	void parent(TIVBSAXXMLReaderProxy& Obj);

	//parent: Set or get the parent reader  [dispid 1309]
	void parent(IVBSAXXMLReader* arg0);
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IMXSchemaDeclHandler
// IMXSchemaDeclHandler interface
// {FA4BB38C-FAF9-4CCA-9302-D1DD0FE520DB}

#undef  INTERFACE
#define INTERFACE IMXSchemaDeclHandler

DECLARE_INTERFACE_(IMXSchemaDeclHandler, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IMXSchemaDeclHandler methods:
	STDMETHOD_(HRESULT, schemaElementDecl) (THIS_ ISchemaElement* oSchemaElement) PURE; // Access schema element declaration
};

typedef IMXSchemaDeclHandler* LPMXSCHEMADECLHANDLER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IMXSchemaDeclHandler  {FA4BB38C-FAF9-4CCA-9302-D1DD0FE520DB}
// IMXSchemaDeclHandler interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIMXSchemaDeclHandlerProxy : public TAutoProxy
{
public:
	TIMXSchemaDeclHandlerProxy() : TAutoProxy(0x0) {}

	//schemaElementDecl: Access schema element declaration  [dispid 1403]
	void schemaElementDecl(ISchemaElement* oSchemaElement);
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaParticle
// XML Schema Particle
// {50EA08B5-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaParticle

DECLARE_INTERFACE_(ISchemaParticle, ISchemaItem)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
#endif
	//ISchemaParticle methods:
	STDMETHOD_(HRESULT, Get_minOccurs) (THIS_ VARIANT* minOccurs) PURE; 
	STDMETHOD_(HRESULT, Get_maxOccurs) (THIS_ VARIANT* maxOccurs) PURE; 
};

typedef ISchemaParticle* LPSCHEMAPARTICLE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaElement
// XML Schema Element
// {50EA08B7-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaElement

DECLARE_INTERFACE_(ISchemaElement, ISchemaParticle)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
	//ISchemaParticle methods:
	STDMETHOD_(HRESULT, Get_minOccurs) (THIS_ VARIANT* minOccurs) PURE; 
	STDMETHOD_(HRESULT, Get_maxOccurs) (THIS_ VARIANT* maxOccurs) PURE; 
#endif
	//ISchemaElement methods:
	STDMETHOD_(HRESULT, Get_type) (THIS_ ISchemaType** type) PURE; 
	STDMETHOD_(HRESULT, Get_scope) (THIS_ ISchemaComplexType** scope) PURE; 
	STDMETHOD_(HRESULT, Get_defaultValue) (THIS_ BSTR* defaultValue) PURE; 
	STDMETHOD_(HRESULT, Get_fixedValue) (THIS_ BSTR* fixedValue) PURE; 
	STDMETHOD_(HRESULT, Get_isNillable) (THIS_ VARIANT_BOOL* nillable) PURE; 
	STDMETHOD_(HRESULT, Get_identityConstraints) (THIS_ ISchemaItemCollection** constraints) PURE; 
	STDMETHOD_(HRESULT, Get_substitutionGroup) (THIS_ ISchemaElement** element) PURE; 
	STDMETHOD_(HRESULT, Get_substitutionGroupExclusions) (THIS_ SCHEMADERIVATIONMETHOD* exclusions) PURE; 
	STDMETHOD_(HRESULT, Get_disallowedSubstitutions) (THIS_ SCHEMADERIVATIONMETHOD* disallowed) PURE; 
	STDMETHOD_(HRESULT, Get_isAbstract) (THIS_ VARIANT_BOOL* abstract) PURE; 
	STDMETHOD_(HRESULT, Get_isReference) (THIS_ VARIANT_BOOL* reference) PURE; 
};

typedef ISchemaElement* LPSCHEMAELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaElement  {50EA08B7-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Element [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaElementProxy : public TAutoProxy
{
public:
	TISchemaElementProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//minOccurs:   [dispid 1455]
	TAutoVal minOccurs();

	//maxOccurs:   [dispid 1451]
	TAutoVal maxOccurs();

	//type:   [dispid 1476]
	void type(TISchemaTypeProxy& Obj);

	//scope:   [dispid 1469]
	void scope(TISchemaComplexTypeProxy& Obj);

	//defaultValue:   [dispid 1431]
	TAutoString defaultValue();

	//fixedValue:   [dispid 1438]
	TAutoString fixedValue();

	//isNillable:   [dispid 1443]
	TBool isNillable();

	//identityConstraints:   [dispid 1441]
	void identityConstraints(TISchemaItemCollectionProxy& Obj);

	//substitutionGroup:   [dispid 1471]
	void substitutionGroup(TISchemaElementProxy& Obj);

	//substitutionGroupExclusions:   [dispid 1472]
	SCHEMADERIVATIONMETHOD substitutionGroupExclusions();

	//disallowedSubstitutions:   [dispid 1433]
	SCHEMADERIVATIONMETHOD disallowedSubstitutions();

	//isAbstract:   [dispid 1442]
	TBool isAbstract();

	//isReference:   [dispid 1444]
	TBool isReference();
};

#endif
*/

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaParticle  {50EA08B5-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Particle [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaParticleProxy : public TAutoProxy
{
public:
	TISchemaParticleProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//minOccurs:   [dispid 1455]
	TAutoVal minOccurs();

	//maxOccurs:   [dispid 1451]
	TAutoVal maxOccurs();
};

#endif
*/

// _SOMITEMTYPE
// Schema Object Model Item Types
typedef enum tag_SOMITEMTYPE
{
	SOMITEM_SCHEMA = 4096, 
	SOMITEM_ATTRIBUTE = 4097, 
	SOMITEM_ATTRIBUTEGROUP = 4098, 
	SOMITEM_NOTATION = 4099, 
	SOMITEM_IDENTITYCONSTRAINT = 4352, 
	SOMITEM_KEY = 4353, 
	SOMITEM_KEYREF = 4354, 
	SOMITEM_UNIQUE = 4355, 
	SOMITEM_ANYTYPE = 8192, 
	SOMITEM_DATATYPE = 8448, 
	SOMITEM_DATATYPE_ANYTYPE = 8449, 
	SOMITEM_DATATYPE_ANYURI = 8450, 
	SOMITEM_DATATYPE_BASE64BINARY = 8451, 
	SOMITEM_DATATYPE_BOOLEAN = 8452, 
	SOMITEM_DATATYPE_BYTE = 8453, 
	SOMITEM_DATATYPE_DATE = 8454, 
	SOMITEM_DATATYPE_DATETIME = 8455, 
	SOMITEM_DATATYPE_DAY = 8456, 
	SOMITEM_DATATYPE_DECIMAL = 8457, 
	SOMITEM_DATATYPE_DOUBLE = 8458, 
	SOMITEM_DATATYPE_DURATION = 8459, 
	SOMITEM_DATATYPE_ENTITIES = 8460, 
	SOMITEM_DATATYPE_ENTITY = 8461, 
	SOMITEM_DATATYPE_FLOAT = 8462, 
	SOMITEM_DATATYPE_HEXBINARY = 8463, 
	SOMITEM_DATATYPE_ID = 8464, 
	SOMITEM_DATATYPE_IDREF = 8465, 
	SOMITEM_DATATYPE_IDREFS = 8466, 
	SOMITEM_DATATYPE_INT = 8467, 
	SOMITEM_DATATYPE_INTEGER = 8468, 
	SOMITEM_DATATYPE_LANGUAGE = 8469, 
	SOMITEM_DATATYPE_LONG = 8470, 
	SOMITEM_DATATYPE_MONTH = 8471, 
	SOMITEM_DATATYPE_MONTHDAY = 8472, 
	SOMITEM_DATATYPE_NAME = 8473, 
	SOMITEM_DATATYPE_NCNAME = 8474, 
	SOMITEM_DATATYPE_NEGATIVEINTEGER = 8475, 
	SOMITEM_DATATYPE_NMTOKEN = 8476, 
	SOMITEM_DATATYPE_NMTOKENS = 8477, 
	SOMITEM_DATATYPE_NONNEGATIVEINTEGER = 8478, 
	SOMITEM_DATATYPE_NONPOSITIVEINTEGER = 8479, 
	SOMITEM_DATATYPE_NORMALIZEDSTRING = 8480, 
	SOMITEM_DATATYPE_NOTATION = 8481, 
	SOMITEM_DATATYPE_POSITIVEINTEGER = 8482, 
	SOMITEM_DATATYPE_QNAME = 8483, 
	SOMITEM_DATATYPE_SHORT = 8484, 
	SOMITEM_DATATYPE_STRING = 8485, 
	SOMITEM_DATATYPE_TIME = 8486, 
	SOMITEM_DATATYPE_TOKEN = 8487, 
	SOMITEM_DATATYPE_UNSIGNEDBYTE = 8488, 
	SOMITEM_DATATYPE_UNSIGNEDINT = 8489, 
	SOMITEM_DATATYPE_UNSIGNEDLONG = 8490, 
	SOMITEM_DATATYPE_UNSIGNEDSHORT = 8491, 
	SOMITEM_DATATYPE_YEAR = 8492, 
	SOMITEM_DATATYPE_YEARMONTH = 8493, 
	SOMITEM_DATATYPE_ANYSIMPLETYPE = 8703, 
	SOMITEM_SIMPLETYPE = 8704, 
	SOMITEM_COMPLEXTYPE = 9216, 
	SOMITEM_PARTICLE = 16384, 
	SOMITEM_ANY = 16385, 
	SOMITEM_ANYATTRIBUTE = 16386, 
	SOMITEM_ELEMENT = 16387, 
	SOMITEM_GROUP = 16640, 
	SOMITEM_ALL = 16641, 
	SOMITEM_CHOICE = 16642, 
	SOMITEM_SEQUENCE = 16643, 
	SOMITEM_EMPTYPARTICLE = 16644, 
	SOMITEM_NULL = 2048, 
	SOMITEM_NULL_TYPE = 10240, 
	SOMITEM_NULL_ANY = 18433, 
	SOMITEM_NULL_ANYATTRIBUTE = 18434, 
	SOMITEM_NULL_ELEMENT = 18435, 
} _SOMITEMTYPE;

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaType
// XML Schema Type
// {50EA08B8-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaType

DECLARE_INTERFACE_(ISchemaType, ISchemaItem)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
#endif
	//ISchemaType methods:
	STDMETHOD_(HRESULT, Get_baseTypes) (THIS_ ISchemaItemCollection** baseTypes) PURE; 
	STDMETHOD_(HRESULT, Get_final) (THIS_ SCHEMADERIVATIONMETHOD* final) PURE; 
	STDMETHOD_(HRESULT, Get_variety) (THIS_ SCHEMATYPEVARIETY* variety) PURE; 
	STDMETHOD_(HRESULT, Get_derivedBy) (THIS_ SCHEMADERIVATIONMETHOD* derivedBy) PURE; 
	STDMETHOD_(HRESULT, isValid) (THIS_ BSTR data, VARIANT_BOOL* valid) PURE; 
	STDMETHOD_(HRESULT, Get_minExclusive) (THIS_ BSTR* minExclusive) PURE; 
	STDMETHOD_(HRESULT, Get_minInclusive) (THIS_ BSTR* minInclusive) PURE; 
	STDMETHOD_(HRESULT, Get_maxExclusive) (THIS_ BSTR* maxExclusive) PURE; 
	STDMETHOD_(HRESULT, Get_maxInclusive) (THIS_ BSTR* maxInclusive) PURE; 
	STDMETHOD_(HRESULT, Get_totalDigits) (THIS_ VARIANT* totalDigits) PURE; 
	STDMETHOD_(HRESULT, Get_fractionDigits) (THIS_ VARIANT* fractionDigits) PURE; 
	STDMETHOD_(HRESULT, Get_length) (THIS_ VARIANT* length) PURE; 
	STDMETHOD_(HRESULT, Get_minLength) (THIS_ VARIANT* minLength) PURE; 
	STDMETHOD_(HRESULT, Get_maxLength) (THIS_ VARIANT* maxLength) PURE; 
	STDMETHOD_(HRESULT, Get_enumeration) (THIS_ ISchemaStringCollection** enumeration) PURE; 
	STDMETHOD_(HRESULT, Get_whitespace) (THIS_ SCHEMAWHITESPACE* whitespace) PURE; 
	STDMETHOD_(HRESULT, Get_patterns) (THIS_ ISchemaStringCollection** patterns) PURE; 
};

typedef ISchemaType* LPSCHEMATYPE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaType  {50EA08B8-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Type [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaTypeProxy : public TAutoProxy
{
public:
	TISchemaTypeProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//baseTypes:   [dispid 1428]
	void baseTypes(TISchemaItemCollectionProxy& Obj);

	//final:   [dispid 1437]
	SCHEMADERIVATIONMETHOD final();

	//variety:   [dispid 1480]
	SCHEMATYPEVARIETY variety();

	//derivedBy:   [dispid 1432]
	SCHEMADERIVATIONMETHOD derivedBy();

	//isValid:   [dispid 1445]
	TBool isValid(TAutoString data);

	//minExclusive:   [dispid 1452]
	TAutoString minExclusive();

	//minInclusive:   [dispid 1453]
	TAutoString minInclusive();

	//maxExclusive:   [dispid 1448]
	TAutoString maxExclusive();

	//maxInclusive:   [dispid 1449]
	TAutoString maxInclusive();

	//totalDigits:   [dispid 1475]
	TAutoVal totalDigits();

	//fractionDigits:   [dispid 1439]
	TAutoVal fractionDigits();

	//length:   [dispid 1447]
	TAutoVal length();

	//minLength:   [dispid 1454]
	TAutoVal minLength();

	//maxLength:   [dispid 1450]
	TAutoVal maxLength();

	//enumeration:   [dispid 1435]
	void enumeration(TISchemaStringCollectionProxy& Obj);

	//whitespace:   [dispid 1482]
	SCHEMAWHITESPACE whitespace();

	//patterns:   [dispid 1462]
	void patterns(TISchemaStringCollectionProxy& Obj);
};

#endif
*/

// _SCHEMADERIVATIONMETHOD
// Schema Object Model Filters
typedef enum tag_SCHEMADERIVATIONMETHOD
{
	SCHEMADERIVATIONMETHOD_EMPTY = 0, 
	SCHEMADERIVATIONMETHOD_SUBSTITUTION = 1, 
	SCHEMADERIVATIONMETHOD_EXTENSION = 2, 
	SCHEMADERIVATIONMETHOD_RESTRICTION = 4, 
	SCHEMADERIVATIONMETHOD_LIST = 8, 
	SCHEMADERIVATIONMETHOD_UNION = 16, 
	SCHEMADERIVATIONMETHOD_ALL = 255, 
	SCHEMADERIVATIONMETHOD_NONE = 256, 
} _SCHEMADERIVATIONMETHOD;

// _SCHEMATYPEVARIETY
// Schema Object Model Type variety values
typedef enum tag_SCHEMATYPEVARIETY
{
	SCHEMATYPEVARIETY_NONE = -1, 
	SCHEMATYPEVARIETY_ATOMIC = 0, 
	SCHEMATYPEVARIETY_LIST = 1, 
	SCHEMATYPEVARIETY_UNION = 2, 
} _SCHEMATYPEVARIETY;

// _SCHEMAWHITESPACE
// Schema Object Model Whitespace facet values
typedef enum tag_SCHEMAWHITESPACE
{
	SCHEMAWHITESPACE_NONE = -1, 
	SCHEMAWHITESPACE_PRESERVE = 0, 
	SCHEMAWHITESPACE_REPLACE = 1, 
	SCHEMAWHITESPACE_COLLAPSE = 2, 
} _SCHEMAWHITESPACE;

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaComplexType
// XML Schema Complex Type
// {50EA08B9-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaComplexType

DECLARE_INTERFACE_(ISchemaComplexType, ISchemaType)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
	//ISchemaType methods:
	STDMETHOD_(HRESULT, Get_baseTypes) (THIS_ ISchemaItemCollection** baseTypes) PURE; 
	STDMETHOD_(HRESULT, Get_final) (THIS_ SCHEMADERIVATIONMETHOD* final) PURE; 
	STDMETHOD_(HRESULT, Get_variety) (THIS_ SCHEMATYPEVARIETY* variety) PURE; 
	STDMETHOD_(HRESULT, Get_derivedBy) (THIS_ SCHEMADERIVATIONMETHOD* derivedBy) PURE; 
	STDMETHOD_(HRESULT, isValid) (THIS_ BSTR data, VARIANT_BOOL* valid) PURE; 
	STDMETHOD_(HRESULT, Get_minExclusive) (THIS_ BSTR* minExclusive) PURE; 
	STDMETHOD_(HRESULT, Get_minInclusive) (THIS_ BSTR* minInclusive) PURE; 
	STDMETHOD_(HRESULT, Get_maxExclusive) (THIS_ BSTR* maxExclusive) PURE; 
	STDMETHOD_(HRESULT, Get_maxInclusive) (THIS_ BSTR* maxInclusive) PURE; 
	STDMETHOD_(HRESULT, Get_totalDigits) (THIS_ VARIANT* totalDigits) PURE; 
	STDMETHOD_(HRESULT, Get_fractionDigits) (THIS_ VARIANT* fractionDigits) PURE; 
	STDMETHOD_(HRESULT, Get_length) (THIS_ VARIANT* length) PURE; 
	STDMETHOD_(HRESULT, Get_minLength) (THIS_ VARIANT* minLength) PURE; 
	STDMETHOD_(HRESULT, Get_maxLength) (THIS_ VARIANT* maxLength) PURE; 
	STDMETHOD_(HRESULT, Get_enumeration) (THIS_ ISchemaStringCollection** enumeration) PURE; 
	STDMETHOD_(HRESULT, Get_whitespace) (THIS_ SCHEMAWHITESPACE* whitespace) PURE; 
	STDMETHOD_(HRESULT, Get_patterns) (THIS_ ISchemaStringCollection** patterns) PURE; 
#endif
	//ISchemaComplexType methods:
	STDMETHOD_(HRESULT, Get_isAbstract) (THIS_ VARIANT_BOOL* abstract) PURE; 
	STDMETHOD_(HRESULT, Get_anyAttribute) (THIS_ ISchemaAny** anyAttribute) PURE; 
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ ISchemaItemCollection** attributes) PURE; 
	STDMETHOD_(HRESULT, Get_contentType) (THIS_ SCHEMACONTENTTYPE* contentType) PURE; 
	STDMETHOD_(HRESULT, Get_contentModel) (THIS_ ISchemaModelGroup** contentModel) PURE; 
	STDMETHOD_(HRESULT, Get_prohibitedSubstitutions) (THIS_ SCHEMADERIVATIONMETHOD* prohibited) PURE; 
};

typedef ISchemaComplexType* LPSCHEMACOMPLEXTYPE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaComplexType  {50EA08B9-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Complex Type [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaComplexTypeProxy : public TAutoProxy
{
public:
	TISchemaComplexTypeProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//baseTypes:   [dispid 1428]
	void baseTypes(TISchemaItemCollectionProxy& Obj);

	//final:   [dispid 1437]
	SCHEMADERIVATIONMETHOD final();

	//variety:   [dispid 1480]
	SCHEMATYPEVARIETY variety();

	//derivedBy:   [dispid 1432]
	SCHEMADERIVATIONMETHOD derivedBy();

	//isValid:   [dispid 1445]
	TBool isValid(TAutoString data);

	//minExclusive:   [dispid 1452]
	TAutoString minExclusive();

	//minInclusive:   [dispid 1453]
	TAutoString minInclusive();

	//maxExclusive:   [dispid 1448]
	TAutoString maxExclusive();

	//maxInclusive:   [dispid 1449]
	TAutoString maxInclusive();

	//totalDigits:   [dispid 1475]
	TAutoVal totalDigits();

	//fractionDigits:   [dispid 1439]
	TAutoVal fractionDigits();

	//length:   [dispid 1447]
	TAutoVal length();

	//minLength:   [dispid 1454]
	TAutoVal minLength();

	//maxLength:   [dispid 1450]
	TAutoVal maxLength();

	//enumeration:   [dispid 1435]
	void enumeration(TISchemaStringCollectionProxy& Obj);

	//whitespace:   [dispid 1482]
	SCHEMAWHITESPACE whitespace();

	//patterns:   [dispid 1462]
	void patterns(TISchemaStringCollectionProxy& Obj);

	//isAbstract:   [dispid 1442]
	TBool isAbstract();

	//anyAttribute:   [dispid 1425]
	void anyAttribute(TISchemaAnyProxy& Obj);

	//attributes:   [dispid 1427]
	void attributes(TISchemaItemCollectionProxy& Obj);

	//contentType:   [dispid 1430]
	SCHEMACONTENTTYPE contentType();

	//contentModel:   [dispid 1429]
	void contentModel(TISchemaModelGroupProxy& Obj);

	//prohibitedSubstitutions:   [dispid 1464]
	SCHEMADERIVATIONMETHOD prohibitedSubstitutions();
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaAny
// XML Schema Any
// {50EA08BC-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaAny

DECLARE_INTERFACE_(ISchemaAny, ISchemaParticle)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
	//ISchemaParticle methods:
	STDMETHOD_(HRESULT, Get_minOccurs) (THIS_ VARIANT* minOccurs) PURE; 
	STDMETHOD_(HRESULT, Get_maxOccurs) (THIS_ VARIANT* maxOccurs) PURE; 
#endif
	//ISchemaAny methods:
	STDMETHOD_(HRESULT, Get_namespaces) (THIS_ ISchemaStringCollection** namespaces) PURE; 
	STDMETHOD_(HRESULT, Get_processContents) (THIS_ SCHEMAPROCESSCONTENTS* processContents) PURE; 
};

typedef ISchemaAny* LPSCHEMAANY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaAny  {50EA08BC-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Any [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaAnyProxy : public TAutoProxy
{
public:
	TISchemaAnyProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//minOccurs:   [dispid 1455]
	TAutoVal minOccurs();

	//maxOccurs:   [dispid 1451]
	TAutoVal maxOccurs();

	//namespaces:   [dispid 1458]
	void namespaces(TISchemaStringCollectionProxy& Obj);

	//processContents:   [dispid 1463]
	SCHEMAPROCESSCONTENTS processContents();
};

#endif
*/

// _SCHEMAPROCESSCONTENTS
// Schema Object Model Process Contents
typedef enum tag_SCHEMAPROCESSCONTENTS
{
	SCHEMAPROCESSCONTENTS_NONE = 0, 
	SCHEMAPROCESSCONTENTS_SKIP = 1, 
	SCHEMAPROCESSCONTENTS_LAX = 2, 
	SCHEMAPROCESSCONTENTS_STRICT = 3, 
} _SCHEMAPROCESSCONTENTS;

// _SCHEMACONTENTTYPE
// Schema Object Model Content Types
typedef enum tag_SCHEMACONTENTTYPE
{
	SCHEMACONTENTTYPE_EMPTY = 0, 
	SCHEMACONTENTTYPE_TEXTONLY = 1, 
	SCHEMACONTENTTYPE_ELEMENTONLY = 2, 
	SCHEMACONTENTTYPE_MIXED = 3, 
} _SCHEMACONTENTTYPE;

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaModelGroup
// XML Schema Type
// {50EA08BB-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaModelGroup

DECLARE_INTERFACE_(ISchemaModelGroup, ISchemaParticle)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
	//ISchemaParticle methods:
	STDMETHOD_(HRESULT, Get_minOccurs) (THIS_ VARIANT* minOccurs) PURE; 
	STDMETHOD_(HRESULT, Get_maxOccurs) (THIS_ VARIANT* maxOccurs) PURE; 
#endif
	//ISchemaModelGroup methods:
	STDMETHOD_(HRESULT, Get_particles) (THIS_ ISchemaItemCollection** particles) PURE; 
};

typedef ISchemaModelGroup* LPSCHEMAMODELGROUP;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaModelGroup  {50EA08BB-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Type [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaModelGroupProxy : public TAutoProxy
{
public:
	TISchemaModelGroupProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//minOccurs:   [dispid 1455]
	TAutoVal minOccurs();

	//maxOccurs:   [dispid 1451]
	TAutoVal maxOccurs();

	//particles:   [dispid 1461]
	void particles(TISchemaItemCollectionProxy& Obj);
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaAttribute
// XML Schema Attribute
// {50EA08B6-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaAttribute

DECLARE_INTERFACE_(ISchemaAttribute, ISchemaItem)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
#endif
	//ISchemaAttribute methods:
	STDMETHOD_(HRESULT, Get_type) (THIS_ ISchemaType** type) PURE; 
	STDMETHOD_(HRESULT, Get_scope) (THIS_ ISchemaComplexType** scope) PURE; 
	STDMETHOD_(HRESULT, Get_defaultValue) (THIS_ BSTR* defaultValue) PURE; 
	STDMETHOD_(HRESULT, Get_fixedValue) (THIS_ BSTR* fixedValue) PURE; 
	STDMETHOD_(HRESULT, Get_use) (THIS_ SCHEMAUSE* use) PURE; 
	STDMETHOD_(HRESULT, Get_isReference) (THIS_ VARIANT_BOOL* reference) PURE; 
};

typedef ISchemaAttribute* LPSCHEMAATTRIBUTE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaAttribute  {50EA08B6-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Attribute [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaAttributeProxy : public TAutoProxy
{
public:
	TISchemaAttributeProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//type:   [dispid 1476]
	void type(TISchemaTypeProxy& Obj);

	//scope:   [dispid 1469]
	void scope(TISchemaComplexTypeProxy& Obj);

	//defaultValue:   [dispid 1431]
	TAutoString defaultValue();

	//fixedValue:   [dispid 1438]
	TAutoString fixedValue();

	//use:   [dispid 1479]
	SCHEMAUSE use();

	//isReference:   [dispid 1444]
	TBool isReference();
};

#endif
*/

// _SCHEMAUSE
// Schema Object Model Attribute Uses
typedef enum tag_SCHEMAUSE
{
	SCHEMAUSE_OPTIONAL = 0, 
	SCHEMAUSE_PROHIBITED = 1, 
	SCHEMAUSE_REQUIRED = 2, 
} _SCHEMAUSE;

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaAttributeGroup
// XML Schema Attribute Group
// {50EA08BA-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaAttributeGroup

DECLARE_INTERFACE_(ISchemaAttributeGroup, ISchemaItem)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
#endif
	//ISchemaAttributeGroup methods:
	STDMETHOD_(HRESULT, Get_anyAttribute) (THIS_ ISchemaAny** anyAttribute) PURE; 
	STDMETHOD_(HRESULT, Get_attributes) (THIS_ ISchemaItemCollection** attributes) PURE; 
};

typedef ISchemaAttributeGroup* LPSCHEMAATTRIBUTEGROUP;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaAttributeGroup  {50EA08BA-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Attribute Group [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaAttributeGroupProxy : public TAutoProxy
{
public:
	TISchemaAttributeGroupProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//anyAttribute:   [dispid 1425]
	void anyAttribute(TISchemaAnyProxy& Obj);

	//attributes:   [dispid 1427]
	void attributes(TISchemaItemCollectionProxy& Obj);
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaIdentityConstraint
// XML Schema Any
// {50EA08BD-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaIdentityConstraint

DECLARE_INTERFACE_(ISchemaIdentityConstraint, ISchemaItem)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
#endif
	//ISchemaIdentityConstraint methods:
	STDMETHOD_(HRESULT, Get_selector) (THIS_ BSTR* selector) PURE; 
	STDMETHOD_(HRESULT, Get_fields) (THIS_ ISchemaStringCollection** fields) PURE; 
	STDMETHOD_(HRESULT, Get_referencedKey) (THIS_ ISchemaIdentityConstraint** key) PURE; 
};

typedef ISchemaIdentityConstraint* LPSCHEMAIDENTITYCONSTRAINT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaIdentityConstraint  {50EA08BD-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Any [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaIdentityConstraintProxy : public TAutoProxy
{
public:
	TISchemaIdentityConstraintProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//selector:   [dispid 1470]
	TAutoString selector();

	//fields:   [dispid 1436]
	void fields(TISchemaStringCollectionProxy& Obj);

	//referencedKey:   [dispid 1466]
	void referencedKey(TISchemaIdentityConstraintProxy& Obj);
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ISchemaNotation
// XML Schema Notation
// {50EA08BE-DD1B-4664-9A50-C2F40F4BD79A}

#undef  INTERFACE
#define INTERFACE ISchemaNotation

DECLARE_INTERFACE_(ISchemaNotation, ISchemaItem)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//ISchemaItem methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* name) PURE; 
	STDMETHOD_(HRESULT, Get_namespaceURI) (THIS_ BSTR* namespaceURI) PURE; 
	STDMETHOD_(HRESULT, Get_schema) (THIS_ ISchema** schema) PURE; 
	STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* id) PURE; 
	STDMETHOD_(HRESULT, Get_itemType) (THIS_ SOMITEMTYPE* itemType) PURE; 
	STDMETHOD_(HRESULT, Get_unhandledAttributes) (THIS_ IVBSAXAttributes** attributes) PURE; 
	STDMETHOD_(HRESULT, writeAnnotation) (THIS_ IUnknown* annotationSink, VARIANT_BOOL* isWritten) PURE; 
#endif
	//ISchemaNotation methods:
	STDMETHOD_(HRESULT, Get_systemIdentifier) (THIS_ BSTR* uri) PURE; 
	STDMETHOD_(HRESULT, Get_publicIdentifier) (THIS_ BSTR* uri) PURE; 
};

typedef ISchemaNotation* LPSCHEMANOTATION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// ISchemaNotation  {50EA08BE-DD1B-4664-9A50-C2F40F4BD79A}
// XML Schema Notation [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TISchemaNotationProxy : public TAutoProxy
{
public:
	TISchemaNotationProxy() : TAutoProxy(0x0) {}

	//name:   [dispid 1457]
	TAutoString name();

	//namespaceURI:   [dispid 1459]
	TAutoString namespaceURI();

	//schema:   [dispid 1467]
	void schema(TISchemaProxy& Obj);

	//id:   [dispid 1440]
	TAutoString id();

	//itemType:   [dispid 1446]
	SOMITEMTYPE itemType();

	//unhandledAttributes:   [dispid 1478]
	void unhandledAttributes(TIVBSAXAttributesProxy& Obj);

	//writeAnnotation:   [dispid 1483]
	TBool writeAnnotation(IUnknown* annotationSink);

	//systemIdentifier:   [dispid 1473]
	TAutoString systemIdentifier();

	//publicIdentifier:   [dispid 1465]
	TAutoString publicIdentifier();
};

#endif
*/

/*

#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLDocument
// IXMLDocument loads and saves XML document. This is obsolete. You should use IDOMDocument or IXMLDOMDocument.
// {F52E2B61-18A1-11D1-B105-00805F49916B}

#undef  INTERFACE
#define INTERFACE IXMLDocument

DECLARE_INTERFACE_(IXMLDocument, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLDocument methods:
	STDMETHOD_(HRESULT, Get_root) (THIS_ IXMLElement** p) PURE; // get root IXMLElement of the XML document.
	STDMETHOD_(HRESULT, Get_fileSize) (THIS_ BSTR* p) PURE;
	STDMETHOD_(HRESULT, Get_fileModifiedDate) (THIS_ BSTR* p) PURE;
	STDMETHOD_(HRESULT, Get_fileUpdatedDate) (THIS_ BSTR* p) PURE;
	STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* p) PURE; // set URL to load an XML document from the URL.
	STDMETHOD_(HRESULT, Set_url) (THIS_ BSTR p) PURE; // set URL to load an XML document from the URL.
	STDMETHOD_(HRESULT, Get_mimeType) (THIS_ BSTR* p) PURE;
	STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* pl) PURE; // get ready state.
	STDMETHOD_(HRESULT, Get_charset) (THIS_ BSTR* p) PURE; // get encoding.
	STDMETHOD_(HRESULT, Set_charset) (THIS_ BSTR p) PURE; // get encoding.
	STDMETHOD_(HRESULT, Get_version) (THIS_ BSTR* p) PURE; // get XML version number.
	STDMETHOD_(HRESULT, Get_doctype) (THIS_ BSTR* p) PURE; // get document type.
	STDMETHOD_(HRESULT, Get_dtdURL) (THIS_ BSTR* p) PURE;
	STDMETHOD_(HRESULT, createElement) (THIS_ VARIANT vType, VARIANT var1, IXMLElement** ppElem) PURE; // create different types of IXMLElements.
};

typedef IXMLDocument* LPXMLDOCUMENT;

#ifdef __cplusplus
}
#endif  // __cplusplus

*/

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IXMLDocument  {F52E2B61-18A1-11D1-B105-00805F49916B}
// IXMLDocument loads and saves XML document. This is obsolete. You should use IDOMDocument or IXMLDOMDocument. [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDocumentProxy : public TAutoProxy
{
public:
	TIXMLDocumentProxy() : TAutoProxy(0x0) {}

	//root: get root IXMLElement of the XML document.  [dispid 65637]
	void root(TIXMLElementProxy& Obj);

	//url: set URL to load an XML document from the URL.  [dispid 65641]
	TAutoString url();

	//url: set URL to load an XML document from the URL.  [dispid 65641]
	void url(TAutoString arg0);

	//readyState: get ready state.  [dispid 65643]
	long readyState();

	//charset: get encoding.  [dispid 65645]
	TAutoString charset();

	//charset: get encoding.  [dispid 65645]
	void charset(TAutoString arg0);

	//version: get XML version number.  [dispid 65646]
	TAutoString version();

	//doctype: get document type.  [dispid 65647]
	TAutoString doctype();

	//createElement: create different types of IXMLElements.  [dispid 65644]
	void createElement(TIXMLElementProxy& Obj, TAutoVal vType, TAutoVal var1 = TNoArg());
};

#endif
*/

/* Commented because it conflicts with msxml.h

#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLElement
// IXMLElement represents an element in the XML document tree.
// {3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}

#undef  INTERFACE
#define INTERFACE IXMLElement

DECLARE_INTERFACE_(IXMLElement, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
	//IXMLElement methods:
	STDMETHOD_(HRESULT, Get_tagName) (THIS_ BSTR* p) PURE; // get tag name.
	STDMETHOD_(HRESULT, Set_tagName) (THIS_ BSTR p) PURE; // get tag name.
	STDMETHOD_(HRESULT, Get_parent) (THIS_ IXMLElement** ppParent) PURE; // get parent IXMLElement.
	STDMETHOD_(HRESULT, setAttribute) (THIS_ BSTR strPropertyName, VARIANT PropertyValue) PURE; // set attribute.
	STDMETHOD_(HRESULT, getAttribute) (THIS_ BSTR strPropertyName, VARIANT* PropertyValue) PURE; // get attribute.
	STDMETHOD_(HRESULT, removeAttribute) (THIS_ BSTR strPropertyName) PURE; // remove attribute.
	STDMETHOD_(HRESULT, Get_children) (THIS_ IXMLElementCollection** pp) PURE; // get a IXMLElementCollection of children.
	STDMETHOD_(HRESULT, Get_type) (THIS_ long* plType) PURE; // get type of this IXMLElement.
	STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* p) PURE; // get text.
	STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR p) PURE; // get text.
	STDMETHOD_(HRESULT, addChild) (THIS_ IXMLElement* pChildElem, long lIndex, long lReserved) PURE; // add a child.
	STDMETHOD_(HRESULT, removeChild) (THIS_ IXMLElement* pChildElem) PURE; // remove a child.
};

typedef IXMLElement* LPXMLELEMENT;

#ifdef __cplusplus
}
#endif  // __cplusplus

*/

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IXMLElement  {3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}
// IXMLElement represents an element in the XML document tree. [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLElementProxy : public TAutoProxy
{
public:
	TIXMLElementProxy() : TAutoProxy(0x0) {}

	//tagName: get tag name.  [dispid 65737]
	TAutoString tagName();

	//tagName: get tag name.  [dispid 65737]
	void tagName(TAutoString arg0);

	//parent: get parent IXMLElement.  [dispid 65738]
	void parent(TIXMLElementProxy& Obj);

	//setAttribute: set attribute.  [dispid 65739]
	void setAttribute(TAutoString strPropertyName, TAutoVal PropertyValue);

	//getAttribute: get attribute.  [dispid 65740]
	TAutoVal getAttribute(TAutoString strPropertyName);

	//removeAttribute: remove attribute.  [dispid 65741]
	void removeAttribute(TAutoString strPropertyName);

	//children: get a IXMLElementCollection of children.  [dispid 65742]
	void children(TIXMLElementCollectionProxy& Obj);

	//type: get type of this IXMLElement.  [dispid 65743]
	long type();

	//text: get text.  [dispid 65744]
	TAutoString text();

	//text: get text.  [dispid 65744]
	void text(TAutoString arg0);

	//addChild: add a child.  [dispid 65745]
	void addChild(IXMLElement* pChildElem, long lIndex, long lReserved);

	//removeChild: remove a child.  [dispid 65746]
	void removeChild(IXMLElement* pChildElem);
};

#endif
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLAttribute
// IXMLAttribute allows to get attributes of an IXMLElement.
// {D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}

#undef  INTERFACE
#define INTERFACE IXMLAttribute

DECLARE_INTERFACE_(IXMLAttribute, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IXMLAttribute methods:
	STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* n) PURE; // get attribute name.
	STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* v) PURE; // get attribute value.
};

typedef IXMLAttribute* LPXMLATTRIBUTE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IXMLAttribute  {D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}
// IXMLAttribute allows to get attributes of an IXMLElement. [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLAttributeProxy : public TAutoProxy
{
public:
	TIXMLAttributeProxy() : TAutoProxy(0x0) {}

	//name: get attribute name.  [dispid 65937]
	TAutoString name();

	//value: get attribute value.  [dispid 65938]
	TAutoString value();
};

#endif
*/


/*
#ifdef __cplusplus
extern "C" {            // Assume C declarations for C++
#endif  // __cplusplus

// IXMLError
// Gets error info.
// {948C5AD3-C58D-11D0-9C0B-00C04FC99C8E}

#undef  INTERFACE
#define INTERFACE IXMLError

DECLARE_INTERFACE_(IXMLError, IUnknown)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
#endif
	//IXMLError methods:
	STDMETHOD_(HRESULT, GetErrorInfo) (THIS_ _xml_error* pErrorReturn) PURE;
};

typedef IXMLError* LPXMLERROR;

#ifdef __cplusplus
}
#endif  // __cplusplus
*/

/*
// _xml_error
typedef struct tag_xml_error
{
	unsigned int _nLine;
	BSTR _pchBuf;
	unsigned int _cchBuf;
	unsigned int _ich;
	BSTR _pszFound;
	BSTR _pszExpected;
	unsigned long _reserved1;
	unsigned long _reserved2;
}_xml_error;
*/

/*
// tagXMLEMEM_TYPE
// Constants that define types for IXMLElement.
typedef enum tagtagXMLEMEM_TYPE
{
	XMLELEMTYPE_ELEMENT = 0,
	XMLELEMTYPE_TEXT = 1,
	XMLELEMTYPE_COMMENT = 2,
	XMLELEMTYPE_DOCUMENT = 3,
	XMLELEMTYPE_DTD = 4,
	XMLELEMTYPE_PI = 5,
	XMLELEMTYPE_OTHER = 6,
} tagXMLEMEM_TYPE;
*/

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IXMLDOMSelection
// {AA634FC7-5888-44A7-A257-3A47150D3A0E}

#undef  INTERFACE
#define INTERFACE IXMLDOMSelection

DECLARE_INTERFACE_(IXMLDOMSelection, IXMLDOMNodeList)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IXMLDOMNodeList methods:
	STDMETHOD_(HRESULT, Get_item) (THIS_ long index, IXMLDOMNode** listItem) PURE; // collection of nodes
	STDMETHOD_(HRESULT, Get_length) (THIS_ long* listLength) PURE; // number of nodes in the collection
	STDMETHOD_(HRESULT, nextNode) (THIS_ IXMLDOMNode** nextItem) PURE; // get next node from iterator
	STDMETHOD_(HRESULT, reset) (THIS ) PURE; // reset the position of iterator
	STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** ppUnk) PURE; 
#endif
	//IXMLDOMSelection methods:
	STDMETHOD_(HRESULT, Get_expr) (THIS_ BSTR* expression) PURE; // selection expression
	STDMETHOD_(HRESULT, Set_expr) (THIS_ BSTR expression) PURE; // selection expression
	STDMETHOD_(HRESULT, Get_context) (THIS_ IXMLDOMNode** ppNode) PURE; // nodes to apply selection expression to
	STDMETHOD_(HRESULT, SetRef_context) (THIS_ IXMLDOMNode* ppNode) PURE; // nodes to apply selection expression to
	STDMETHOD_(HRESULT, peekNode) (THIS_ IXMLDOMNode** ppNode) PURE; // gets the next node without advancing the list position
	STDMETHOD_(HRESULT, matches) (THIS_ IXMLDOMNode* pNode, IXMLDOMNode** ppNode) PURE; // checks to see if the node matches the pattern
	STDMETHOD_(HRESULT, removeNext) (THIS_ IXMLDOMNode** ppNode) PURE; // removes the next node
	STDMETHOD_(HRESULT, removeAll) (THIS ) PURE; // removes all the nodes that match the selection
	STDMETHOD_(HRESULT, clone) (THIS_ IXMLDOMSelection** ppNode) PURE; // clone this object with the same position and context
	STDMETHOD_(HRESULT, getProperty) (THIS_ BSTR name, VARIANT* value) PURE; // get the value of the named property
	STDMETHOD_(HRESULT, setProperty) (THIS_ BSTR name, VARIANT value) PURE; // set the value of the named property
};

typedef IXMLDOMSelection* LPXMLDOMSELECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IXMLDOMSelection  {AA634FC7-5888-44A7-A257-3A47150D3A0E}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FNONEXTENSIBLE TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIXMLDOMSelectionProxy : public TAutoProxy
{
public:
	TIXMLDOMSelectionProxy() : TAutoProxy(0x0) {}

	//item: collection of nodes  [dispid 0]
	void item(TIXMLDOMNodeProxy& Obj, long index);

	//length: number of nodes in the collection  [dispid 74]
	long length();

	//nextNode: get next node from iterator  [dispid 76]
	void nextNode(TIXMLDOMNodeProxy& Obj);

	//reset: reset the position of iterator  [dispid 77]
	void reset();

	//_newEnum:   [dispid -4]
	void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

	//expr: selection expression  [dispid 81]
	TAutoString expr();

	//expr: selection expression  [dispid 81]
	void expr(TAutoString arg0);

	//context: nodes to apply selection expression to  [dispid 82]
	void context(TIXMLDOMNodeProxy& Obj);

	//context: nodes to apply selection expression to  [dispid 82]
	void context(IXMLDOMNode* arg0);

	//peekNode: gets the next node without advancing the list position  [dispid 83]
	void peekNode(TIXMLDOMNodeProxy& Obj);

	//matches: checks to see if the node matches the pattern  [dispid 84]
	void matches(TIXMLDOMNodeProxy& Obj, IXMLDOMNode* pNode);

	//removeNext: removes the next node  [dispid 85]
	void removeNext(TIXMLDOMNodeProxy& Obj);

	//removeAll: removes all the nodes that match the selection  [dispid 86]
	void removeAll();

	//clone: clone this object with the same position and context  [dispid 87]
	void clone(TIXMLDOMSelectionProxy& Obj);

	//getProperty: get the value of the named property  [dispid 88]
	TAutoVal getProperty(TAutoString name);

	//setProperty: set the value of the named property  [dispid 89]
	void setProperty(TAutoString name, TAutoVal value);
};

#endif
*/

// _SERVERXMLHTTP_OPTION
// Options for ServerXMLHTTPRequest Option property
typedef enum tag_SERVERXMLHTTP_OPTION
{
	SXH_OPTION_URL = -1, 
	SXH_OPTION_URL_CODEPAGE = 0, 
	SXH_OPTION_ESCAPE_PERCENT_IN_URL = 1, 
	SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2, 
	SXH_OPTION_SELECT_CLIENT_SSL_CERT = 3, 
} _SERVERXMLHTTP_OPTION;

// _SXH_SERVER_CERT_OPTION
// Flags for SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS option
typedef enum tag_SXH_SERVER_CERT_OPTION
{
	SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 256, 
	SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 512, 
	SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 4096, 
	SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 8192, 
	SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056, 
} _SXH_SERVER_CERT_OPTION;

//The following type was found in the type library
//but is not referenced from the application object
//use at your own discretion!!

/*
#ifdef __cplusplus
// IServerXMLHTTPRequest  {2E9196BF-13BA-4DD4-91CA-6C571F281495}
// IServerXMLHTTPRequest Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIServerXMLHTTPRequestProxy : public TAutoProxy
{
public:
	TIServerXMLHTTPRequestProxy() : TAutoProxy(0x0) {}

	//open: Open HTTP connection  [dispid 1]
	void open(TAutoString bstrMethod, TAutoString bstrUrl, TAutoVal varAsync = TNoArg(), TAutoVal bstrUser = TNoArg(), TAutoVal bstrPassword = TNoArg());

	//setRequestHeader: Add HTTP request header  [dispid 2]
	void setRequestHeader(TAutoString bstrHeader, TAutoString bstrValue);

	//getResponseHeader: Get HTTP response header  [dispid 3]
	TAutoString getResponseHeader(TAutoString bstrHeader);

	//getAllResponseHeaders: Get all HTTP response headers  [dispid 4]
	TAutoString getAllResponseHeaders();

	//send: Send HTTP request  [dispid 5]
	void send(TAutoVal varBody = TNoArg());

	//abort: Abort HTTP request  [dispid 6]
	void abort();

	//status: Get HTTP status code  [dispid 7]
	long status();

	//statusText: Get HTTP status text  [dispid 8]
	TAutoString statusText();

	//responseXML: Get response body  [dispid 9]
	IDispatch* responseXML();

	//responseText: Get response body  [dispid 10]
	TAutoString responseText();

	//responseBody: Get response body  [dispid 11]
	TAutoVal responseBody();

	//responseStream: Get response body  [dispid 12]
	TAutoVal responseStream();

	//readyState: Get ready state  [dispid 13]
	long readyState();

	//onreadystatechange: Register a complete event handler  [dispid 14]
	void onreadystatechange(IDispatch* arg0);

	//setTimeouts: Specify timeout settings (in milliseconds)  [dispid 15]
	void setTimeouts(long resolveTimeout, long connectTimeout, long sendTimeout, long receiveTimeout);

	//waitForResponse: Wait for asynchronous send to complete, with optional timeout (in seconds)  [dispid 16]
	TBool waitForResponse(TAutoVal timeoutInSeconds = TNoArg());

	//getOption: Get an option value  [dispid 17]
	TAutoVal getOption(SERVERXMLHTTP_OPTION option);

	//setOption: Set an option value  [dispid 18]
	void setOption(SERVERXMLHTTP_OPTION option, TAutoVal value);
};

#endif
*/

// _SXH_PROXY_SETTING
// Settings for setProxy
typedef enum tag_SXH_PROXY_SETTING
{
	SXH_PROXY_SET_DEFAULT = 0, 
	SXH_PROXY_SET_PRECONFIG = 0, 
	SXH_PROXY_SET_DIRECT = 1, 
	SXH_PROXY_SET_PROXY = 2, 
} _SXH_PROXY_SETTING;

#include <poppack.h>

// XMLDOMDocumentEvents
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

/*

class _PWCLASS TXMLDOMDocumentEventsProxy :public TOleDialog
{
public:
	TXMLDOMDocumentEventsProxy(TWindow* parent, TResId resId, TModule* module = 0);
	~TXMLDOMDocumentEventsProxy();
	void SetupWindow();
protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//ondataavailable:   [dispid 198]
	HRESULT ondataavailable();
protected:
	TOcControl* Ocx;
	TIXMLDOMDocument2Proxy Control;
};
*/

// XMLDOMDocumentEvents
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

/*

class _PWCLASS TXMLDOMDocumentEventsProxy :public TOleDialog
{
public:
	TXMLDOMDocumentEventsProxy(TWindow* parent, TResId resId, TModule* module = 0);
	~TXMLDOMDocumentEventsProxy();
	void SetupWindow();
protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//ondataavailable:   [dispid 198]
	HRESULT ondataavailable();
protected:
	TOcControl* Ocx;
	TIXMLDOMDocument2Proxy Control;
};
*/

// XMLDOMDocumentEvents
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

/*

class _PWCLASS TXMLDOMDocumentEventsProxy :public TOleDialog
{
public:
	TXMLDOMDocumentEventsProxy(TWindow* parent, TResId resId, TModule* module = 0);
	~TXMLDOMDocumentEventsProxy();
	void SetupWindow();
protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//ondataavailable:   [dispid 198]
	HRESULT ondataavailable();
protected:
	TOcControl* Ocx;
	TIXMLDOMDocument2Proxy Control;
};
*/

// XMLDOMDocumentEvents
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

/*

class _PWCLASS TXMLDOMDocumentEventsProxy :public TOleDialog
{
public:
	TXMLDOMDocumentEventsProxy(TWindow* parent, TResId resId, TModule* module = 0);
	~TXMLDOMDocumentEventsProxy();
	void SetupWindow();
protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//ondataavailable:   [dispid 198]
	HRESULT ondataavailable();
protected:
	TOcControl* Ocx;
	TIXMLDOMDocument2Proxy Control;
};
*/

// XMLDOMDocumentEvents
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

/*

class _PWCLASS TXMLDOMDocumentEventsProxy :public TOleDialog
{
public:
	TXMLDOMDocumentEventsProxy(TWindow* parent, TResId resId, TModule* module = 0);
	~TXMLDOMDocumentEventsProxy();
	void SetupWindow();
protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//ondataavailable:   [dispid 198]
	HRESULT ondataavailable();
protected:
	TOcControl* Ocx;
	TIXMLDOMDocument2Proxy Control;
};
*/

// XMLDOMDocumentEvents
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

/*

class _PWCLASS TXMLDOMDocumentEventsProxy :public TOleDialog
{
public:
	TXMLDOMDocumentEventsProxy(TWindow* parent, TResId resId, TModule* module = 0);
	~TXMLDOMDocumentEventsProxy();
	void SetupWindow();
protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//ondataavailable:   [dispid 198]
	HRESULT ondataavailable();
protected:
	TOcControl* Ocx;
	TIXMLDOMDocument2Proxy Control;
};
*/

// XMLDOMDocumentEvents
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

/*

class _PWCLASS TXMLDOMDocumentEventsProxy :public TOleDialog
{
public:
	TXMLDOMDocumentEventsProxy(TWindow* parent, TResId resId, TModule* module = 0);
	~TXMLDOMDocumentEventsProxy();
	void SetupWindow();
protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//ondataavailable:   [dispid 198]
	HRESULT ondataavailable();
protected:
	TOcControl* Ocx;
	TIXMLDOMDocument2Proxy Control;
};
*/

// XMLDOMDocumentEvents
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

/*

class _PWCLASS TXMLDOMDocumentEventsProxy :public TOleDialog
{
public:
	TXMLDOMDocumentEventsProxy(TWindow* parent, TResId resId, TModule* module = 0);
	~TXMLDOMDocumentEventsProxy();
	void SetupWindow();
protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//ondataavailable:   [dispid 198]
	HRESULT ondataavailable();
protected:
	TOcControl* Ocx;
	TIXMLDOMDocument2Proxy Control;
};
*/

#endif
