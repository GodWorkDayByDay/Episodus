// -----------------------------------------------------------------------------
// InterfaceForKs.h
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// $Revision: 1.2 $
// $Author: pameline $
// $Date: 2009/07/23 16:52:41 $
// -----------------------------------------------------------------------------
// PA  - november 2005
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Copyright Odyssee, 2004
// http://www.nautilus-info.com
// -----------------------------------------------------------------------------
// Ce logiciel est un programme informatique servant à gérer et traiter les
// informations de santé d'une personne.
//
// Ce logiciel est régi par la licence CeCILL soumise au droit français et
// respectant les principes de diffusion des logiciels libres. Vous pouvez
// utiliser, modifier et/ou redistribuer ce programme sous les conditions de la
// licence CeCILL telle que diffusée par le CEA, le CNRS et l'INRIA sur le site
// "http://www.cecill.info".
//
// En contrepartie de l'accessibilité au code source et des droits de copie, de
// modification et de redistribution accordés par cette licence, il n'est offert
// aux utilisateurs qu'une garantie limitée. Pour les mêmes raisons, seule une
// responsabilité restreinte pèse sur l'auteur du programme, le titulaire des
// droits patrimoniaux et les concédants successifs.
//
// A cet égard  l'attention de l'utilisateur est attirée sur les risques
// associés au chargement, à l'utilisation, à la modification et/ou au
// développement et à la reproduction du logiciel par l'utilisateur étant donné
// sa spécificité de logiciel libre, qui peut le rendre complexe à manipuler et
// qui le réserve donc à des développeurs et des professionnels avertis
// possédant des connaissances informatiques approfondies. Les utilisateurs sont
// donc invités à charger et tester l'adéquation du logiciel à leurs besoins
// dans des conditions permettant d'assurer la sécurité de leurs systèmes et ou
// de leurs données et, plus généralement, à l'utiliser et l'exploiter dans les
// mêmes conditions de sécurité.
//
// Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris
// connaissance de la licence CeCILL, et que vous en avez accepté les termes.
// -----------------------------------------------------------------------------
// This software is a computer program whose purpose is to manage and process
// a person's health data.
//
// This software is governed by the CeCILL  license under French law and abiding
// by the rules of distribution of free software. You can use, modify and/ or
// redistribute the software under the terms of the CeCILL license as circulated
// by CEA, CNRS and INRIA at the following URL "http://www.cecill.info".
//
// As a counterpart to the access to the source code and  rights to copy, modify
// and redistribute granted by the license, users are provided only with a
// limited warranty and the software's author, the holder of the economic
// rights, and the successive licensors have only limited liability.
//
// In this respect, the user's attention is drawn to the risks associated with
// loading, using, modifying and/or developing or reproducing the software by
// the user in light of its specific status of free software, that may mean that
// it is complicated to manipulate, and that also therefore means that it is
// reserved for developers and experienced professionals having in-depth
// computer knowledge. Users are therefore encouraged to load and test the
// software's suitability as regards their requirements in conditions enabling
// the security of their systems and/or data to be ensured and, more generally,
// to use and operate it in the same conditions as regards security.
//
// The fact that you are presently reading this means that you have had
// knowledge of the CeCILL license and that you accept its terms.
// -----------------------------------------------------------------------------

#ifndef __INTERFACEFORKS_H__
# define __INTERFACEFORKS_H__

# ifndef _DANSBBKDLL
#  define _BBKEXPORT __import
# else
#  define _BBKEXPORT __export
# endif

//! \brief Object made for KS command from MMI

// -----------------------------------------------------------------------------
// OB1 InterfaceForKs <BR>
// Interface de contrôle d'un KS depuis l'interface
// -----------------------------------------------------------------------------
class _BBKEXPORT BB1BBInterfaceForKs
{
	protected:

  	string   _sArchetypeID ;  //!< Archetype ID \brief Archetype ID
  	string   _sKsName ;       //!< Nom du KS \brief Nom du KS
    long int _iToken ;
    bool     _bInitFromBbk ;  //!< Utiliser le blackboard pour initialiser le dialogue \brief Utiliser le blackboard pour initialiser le dialogue

    static long _lObjectCount ;

	public:

		//! \brief  constructor
  	BB1BBInterfaceForKs(long int iTokId, string sKS = "", string sArchID = "", bool bInit = false) ;

  	//! \brief  Destructor
  	~BB1BBInterfaceForKs() { _lObjectCount-- ; } ;

  	BB1BBInterfaceForKs(const BB1BBInterfaceForKs& rv) ;

		BB1BBInterfaceForKs& operator=(const BB1BBInterfaceForKs& src) ;
		int                  operator==(const BB1BBInterfaceForKs& o) ;

    string   getArchetypeID() { return _sArchetypeID ; }
    string   getKsName()      { return _sKsName ; }
    long int getTokenId()     { return _iToken ; }
    bool     getInitFromBbk() { return _bInitFromBbk ; }

    void   setArchetypeID(string sArID) { _sArchetypeID = sArID ; }
    void   setKsName(string sKS)        { _sKsName      = sKS ; }
    void   setTokenId(long int iTokID)  { _iToken       = iTokID ; }
    void   setInitFromBbk(bool bInit)   { _bInitFromBbk = bInit ; }

    static long getNbInstance()  { return _lObjectCount ; }
    static void initNbInstance() { _lObjectCount = 0 ; }
} ;

inline BB1BBInterfaceForKs::BB1BBInterfaceForKs(long int iTokId, string sKS, string sArchID, bool bInit)
{
	_iToken       = iTokId ;
	_sArchetypeID = sArchID ;
	_sKsName      = sKS ;
  _bInitFromBbk = bInit ;

  _lObjectCount++ ;
}

inline BB1BBInterfaceForKs::BB1BBInterfaceForKs(const BB1BBInterfaceForKs& rv)
{
	_iToken       = rv._iToken ;
	_sArchetypeID = rv._sArchetypeID ;
	_sKsName      = rv._sKsName ;
  _bInitFromBbk = rv._bInitFromBbk ;

  _lObjectCount++ ;
}

inline BB1BBInterfaceForKs&
BB1BBInterfaceForKs::operator=(const BB1BBInterfaceForKs& src)
{
	if (this == &src)
  	return *this ;

  _iToken       = src._iToken ;
	_sArchetypeID = src._sArchetypeID ;
	_sKsName      = src._sKsName ;
  _bInitFromBbk = src._bInitFromBbk ;

  return *this ;
}

inline int
BB1BBInterfaceForKs::operator==(const BB1BBInterfaceForKs& o)
{
	if ((_sArchetypeID == o._sArchetypeID) &&
      (_iToken       == o._iToken)       &&
      (_sKsName      == o._sKsName))
		return 1 ;

	return 0 ;
}

#endif // !__INTERFACEFORKS_H__

