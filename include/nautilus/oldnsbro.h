//---------------------------------------------------------------------------
//
//Version:            1.0
//Copyright:          
//Description:        internet controls
//Author:             Remi SPAAK
//Company:            NAUTILUS
//
//Header Type:        Abstract type descriptions.
//
//File:               net.h
//
//Type Library:       SHDocVw
//Type Description:   Microsoft Internet Controls
//
//GUID:               {EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B}
//System:             WIN32
//Version:            1.0
//
//Code generated by ProxyWiz 1.0
//ProxyWiz Copyright Dr John Maddock 1997, all rights reserved.
//
//---------------------------------------------------------------------------


#ifndef __cplusplus
#include <windows.h>
#include <olectl.h>
#else
#include <owl/pch.h>
#include <owl/oledialg.h>
#endif

#if !defined(__NSBROWSE_H)
#define __NSBROWSE_H

#ifdef __BORLANDC__
  #include <pshpack8.h>
#endif

#ifndef RC_INVOKED
#pragma pack(1)         /* Assume byte packing throughout */
#endif /* !RC_INVOKED */


#ifdef __cplusplus
#if !defined(__push_arg)
#define __push_arg

/*
template <class T>
inline void push_arg(TAutoVal& val, T arg)
{
	val = arg;
}
*/

inline void push_arg(TAutoVal& val, long arg)
{
	val = arg;
}

inline void push_arg(TAutoVal& val, TAutoString arg)
{
	val = arg;
}

inline void push_arg(TAutoVal& val, TAutoVal arg)
{
	val = arg;
}

inline void push_arg(TAutoVal& val, BSTR* arg)
{
	((VARIANT*)(&val))->vt = VT_BSTR | VT_BYREF;
	((VARIANT*)(&val))->pbstrVal = arg;
}

inline void push_arg(TAutoVal& val, void* arg)
{
	((VARIANT*)(&val))->vt = VT_BYREF;
	((VARIANT*)(&val))->byref = arg;
}

inline void push_arg(TAutoVal& val, IUnknown** arg)
{
	((VARIANT*)(&val))->vt = VT_UNKNOWN | VT_BYREF;
	((VARIANT*)(&val))->ppunkVal = arg;
}

inline void push_arg(TAutoVal& val, IDispatch** arg)
{
	((VARIANT*)(&val))->vt = VT_DISPATCH | VT_BYREF;
	((VARIANT*)(&val))->ppdispVal = arg;
}

inline void push_arg(TAutoVal& val, TAutoVal* arg)
{
	((VARIANT*)(&val))->vt = VT_VARIANT | VT_BYREF;
	((VARIANT*)(&val))->pvarVal = (VARIANT*)arg;
}

#endif
#endif

//------------------------------------------------------------
//Predeclaration of classes and interfaces

#ifdef __cplusplus

#else

#endif

//Coclass: WebBrowser WebBrowser Control
// {EAB22AC3-30C1-11CF-A7EB-0000C05BAE0B}
typedef IUnknown WebBrowser;

//Coclass: InternetExplorer Internet Explorer Application.
// {0002DF01-0000-0000-C000-000000000046}
typedef IUnknown InternetExplorer;

//------------------------------------------------------------
//Declaration of GUID's

DEFINE_GUID(IID_IWebBrowser, 0xeab22ac1, 0x30c1, 0x11cf, 0xa7, 0xeb, 0x0, 0x0, 0xc0, 0x5b, 0xae, 0xb);
DEFINE_GUID(IID_CoWebBrowser, 0xeab22ac3, 0x30c1, 0x11cf, 0xa7, 0xeb, 0x0, 0x0, 0xc0, 0x5b, 0xae, 0xb);
DEFINE_GUID(IID_IWebBrowserApp, 0x2df05, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID_CoInternetExplorer, 0x2df01, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);


#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWebBrowser
// Web Browser interface
// {EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B}

#undef  INTERFACE
#define INTERFACE IWebBrowser

DECLARE_INTERFACE_(IWebBrowser, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE;
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IWebBrowser methods:
	STDMETHOD_(HRESULT, GoBack) (THIS ) PURE; // Navigates to the previous item in the history list.
	STDMETHOD_(HRESULT, GoForward) (THIS ) PURE; // Navigates to the next item in the history list.
	STDMETHOD_(HRESULT, GoHome) (THIS ) PURE; // Go home/start page.
	STDMETHOD_(HRESULT, GoSearch) (THIS ) PURE; // Go Search Page.
	STDMETHOD_(HRESULT, Navigate) (THIS_ BSTR URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers) PURE; // Navigates to a URL or file.
	STDMETHOD_(HRESULT, Refresh) (THIS ) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Refresh2) (THIS_ VARIANT* Level) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Stop) (THIS ) PURE; // Stops opening a file.
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppDisp) PURE; // Returns the application automation object if accessible, this automation object otherwise..
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppDisp) PURE; // Returns the automation object of the container/parent if one exists or this automation object.
	STDMETHOD_(HRESULT, Get_Container) (THIS_ IDispatch** ppDisp) PURE; // Returns the container/parent automation object, if any.
	STDMETHOD_(HRESULT, Get_Document) (THIS_ IDispatch** ppDisp) PURE; // Returns the active Document automation object, if any.
	STDMETHOD_(HRESULT, Get_TopLevelContainer) (THIS_ VARIANT_BOOL* pBool) PURE; // Returns True if this is the top level object.
	STDMETHOD_(HRESULT, Get_Type) (THIS_ BSTR* pbstrType) PURE; // Returns the type of the contained document object.
	STDMETHOD_(HRESULT, Get_Left) (THIS_ long* pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Left) (THIS_ long pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Top) (THIS_ long* pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Top) (THIS_ long pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Width) (THIS_ long* pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Width) (THIS_ long pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_Height) (THIS_ long* pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Height) (THIS_ long pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_LocationName) (THIS_ BSTR* pbstrLocationName) PURE; // Gets the short (UI-friendly) name of the URL/file currently viewed.
	STDMETHOD_(HRESULT, Get_LocationURL) (THIS_ BSTR* pbstrLocationURL) PURE; // Gets the full URL/path currently viewed.
	STDMETHOD_(HRESULT, Get_Busy) (THIS_ VARIANT_BOOL* pBool) PURE; // Query to see if something is still in progress.
};

typedef IWebBrowser* LPWEBBROWSER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IWebBrowser  {EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B}
// Web Browser interface [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL ]
class TIWebBrowserProxy : public TAutoProxy
{
public:
	TIWebBrowserProxy() : TAutoProxy(0x409) {}

	//GoBack: Navigates to the previous item in the history list.  [dispid 100]
	void GoBack();

	//GoForward: Navigates to the next item in the history list.  [dispid 101]
	void GoForward();

	//GoHome: Go home/start page.  [dispid 102]
	void GoHome();

	//GoSearch: Go Search Page.  [dispid 103]
	void GoSearch();

	//Navigate: Navigates to a URL or file.  [dispid 104]
	void Navigate(TAutoString URL, TAutoVal* Flags, TAutoVal* TargetFrameName, TAutoVal* PostData, TAutoVal* Headers);

	//Refresh: Refresh the currently viewed page.  [dispid -550]
	void Refresh();

	//Refresh2: Refresh the currently viewed page.  [dispid 105]
	void Refresh2(TAutoVal* Level);

	//Stop: Stops opening a file.  [dispid 106]
	void Stop();

	//Application: Returns the application automation object if accessible, this automation object otherwise..  [dispid 200]
	IDispatch* Application();

	//Parent: Returns the automation object of the container/parent if one exists or this automation object.  [dispid 201]
	IDispatch* Parent();

	//Container: Returns the container/parent automation object, if any.  [dispid 202]
	IDispatch* Container();

	//Document: Returns the active Document automation object, if any.  [dispid 203]
	IDispatch* Document();

	//TopLevelContainer: Returns True if this is the top level object.  [dispid 204]
	TBool TopLevelContainer();

	//Type: Returns the type of the contained document object.  [dispid 205]
	TAutoString Type();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	long Left();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	void Left(long arg0);

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	long Top();

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	void Top(long arg0);

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	long Width();

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	void Width(long arg0);

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	long Height();

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	void Height(long arg0);

	//LocationName: Gets the short (UI-friendly) name of the URL/file currently viewed.  [dispid 210]
	TAutoString LocationName();

	//LocationURL: Gets the full URL/path currently viewed.  [dispid 211]
	TAutoString LocationURL();

	//Busy: Query to see if something is still in progress.  [dispid 212]
	TBool Busy();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWebBrowserApp
// Web Browser Application Interface.
// {0002DF05-0000-0000-C000-000000000046}

#undef  INTERFACE
#define INTERFACE IWebBrowserApp

DECLARE_INTERFACE_(IWebBrowserApp, IWebBrowser)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IWebBrowser methods:
	STDMETHOD_(HRESULT, GoBack) (THIS ) PURE; // Navigates to the previous item in the history list.
	STDMETHOD_(HRESULT, GoForward) (THIS ) PURE; // Navigates to the next item in the history list.
	STDMETHOD_(HRESULT, GoHome) (THIS ) PURE; // Go home/start page.
	STDMETHOD_(HRESULT, GoSearch) (THIS ) PURE; // Go Search Page.
	STDMETHOD_(HRESULT, Navigate) (THIS_ BSTR URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers) PURE; // Navigates to a URL or file.
	STDMETHOD_(HRESULT, Refresh) (THIS ) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Refresh2) (THIS_ VARIANT* Level) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Stop) (THIS ) PURE; // Stops opening a file.
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppDisp) PURE; // Returns the application automation object if accessible, this automation object otherwise..
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppDisp) PURE; // Returns the automation object of the container/parent if one exists or this automation object.
	STDMETHOD_(HRESULT, Get_Container) (THIS_ IDispatch** ppDisp) PURE; // Returns the container/parent automation object, if any.
	STDMETHOD_(HRESULT, Get_Document) (THIS_ IDispatch** ppDisp) PURE; // Returns the active Document automation object, if any.
	STDMETHOD_(HRESULT, Get_TopLevelContainer) (THIS_ VARIANT_BOOL* pBool) PURE; // Returns True if this is the top level object.
	STDMETHOD_(HRESULT, Get_Type) (THIS_ BSTR* pbstrType) PURE; // Returns the type of the contained document object.
	STDMETHOD_(HRESULT, Get_Left) (THIS_ long* pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Left) (THIS_ long pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Top) (THIS_ long* pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Top) (THIS_ long pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Width) (THIS_ long* pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Width) (THIS_ long pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_Height) (THIS_ long* pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Height) (THIS_ long pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_LocationName) (THIS_ BSTR* pbstrLocationName) PURE; // Gets the short (UI-friendly) name of the URL/file currently viewed.
	STDMETHOD_(HRESULT, Get_LocationURL) (THIS_ BSTR* pbstrLocationURL) PURE; // Gets the full URL/path currently viewed.
	STDMETHOD_(HRESULT, Get_Busy) (THIS_ VARIANT_BOOL* pBool) PURE; // Query to see if something is still in progress.
#endif
	//IWebBrowserApp methods:
	STDMETHOD_(HRESULT, Quit) (THIS ) PURE; // Exits application and closes the open document.
	STDMETHOD_(HRESULT, ClientToWindow) (THIS_ int* pcx, int* pcy) PURE; // Converts client sizes into window sizes.
	STDMETHOD_(HRESULT, PutProperty) (THIS_ BSTR szProperty, VARIANT vtValue) PURE; // Associates vtValue with the name szProperty in the context of the object.
	STDMETHOD_(HRESULT, GetProperty) (THIS_ BSTR szProperty, VARIANT* pvtValue) PURE; // Retrieve the Associated value for the property vtValue in the context of the object.
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* pbstrName) PURE; // Returns name of the application.
	STDMETHOD_(HRESULT, Get_HWND) (THIS_ long* pHWND) PURE; // Returns the HWND of the current IE window.
	STDMETHOD_(HRESULT, Get_FullName) (THIS_ BSTR* pbstrFullName) PURE; // Returns file specification of the application, including path.
	STDMETHOD_(HRESULT, Get_Path) (THIS_ BSTR* pbstrPath) PURE; // Returns the path to the application.
	STDMETHOD_(HRESULT, Get_Visible) (THIS_ VARIANT_BOOL* pBool) PURE; // Determines whether the application is visible or hidden.
	STDMETHOD_(HRESULT, Set_Visible) (THIS_ VARIANT_BOOL pBool) PURE; // Determines whether the application is visible or hidden.
	STDMETHOD_(HRESULT, Get_StatusBar) (THIS_ VARIANT_BOOL* pBool) PURE; // Turn on or off the statusbar.
	STDMETHOD_(HRESULT, Set_StatusBar) (THIS_ VARIANT_BOOL pBool) PURE; // Turn on or off the statusbar.
	STDMETHOD_(HRESULT, Get_StatusText) (THIS_ BSTR* pbstr) PURE; // Text of Status window.
	STDMETHOD_(HRESULT, Set_StatusText) (THIS_ BSTR pbstr) PURE; // Text of Status window.
	STDMETHOD_(HRESULT, Get_ToolBar) (THIS_ int* pValue) PURE; // Controls which toolbar is shown.
	STDMETHOD_(HRESULT, Set_ToolBar) (THIS_ int pValue) PURE; // Controls which toolbar is shown.
	STDMETHOD_(HRESULT, Get_MenuBar) (THIS_ VARIANT_BOOL* Value) PURE; // Controls whether menubar is shown.
	STDMETHOD_(HRESULT, Set_MenuBar) (THIS_ VARIANT_BOOL Value) PURE; // Controls whether menubar is shown.
	STDMETHOD_(HRESULT, Get_FullScreen) (THIS_ VARIANT_BOOL* pbFullScreen) PURE; // Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.
	STDMETHOD_(HRESULT, Set_FullScreen) (THIS_ VARIANT_BOOL pbFullScreen) PURE; // Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.
};

typedef IWebBrowserApp* LPWEBBROWSERAPP;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IWebBrowserApp  {0002DF05-0000-0000-C000-000000000046}
// Web Browser Application Interface. [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL ]
class TIWebBrowserAppProxy : public TAutoProxy
{
public:
	TIWebBrowserAppProxy() : TAutoProxy(0x409) {}

	//GoBack: Navigates to the previous item in the history list.  [dispid 100]
	void GoBack();

	//GoForward: Navigates to the next item in the history list.  [dispid 101]
	void GoForward();

	//GoHome: Go home/start page.  [dispid 102]
	void GoHome();

	//GoSearch: Go Search Page.  [dispid 103]
	void GoSearch();

	//Navigate: Navigates to a URL or file.  [dispid 104]
	void Navigate(TAutoString URL, TAutoVal* Flags, TAutoVal* TargetFrameName, TAutoVal* PostData, TAutoVal* Headers);

	//Refresh: Refresh the currently viewed page.  [dispid -550]
	void Refresh();

	//Refresh2: Refresh the currently viewed page.  [dispid 105]
	void Refresh2(TAutoVal* Level);

	//Stop: Stops opening a file.  [dispid 106]
	void Stop();

	//Application: Returns the application automation object if accessible, this automation object otherwise..  [dispid 200]
	IDispatch* Application();

	//Parent: Returns the automation object of the container/parent if one exists or this automation object.  [dispid 201]
	IDispatch* Parent();

	//Container: Returns the container/parent automation object, if any.  [dispid 202]
	IDispatch* Container();

	//Document: Returns the active Document automation object, if any.  [dispid 203]
	IDispatch* Document();

	//TopLevelContainer: Returns True if this is the top level object.  [dispid 204]
	TBool TopLevelContainer();

	//Type: Returns the type of the contained document object.  [dispid 205]
	TAutoString Type();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	long Left();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	void Left(long arg0);

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	long Top();

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	void Top(long arg0);

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	long Width();

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	void Width(long arg0);

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	long Height();

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	void Height(long arg0);

	//LocationName: Gets the short (UI-friendly) name of the URL/file currently viewed.  [dispid 210]
	TAutoString LocationName();

	//LocationURL: Gets the full URL/path currently viewed.  [dispid 211]
	TAutoString LocationURL();

	//Busy: Query to see if something is still in progress.  [dispid 212]
	TBool Busy();

	//Quit: Exits application and closes the open document.  [dispid 300]
	void Quit();

	//ClientToWindow: Converts client sizes into window sizes.  [dispid 301]
	void ClientToWindow(int* pcx, int* pcy);

	//PutProperty: Associates vtValue with the name szProperty in the context of the object.  [dispid 302]
	void PutProperty(TAutoString szProperty, TAutoVal vtValue);

	//GetProperty: Retrieve the Associated value for the property vtValue in the context of the object.  [dispid 303]
	TAutoVal GetProperty(TAutoString szProperty);

	//Name: Returns name of the application.  [dispid 0]
	TAutoString Name();

	//HWND: Returns the HWND of the current IE window.  [dispid -515]
	long HWND();

	//FullName: Returns file specification of the application, including path.  [dispid 400]
	TAutoString FullName();

	//Path: Returns the path to the application.  [dispid 401]
	TAutoString Path();

	//Visible: Determines whether the application is visible or hidden.  [dispid 402]
	TBool Visible();

	//Visible: Determines whether the application is visible or hidden.  [dispid 402]
	void Visible(TBool arg0);

	//StatusBar: Turn on or off the statusbar.  [dispid 403]
	TBool StatusBar();

	//StatusBar: Turn on or off the statusbar.  [dispid 403]
	void StatusBar(TBool arg0);

	//StatusText: Text of Status window.  [dispid 404]
	TAutoString StatusText();

	//StatusText: Text of Status window.  [dispid 404]
	void StatusText(TAutoString arg0);

	//ToolBar: Controls which toolbar is shown.  [dispid 405]
	int ToolBar();

	//ToolBar: Controls which toolbar is shown.  [dispid 405]
	void ToolBar(int arg0);

	//MenuBar: Controls whether menubar is shown.  [dispid 406]
	TBool MenuBar();

	//MenuBar: Controls whether menubar is shown.  [dispid 406]
	void MenuBar(TBool arg0);

	//FullScreen: Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.  [dispid 407]
	TBool FullScreen();

	//FullScreen: Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.  [dispid 407]
	void FullScreen(TBool arg0);
};

#endif

// BrowserNavConstants
// Constants for WebBrowser navigation flags
typedef enum tagBrowserNavConstants
{
	navOpenInNewWindow = 1, // Open in new window
	navNoHistory = 2, // Exclude from history list
	navNoReadFromCache = 4, // Don't read from cache
	navNoWriteToCache = 8, // Don't write from cache
} BrowserNavConstants;

// RefreshConstants
// Constants for Refresh
typedef enum tagRefreshConstants
{
	REFRESH_NORMAL = 0, // Refresh normal
	REFRESH_IFEXPIRED = 1, // Refresh if expired
	REFRESH_COMPLETELY = 3, // Refresh completely
} RefreshConstants;

// CommandStateChangeConstants
// Constants for WebBrowser CommandStateChange
typedef enum tagCommandStateChangeConstants
{
	CSC_UPDATECOMMANDS = -1, // Command Change
	CSC_NAVIGATEFORWARD = 1, // Navigate Forward
	CSC_NAVIGATEBACK = 2, // Navigate Back
} CommandStateChangeConstants;

#ifndef RC_INVOKED
#pragma pack()
#endif  /* !RC_INVOKED */

#ifdef __BORLANDC__
#include <poppack.h>
#endif

// DWebBrowserEvents
// Event interface for Web Browser Control
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

class TDWebBrowserEvents :public TOleDialog
{
public:
	TDWebBrowserEvents(TWindow* parent, TResId resId, TModule* module = 0);

	~TDWebBrowserEvents();

	void SetupWindow();

protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

	//BeforeNavigate: Fired when a new hyperlink is being navigated to.  [dispid 100]
	void BeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Cancel);

	//NavigateComplete: Fired when a new hyperlink is being navigated to.  [dispid 101]
	void NavigateComplete(TAutoString URL);

	//StatusTextChange: Statusbar text changed.  [dispid 102]
	void StatusTextChange(TAutoString Text);

	//ProgressChange: Fired when download progress is updated.  [dispid 108]
	void ProgressChange(long Progress, long ProgressMax);

	//DownloadComplete: Download of page complete.  [dispid 104]
	void DownloadComplete();

	//CommandStateChange: The enabled state of a command changed  [dispid 105]
	void CommandStateChange(long Command, TBool Enable);

	//DownloadBegin: Download of a page started.  [dispid 106]
	void DownloadBegin();

	//NewWindow: Fired when a new window should be created.  [dispid 107]
	void NewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Processed);

	//TitleChange: Document title changed.  [dispid 113]
	void TitleChange(TAutoString Text);

	//FrameBeforeNavigate: Fired when a new hyperlink is being navigated to in a frame.  [dispid 200]
	void FrameBeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Cancel);

	//FrameNavigateComplete: Fired when a new hyperlink is being navigated to in a frame.  [dispid 201]
	void FrameNavigateComplete(TAutoString URL);

	//FrameNewWindow: Fired when a new window should be created.  [dispid 204]
	void FrameNewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Processed);

	//Quit: Fired when application is quiting.  [dispid 103]
	void Quit(TBool* Cancel);

	//WindowMove: Fired when window has been moved.  [dispid 109]
	void WindowMove();

	//WindowResize: Fired when window has been sized.  [dispid 110]
	void WindowResize();

	//WindowActivate: Fired when window has been activated.  [dispid 111]
	void WindowActivate();

	//PropertyChange: Fired when the PutProperty method has been called.  [dispid 112]
	void PropertyChange(TAutoString szProperty);

   void CmOk();

   void CmCancel();

   // Membres
	TOcControl* Ocx;
	TIWebBrowserProxy Control;

   DECLARE_RESPONSE_TABLE(TDWebBrowserEvents);
};

class NSRefDocument;

class TDIECompo : public TOleDialog
{
public:

	string fichCompo;
   TOcControl* Ocx;
	TIWebBrowserProxy Control;

   NSRefDocument* pDocBrut;

	TDIECompo(TWindow* parent, NSRefDocument* pDocMaitre, TModule* module = 0);
	~TDIECompo();

   void SetupWindow();
	bool Message(const char far *texte);
   void Navigate(string url, bool kill = false);
   void CmOk();
   void CmCancel();

   DECLARE_RESPONSE_TABLE(TDIECompo);
};

class NSPublication;

class TDIEPubli : public TOleDialog
{
public:

	NSPublication* pPubli;
   TOcControl* Ocx;
	TIWebBrowserProxy Control;

	TDIEPubli(TWindow* parent, NSPublication* pPub, TModule* module = 0);
	~TDIEPubli();

   void SetupWindow();
	bool Message(const char far *texte);
   void Print();
   void Navigate(string url);
   bool IsBusy();
   bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

   void NavigateComplete(TAutoString URL);
   void ProgressChange(long Progress, long ProgressMax);

	void BeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Cancel);
	void StatusTextChange(TAutoString Text);
	void DownloadComplete();
	void CommandStateChange(long Command, TBool Enable);
	void DownloadBegin();
	void NewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Processed);
	void TitleChange(TAutoString Text);
	void FrameBeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Cancel);
	void FrameNavigateComplete(TAutoString URL);
	void FrameNewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal PostData, TAutoString Headers, TBool* Processed);
	void Quit(TBool* Cancel);
	void WindowMove();
	void WindowResize();
	void WindowActivate();
	void PropertyChange(TAutoString szProperty);

   void CmOk();
   void CmCancel();

   DECLARE_RESPONSE_TABLE(TDIEPubli);
};

/////////////////////////////////////////////////////////////////////////////////
// DWebBrowserAppEvents
// Event interface for Web Browser Control
//Demo class indicates custom event handling
//cut and paste code from here to your TOleWindow
//or TOleDialog based ActiveX container

class TDWebBrowserAppEvents : public TOleWindow
{
public:
	TDWebBrowserAppEvents(TWindow* parent, TModule* module = 0);

	~TDWebBrowserAppEvents();

	void SetupWindow();

protected:
	bool EvOcCtrlCustomEvent(TCtrlCustomEvent* pev);

   LRESULT EvOcEvent(WPARAM wParam, LPARAM lParam);

	//BeforeNavigate: Fired when a new hyperlink is being navigated to.  [dispid 100]
	void BeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal* PostData, TAutoString Headers, TBool* Cancel);

	//NavigateComplete: Fired when a new hyperlink is being navigated to.  [dispid 101]
	void NavigateComplete(TAutoString URL);

	//StatusTextChange: Statusbar text changed.  [dispid 102]
	void StatusTextChange(TAutoString Text);

	//ProgressChange: Fired when download progress is updated.  [dispid 108]
	void ProgressChange(long Progress, long ProgressMax);

	//DownloadComplete: Download of page complete.  [dispid 104]
	void DownloadComplete();

	//CommandStateChange: The enabled state of a command changed  [dispid 105]
	void CommandStateChange(long Command, TBool Enable);

	//DownloadBegin: Download of a page started.  [dispid 106]
	void DownloadBegin();

	//NewWindow: Fired when a new window should be created.  [dispid 107]
	void NewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal* PostData, TAutoString Headers, TBool* Processed);

	//TitleChange: Document title changed.  [dispid 113]
	void TitleChange(TAutoString Text);

	//FrameBeforeNavigate: Fired when a new hyperlink is being navigated to in a frame.  [dispid 200]
	void FrameBeforeNavigate(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal* PostData, TAutoString Headers, TBool* Cancel);

	//FrameNavigateComplete: Fired when a new hyperlink is being navigated to in a frame.  [dispid 201]
	void FrameNavigateComplete(TAutoString URL);

	//FrameNewWindow: Fired when a new window should be created.  [dispid 204]
	void FrameNewWindow(TAutoString URL, long Flags, TAutoString TargetFrameName, TAutoVal* PostData, TAutoString Headers, TBool* Processed);

	//Quit: Fired when application is quiting.  [dispid 103]
	void Quit(TBool* Cancel);

	//WindowMove: Fired when window has been moved.  [dispid 109]
	void WindowMove();

	//WindowResize: Fired when window has been sized.  [dispid 110]
	void WindowResize();

	//WindowActivate: Fired when window has been activated.  [dispid 111]
	void WindowActivate();

	//PropertyChange: Fired when the PutProperty method has been called.  [dispid 112]
	void PropertyChange(TAutoString szProperty);

   // Membres
	TIWebBrowserAppProxy Control;

   DECLARE_RESPONSE_TABLE(TDWebBrowserAppEvents);
};


class TIExplore : public TDWebBrowserAppEvents
{
public:

	TIExplore(TWindow* parent, TModule* module = 0);

	~TIExplore();

   void Quit();

	bool Message(const char far *texte);

   void Load();

   void Print();

   void Navigate(string url);
};

#endif
