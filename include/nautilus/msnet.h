//---------------------------------------------------------------------------
//
//Version:            1.0
//Copyright:          
//Description:        
//Author:             
//Company:            
//
//Header Type:        Abstract type descriptions.
//
//File:               msnet.h
//
//Type Library:       SHDocVw
//Type Description:   Microsoft Internet Controls
//
//GUID:               {EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B}
//System:             WIN32
//Version:            1.1
//
//Code generated by ProxyWiz 1.0
//ProxyWiz Copyright Dr John Maddock 1997, all rights reserved.
//
//---------------------------------------------------------------------------


#ifndef __cplusplus
#include <windows.h>
#include <olectl.h>
#else
#include <owl/pch.h>
#include <owl/oledialg.h>
#endif

#include "nautilus\mshtmhst.h"

#if !defined(__MSNET_H)
#define __MSNET_H

#ifdef __BORLANDC__
  #include <pshpack8.h>
#endif


#ifndef RC_INVOKED
#pragma pack(1)         /* Assume byte packing throughout */
#endif /* !RC_INVOKED */


#ifdef __cplusplus
#if !defined(__push_arg)
#define __push_arg

class SafeArrayBase
{
public:
   virtual VARTYPE type() = 0;
   virtual void copy(SAFEARRAY** pparray) = 0;
   virtual SAFEARRAY** ref() = 0;};

template <class T>
class SafeArray;

/********************** La struct VarType n'est pas acceptée par le compilateur
                        elle est déja définie dans _fastcall System::VarType
template <class T>
struct VarType
{
};

struct VarType<short>
{
   static VARTYPE Val(){return VT_I2;}
};

struct VarType<long>
{
   static VARTYPE Val(){return VT_I4;}
};

struct VarType<float>
{
   static VARTYPE Val(){return VT_R4;}
};

struct VarType<double>
{
   static VARTYPE Val(){return VT_R8;}
};

struct VarType<CY>
{
   static VARTYPE Val(){return VT_CY;}
};

struct VarType<TAutoDate>
{
   static VARTYPE Val(){return VT_DATE;}
};

struct VarType<BSTR>
{
   static VARTYPE Val(){return VT_BSTR;}
};

struct VarType<TAutoString>
{
   static VARTYPE Val(){return VT_BSTR;}
};

struct VarType<IDispatch*>
{
   static VARTYPE Val(){return VT_DISPATCH;}
};

struct VarType<TBool>
{
   static VARTYPE Val(){return VT_BOOL;}
};

struct VarType<TAutoBool>
{
   static VARTYPE Val(){return VT_BOOL;}
};

struct VarType<IUnknown*>
{
   static VARTYPE Val(){return VT_UNKNOWN;}
};

struct VarType<signed char>
{
   static VARTYPE Val(){return VT_I1;}
};

struct VarType<unsigned char>
{
   static VARTYPE Val(){return VT_UI1;}
};

struct VarType<unsigned short>
{
   static VARTYPE Val(){return VT_UI2;}
};

struct VarType<unsigned long>
{
   static VARTYPE Val(){return VT_UI4;}
};

struct VarType<int>
{
   static VARTYPE Val(){return VT_INT;}
};

struct VarType<unsigned int>
{
   static VARTYPE Val(){return VT_UINT;}
};

struct VarType<TAutoVal>
{
   static VARTYPE Val(){return VT_VARIANT;}
};

******************************************************/

template <class T>
inline void push_arg(TAutoVal& val, T arg)
{
   val = arg;
}

inline void push_arg(TAutoVal& val, SafeArrayBase& arg)
{
   ((VARIANT*)(&val))->vt = arg.type();
   arg.copy(&((VARIANT*)(&val))->parray);
}

inline void push_arg(TAutoVal& val, SafeArrayBase* arg)
{
   ((VARIANT*)(&val))->vt = arg->type() | (VARTYPE)VT_BYREF;
   ((VARIANT*)(&val))->pparray = arg->ref();
}

inline void push_arg(TAutoVal& val, BSTR* arg)
{
   ((VARIANT*)(&val))->vt = VT_BSTR | VT_BYREF;
   ((VARIANT*)(&val))->pbstrVal = arg;
}

inline void push_arg(TAutoVal& val, void* arg)
{
   ((VARIANT*)(&val))->vt = VT_BYREF;
   ((VARIANT*)(&val))->byref = arg;
}

inline void push_arg(TAutoVal& val, IUnknown** arg)
{
   ((VARIANT*)(&val))->vt = VT_UNKNOWN | VT_BYREF;
   ((VARIANT*)(&val))->ppunkVal = arg;
}

inline void push_arg(TAutoVal& val, IDispatch** arg)
{
   ((VARIANT*)(&val))->vt = VT_DISPATCH | VT_BYREF;
   ((VARIANT*)(&val))->ppdispVal = arg;
}

inline void push_arg(TAutoVal& val, TAutoVal* arg)
{
   ((VARIANT*)(&val))->vt = VT_VARIANT | VT_BYREF;
   ((VARIANT*)(&val))->pvarVal = (VARIANT*)arg;
}

inline void push_arg(TAutoVal& val, TAutoVal** arg)
{
   TXOle::Check(E_INVALIDARG);
}

template <class T>
class SafeArrayElementRef
{
private:
   long index;
   SafeArray<T>* ptr;
   SafeArrayElementRef(long i, SafeArray<T>* p)
   {
      index = i;
      ptr = p;
   }
public:
   SafeArrayElementRef(const SafeArrayElementRef& e)
   {
      index = e.index;
      ptr = e.ptr;
   }
   SafeArrayElementRef& operator=(const SafeArrayElementRef& e)
   {
      index = e.index;
      ptr = e.ptr;
      return *this;
   }
   operator TAutoVal();

   SafeArrayElementRef& operator=(const TAutoVal& val);

   SafeArrayElementRef& operator=(const T& val)
   {
      TAutoVal v;
      push_arg(v, val);
      return (*this = v);
   }
friend SafeArray<T>;
};


class SafeArrayElementRef<TAutoVal>
{
private:
   long index;
   SafeArray<TAutoVal>* ptr;
   SafeArrayElementRef(long i, SafeArray<TAutoVal>* p)
   {
      index = i;
      ptr = p;
   }
public:
   SafeArrayElementRef(const SafeArrayElementRef& e)
   {
      index = e.index;
      ptr = e.ptr;
   }
   SafeArrayElementRef& operator=(const SafeArrayElementRef& e)
   {
      index = e.index;
      ptr = e.ptr;
      return *this;
   }
   operator TAutoVal();

   SafeArrayElementRef& operator=(const TAutoVal& val);

friend SafeArray<TAutoVal>;
};

template <class T>
class SafeArray: public SafeArrayBase
{
private:
   SAFEARRAY* ptr;

public:
   SafeArray()
   {
      ptr = 0;
   }

   SafeArray(unsigned long len)
   {
      SAFEARRAYBOUND bound;
      bound.cElements = len;
      bound.lLbound = 0;
      ptr = SafeArrayCreate(VarType<T>::Val(), 1, &bound);
      if(ptr == 0)
         throw TXOle("Unable to create SAFEARRAY structure", S_OK);
   }

   SafeArray(unsigned long len, T* values);

   SafeArray(unsigned int cDims, SAFEARRAYBOUND* bound)
   {
      ptr = SafeArrayCreate(VarType<T>::Val(), cDims, bound);
      if(ptr == 0)
         throw TXOle("Unable to create SAFEARRAY structure", S_OK);
   }

   SafeArray(const SafeArray<T>& s)
   {
      if(s.ptr)
         TXOle::Check(SafeArrayCopy(s.ptr, &ptr));
      else
         ptr = 0;
   }


   SafeArray(const SAFEARRAY* p)
   {
      TXOle::Check(SafeArrayCopy(const_cast<SAFEARRAY*>(p), &ptr));
   }

   SafeArray(const TAutoVal& Val)
   {
      if((((VARIANT*)&Val)->vt & VT_ARRAY) == 0)
         throw TXOle("Invalid VariantArg passed to SafeArray", E_INVALIDARG);
      TXOle::Check(SafeArrayCopy(((VARIANT*)&Val)->parray, &ptr));
   }

   ~SafeArray()
   {
      if(ptr)
         TXOle::Check(SafeArrayDestroy(ptr));
   }

   SafeArray<T>& operator=(const SafeArray<T>& s)
   {
      this->~SafeArray<T>();
      new (this) SafeArray<T>(s);
      return *this;
   }

   SafeArray<T>& operator=(const SAFEARRAY* p)
   {
      this->~SafeArray<T>();
      new (this) SafeArray<T>(p);
      return *this;
   }

   SafeArray<T>& operator=(const TAutoVal& Val)
   {
      this->~SafeArray<T>();
      new (this) SafeArray<T>(Val);
      return *this;
   }

   void MustBeBound()
   {
      if(ptr == 0)
         throw TXOle("Attempt to access uninitialised array", S_OK);
   }

   unsigned short Dimentions()
   {
      return ptr->cDims;
   }

   SAFEARRAYBOUND* Bound(unsigned short i)
   {
      if(i >= ptr->cDims)
         throw TXOle("Attempt to access array out of range", S_OK);
      return ptr->rgsabound + i;
   }

   TAutoVal GetValue(long FAR* indices)
   {
      MustBeBound();
      TAutoVal v;
      void* data;
      if(ptr->fFeatures & (FADF_DISPATCH | FADF_UNKNOWN | FADF_BSTR))
      {
         // we have a 4 byte value:
         TXOle::Check(SafeArrayGetElement(ptr, indices, &(((VARIANT*)&v)->punkVal)));
         ((VARIANT*)&v)->vt = (VARTYPE)((ptr->fFeatures & FADF_UNKNOWN) ? VT_UNKNOWN :
                                (ptr->fFeatures & FADF_BSTR) ? VT_BSTR :
                                (ptr->fFeatures & FADF_DISPATCH) ? VT_DISPATCH :
                                VT_VARIANT);
      }
      else if(ptr->fFeatures & FADF_VARIANT)
         TXOle::Check(SafeArrayGetElement(ptr, indices, &v));
      else
      {
         TXOle::Check(SafeArrayGetElement(ptr, indices, &(((VARIANT*)&v)->punkVal)));
         ((VARIANT*)&v)->vt = VarType<T>::Val();
      }
      return v;
   }

   void SetValue(long FAR* indices, TAutoVal v)
   {
      MustBeBound();
      // must coerce to the type we expect:
      if(ptr->fFeatures & FADF_VARIANT)
         TXOle::Check(SafeArrayPutElement(ptr, indices, (void*)&v));
      else if(ptr->fFeatures & (FADF_DISPATCH | FADF_UNKNOWN | FADF_BSTR))
      {
         // put a pointer directly:
         VARTYPE vt = ((VARIANT*)&v)->vt;
         if((vt != VT_DISPATCH) && (vt != VT_UNKNOWN) && (vt != VT_BSTR) )
            TXOle::Check(E_INVALIDARG);
         TXOle::Check(SafeArrayPutElement(ptr, indices, (void*)((VARIANT*)&v)->punkVal) );
      }
      else
      {
         TXOle::Check(VariantChangeType((VARIANT*)&v, (VARIANT*)&v, 0, VarType<T>::Val()));
         TXOle::Check(SafeArrayPutElement(ptr, indices, (void*)&((VARIANT*)&v)->punkVal) );
      }
   }

   SafeArrayElementRef<T> operator[](long i)
   {
      MustBeBound();
      return SafeArrayElementRef<T>(i, this);
   }

   operator SAFEARRAY* ()
   {
      return ptr;
   }

   operator SAFEARRAY** ()
   {
      //need to set ptr to null first:
      if(ptr)
      {
         this->~SafeArray<T>();
         new (this) SafeArray<T>();
      }
      return &ptr;
   }

   virtual VARTYPE type()
   {
      return VarType<T>::Val() | (VARTYPE)VT_ARRAY;
   }
   
   virtual void copy(SAFEARRAY** pparray)
   {
      MustBeBound();
      SafeArrayCopy(ptr, pparray);
   }

   virtual SAFEARRAY** ref()
   {
      return &ptr;
   }

   friend SafeArray<T>;
   friend void push_arg(TAutoVal& val, SafeArrayBase& arg);
};

template <class T>
SafeArray<T>::SafeArray(unsigned long len, T* values)
{
   SAFEARRAYBOUND bound;
   bound.cElements = len;
   bound.lLbound = 0;
   ptr = SafeArrayCreate(VarType<T>::Val(), 1, &bound);
   if(ptr == 0)
      throw TXOle("Unable to create SAFEARRAY structure", S_OK);
   for(unsigned long i = 0; i < len; ++i)
   {
      TAutoVal v;
      push_arg(v, *(values + i));
      SetValue((long*)&i, v);
   }
}

template <class T>
SafeArrayElementRef<T>::operator TAutoVal ()
{
   TAutoVal val;
   val = ptr->GetValue((long*)&index);
   return val;
}

template <class T>
SafeArrayElementRef<T>& SafeArrayElementRef<T>::operator=(const TAutoVal& val)
{
   ptr->SetValue((long*)&index, val);
   return *this;
}

inline SafeArrayElementRef<TAutoVal>::operator TAutoVal ()
{
   TAutoVal val;
   val = ptr->GetValue((long*)&index);
   return val;
}

inline SafeArrayElementRef<TAutoVal>& SafeArrayElementRef<TAutoVal>::operator=(const TAutoVal& val)
{
   ptr->SetValue((long*)&index, val);
   return *this;
}

#endif
#endif

#ifndef _PWCLASS
#define _PWCLASS
#endif

//------------------------------------------------------------
//Predeclaration of classes and interfaces

#ifdef __cplusplus

class Folder;
class _PWCLASS TFolderProxy;
class FolderItems;
class _PWCLASS TFolderItemsProxy;
class FolderItem;
class _PWCLASS TFolderItemProxy;
class FolderItemVerbs;
class _PWCLASS TFolderItemVerbsProxy;
class FolderItemVerb;
class _PWCLASS TFolderItemVerbProxy;
#else

typedef struct Folder Folder;
typedef struct FolderItems FolderItems;
typedef struct FolderItem FolderItem;
typedef struct FolderItemVerbs FolderItemVerbs;
typedef struct FolderItemVerb FolderItemVerb;
#endif

//Coclass: WebBrowser_V1 WebBrowser Control
// {EAB22AC3-30C1-11CF-A7EB-0000C05BAE0B}
typedef IUnknown WebBrowser_V1;

//Coclass: WebBrowser WebBrowser Control
// {8856F961-340A-11D0-A96B-00C04FD705A2}
typedef IUnknown WebBrowser;

//Coclass: InternetExplorer Internet Explorer Application.
// {0002DF01-0000-0000-C000-000000000046}
typedef IUnknown InternetExplorer;

//Coclass: ShellFolderViewOC Shell Folder View Events Router.
// {9BA05971-F6A8-11CF-A442-00A0C90A8F39}
typedef IUnknown ShellFolderViewOC;

//Coclass: ShellWindows ShellDispatch Load in Shell Context
// {9BA05972-F6A8-11CF-A442-00A0C90A8F39}
typedef IUnknown ShellWindows;

//Coclass: ShellFolderView Shell Folder View Object
// {62112AA1-EBE4-11CF-A5FB-0020AFE7292D}
typedef IUnknown ShellFolderView;

//Coclass: Shell Shell Object Type Information
// {13709620-C279-11CE-A49E-444553540000}
typedef IUnknown Shell;

//Coclass: ShellDispatchInproc ShellDispatch Load in Shell Context
// {0A89A860-D7B1-11CE-8350-444553540000}
typedef IUnknown ShellDispatchInproc;

//Coclass: DefViewOC 
// {1820FED0-473E-11D0-A96C-00C04FD705A2}
typedef IUnknown DefViewOC;

//Coclass: ShellUIHelper 
// {11148320-7314-11D0-8A03-00A0C90A90AC}
typedef IUnknown ShellUIHelper;

//------------------------------------------------------------
//Declaration of GUID's

DEFINE_GUID(IID_IWebBrowser, 0xeab22ac1, 0x30c1, 0x11cf, 0xa7, 0xeb, 0x0, 0x0, 0xc0, 0x5b, 0xae, 0xb);
DEFINE_GUID(IID_IWebBrowserApp, 0x2df05, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID_IWebBrowser2, 0xd30c1661, 0xcdaf, 0x11d0, 0x8a, 0x3e, 0x0, 0xc0, 0x4f, 0xc9, 0xe2, 0x6e);
DEFINE_GUID(IID_CoWebBrowser_V1, 0xeab22ac3, 0x30c1, 0x11cf, 0xa7, 0xeb, 0x0, 0x0, 0xc0, 0x5b, 0xae, 0xb);
DEFINE_GUID(IID_CoWebBrowser, 0x8856f961, 0x340a, 0x11d0, 0xa9, 0x6b, 0x0, 0xc0, 0x4f, 0xd7, 0x5, 0xa2);
DEFINE_GUID(IID_CoInternetExplorer, 0x2df01, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);
DEFINE_GUID(IID_IFolderViewOC, 0x9ba05970, 0xf6a8, 0x11cf, 0xa4, 0x42, 0x0, 0xa0, 0xc9, 0xa, 0x8f, 0x39);
DEFINE_GUID(IID_CoShellFolderViewOC, 0x9ba05971, 0xf6a8, 0x11cf, 0xa4, 0x42, 0x0, 0xa0, 0xc9, 0xa, 0x8f, 0x39);
DEFINE_GUID(IID_IShellWindows, 0x85cb6900, 0x4d95, 0x11cf, 0x96, 0xc, 0x0, 0x80, 0xc7, 0xf4, 0xee, 0x85);
DEFINE_GUID(IID_CoShellWindows, 0x9ba05972, 0xf6a8, 0x11cf, 0xa4, 0x42, 0x0, 0xa0, 0xc9, 0xa, 0x8f, 0x39);
DEFINE_GUID(IID_IShellFolderViewDual, 0xe7a1af80, 0x4d96, 0x11cf, 0x96, 0xc, 0x0, 0x80, 0xc7, 0xf4, 0xee, 0x85);
DEFINE_GUID(IID_CoShellFolderView, 0x62112aa1, 0xebe4, 0x11cf, 0xa5, 0xfb, 0x0, 0x20, 0xaf, 0xe7, 0x29, 0x2d);
DEFINE_GUID(IID_IShellDispatch, 0xd8f015c0, 0xc278, 0x11ce, 0xa4, 0x9e, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);
DEFINE_GUID(IID_CoShell, 0x13709620, 0xc279, 0x11ce, 0xa4, 0x9e, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);
DEFINE_GUID(IID_CoShellDispatchInproc, 0xa89a860, 0xd7b1, 0x11ce, 0x83, 0x50, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);
DEFINE_GUID(IID_CoDefViewOC, 0x1820fed0, 0x473e, 0x11d0, 0xa9, 0x6c, 0x0, 0xc0, 0x4f, 0xd7, 0x5, 0xa2);
DEFINE_GUID(IID_IShellUIHelper, 0xff0a10e0, 0xc636, 0x11d0, 0x95, 0x42, 0x0, 0x60, 0x97, 0x97, 0xea, 0x4f);
DEFINE_GUID(IID_CoShellUIHelper, 0x11148320, 0x7314, 0x11d0, 0x8a, 0x3, 0x0, 0xa0, 0xc9, 0xa, 0x90, 0xac);
DEFINE_GUID(IID_FolderItem, 0xfac32c80, 0xcbe4, 0x11ce, 0x83, 0x50, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);
DEFINE_GUID(IID_FolderItemVerbs, 0x1f8352c0, 0x50b0, 0x11cf, 0x96, 0xc, 0x0, 0x80, 0xc7, 0xf4, 0xee, 0x85);
DEFINE_GUID(IID_FolderItems, 0x744129e0, 0xcbe5, 0x11ce, 0x83, 0x50, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);
DEFINE_GUID(IID_Folder, 0xbbcbde60, 0xc3ff, 0x11ce, 0x83, 0x50, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);
DEFINE_GUID(IID_FolderItemVerb, 0x8ec3e00, 0x50b0, 0x11cf, 0x96, 0xc, 0x0, 0x80, 0xc7, 0xf4, 0xee, 0x85);
DEFINE_GUID(IID_IShellLinkDual, 0x88a05c00, 0xf000, 0x11ce, 0x83, 0x50, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);


typedef enum BrowserNavConstants {
   navOpenInNewWindow = 1,
   navNoHistory = 2,
   navNoReadFromCache = 4,
   navNoWriteToCache = 8
} BrowserNavConstants;


#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWebBrowser
// Web Browser interface
// {EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B}

#undef  INTERFACE
#define INTERFACE IWebBrowser

DECLARE_INTERFACE_(IWebBrowser, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IWebBrowser methods:
	STDMETHOD_(HRESULT, GoBack) (THIS ) PURE; // Navigates to the previous item in the history list.
	STDMETHOD_(HRESULT, GoForward) (THIS ) PURE; // Navigates to the next item in the history list.
	STDMETHOD_(HRESULT, GoHome) (THIS ) PURE; // Go home/start page.
	STDMETHOD_(HRESULT, GoSearch) (THIS ) PURE; // Go Search Page.
	STDMETHOD_(HRESULT, Navigate) (THIS_ BSTR URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers) PURE; // Navigates to a URL or file.
	STDMETHOD_(HRESULT, Refresh) (THIS ) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Refresh2) (THIS_ VARIANT* Level) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Stop) (THIS ) PURE; // Stops opening a file.
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppDisp) PURE; // Returns the application automation object if accessible, this automation object otherwise..
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppDisp) PURE; // Returns the automation object of the container/parent if one exists or this automation object.
	STDMETHOD_(HRESULT, Get_Container) (THIS_ IDispatch** ppDisp) PURE; // Returns the container/parent automation object, if any.
	STDMETHOD_(HRESULT, Get_Document) (THIS_ IDispatch** ppDisp) PURE; // Returns the active Document automation object, if any.
	STDMETHOD_(HRESULT, Get_TopLevelContainer) (THIS_ VARIANT_BOOL* pBool) PURE; // Returns True if this is the top level object.
	STDMETHOD_(HRESULT, Get_Type) (THIS_ BSTR* pbstrType) PURE; // Returns the type of the contained document object.
	STDMETHOD_(HRESULT, Get_Left) (THIS_ long* pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Left) (THIS_ long pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Top) (THIS_ long* pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Top) (THIS_ long pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Width) (THIS_ long* pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Width) (THIS_ long pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_Height) (THIS_ long* pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Height) (THIS_ long pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_LocationName) (THIS_ BSTR* pbstrLocationName) PURE; // Gets the short (UI-friendly) name of the URL/file currently viewed.
	STDMETHOD_(HRESULT, Get_LocationURL) (THIS_ BSTR* pbstrLocationURL) PURE; // Gets the full URL/path currently viewed.
	STDMETHOD_(HRESULT, Get_Busy) (THIS_ VARIANT_BOOL* pBool) PURE; // Query to see if something is still in progress.
};

typedef IWebBrowser* LPWEBBROWSER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWebBrowserApp
// Web Browser Application Interface.
// {0002DF05-0000-0000-C000-000000000046}

#undef  INTERFACE
#define INTERFACE IWebBrowserApp

DECLARE_INTERFACE_(IWebBrowserApp, IWebBrowser)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IWebBrowser methods:
	STDMETHOD_(HRESULT, GoBack) (THIS ) PURE; // Navigates to the previous item in the history list.
	STDMETHOD_(HRESULT, GoForward) (THIS ) PURE; // Navigates to the next item in the history list.
	STDMETHOD_(HRESULT, GoHome) (THIS ) PURE; // Go home/start page.
	STDMETHOD_(HRESULT, GoSearch) (THIS ) PURE; // Go Search Page.
	STDMETHOD_(HRESULT, Navigate) (THIS_ BSTR URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers) PURE; // Navigates to a URL or file.
	STDMETHOD_(HRESULT, Refresh) (THIS ) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Refresh2) (THIS_ VARIANT* Level) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Stop) (THIS ) PURE; // Stops opening a file.
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppDisp) PURE; // Returns the application automation object if accessible, this automation object otherwise..
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppDisp) PURE; // Returns the automation object of the container/parent if one exists or this automation object.
	STDMETHOD_(HRESULT, Get_Container) (THIS_ IDispatch** ppDisp) PURE; // Returns the container/parent automation object, if any.
	STDMETHOD_(HRESULT, Get_Document) (THIS_ IDispatch** ppDisp) PURE; // Returns the active Document automation object, if any.
	STDMETHOD_(HRESULT, Get_TopLevelContainer) (THIS_ VARIANT_BOOL* pBool) PURE; // Returns True if this is the top level object.
	STDMETHOD_(HRESULT, Get_Type) (THIS_ BSTR* pbstrType) PURE; // Returns the type of the contained document object.
	STDMETHOD_(HRESULT, Get_Left) (THIS_ long* pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Left) (THIS_ long pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Top) (THIS_ long* pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Top) (THIS_ long pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Width) (THIS_ long* pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Width) (THIS_ long pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_Height) (THIS_ long* pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Height) (THIS_ long pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_LocationName) (THIS_ BSTR* pbstrLocationName) PURE; // Gets the short (UI-friendly) name of the URL/file currently viewed.
	STDMETHOD_(HRESULT, Get_LocationURL) (THIS_ BSTR* pbstrLocationURL) PURE; // Gets the full URL/path currently viewed.
	STDMETHOD_(HRESULT, Get_Busy) (THIS_ VARIANT_BOOL* pBool) PURE; // Query to see if something is still in progress.
#endif
	//IWebBrowserApp methods:
	STDMETHOD_(HRESULT, Quit) (THIS ) PURE; // Exits application and closes the open document.
	STDMETHOD_(HRESULT, ClientToWindow) (THIS_ int* pcx, int* pcy) PURE; // Converts client sizes into window sizes.
	STDMETHOD_(HRESULT, PutProperty) (THIS_ BSTR szProperty, VARIANT vtValue) PURE; // Associates vtValue with the name szProperty in the context of the object.
	STDMETHOD_(HRESULT, GetProperty) (THIS_ BSTR szProperty, VARIANT* pvtValue) PURE; // Retrieve the Associated value for the property vtValue in the context of the object.
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* pbstrName) PURE; // Returns name of the application.
	STDMETHOD_(HRESULT, Get_HWND) (THIS_ long* pHWND) PURE; // Returns the HWND of the current IE window.
	STDMETHOD_(HRESULT, Get_FullName) (THIS_ BSTR* pbstrFullName) PURE; // Returns file specification of the application, including path.
	STDMETHOD_(HRESULT, Get_Path) (THIS_ BSTR* pbstrPath) PURE; // Returns the path to the application.
	STDMETHOD_(HRESULT, Get_Visible) (THIS_ VARIANT_BOOL* pBool) PURE; // Determines whether the application is visible or hidden.
	STDMETHOD_(HRESULT, Set_Visible) (THIS_ VARIANT_BOOL pBool) PURE; // Determines whether the application is visible or hidden.
	STDMETHOD_(HRESULT, Get_StatusBar) (THIS_ VARIANT_BOOL* pBool) PURE; // Turn on or off the statusbar.
	STDMETHOD_(HRESULT, Set_StatusBar) (THIS_ VARIANT_BOOL pBool) PURE; // Turn on or off the statusbar.
	STDMETHOD_(HRESULT, Get_StatusText) (THIS_ BSTR* pbstr) PURE; // Text of Status window.
	STDMETHOD_(HRESULT, Set_StatusText) (THIS_ BSTR pbstr) PURE; // Text of Status window.
	STDMETHOD_(HRESULT, Get_ToolBar) (THIS_ int* pValue) PURE; // Controls which toolbar is shown.
	STDMETHOD_(HRESULT, Set_ToolBar) (THIS_ int pValue) PURE; // Controls which toolbar is shown.
	STDMETHOD_(HRESULT, Get_MenuBar) (THIS_ VARIANT_BOOL* Value) PURE; // Controls whether menubar is shown.
	STDMETHOD_(HRESULT, Set_MenuBar) (THIS_ VARIANT_BOOL Value) PURE; // Controls whether menubar is shown.
	STDMETHOD_(HRESULT, Get_FullScreen) (THIS_ VARIANT_BOOL* pbFullScreen) PURE; // Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.
	STDMETHOD_(HRESULT, Set_FullScreen) (THIS_ VARIANT_BOOL pbFullScreen) PURE; // Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.
};

typedef IWebBrowserApp* LPWEBBROWSERAPP;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

// OLECMDID
/*
typedef enum tagOLECMDID
{
	OLECMDID_OPEN = 1,
	OLECMDID_NEW = 2,
	OLECMDID_SAVE = 3,
	OLECMDID_SAVEAS = 4,
	OLECMDID_SAVECOPYAS = 5,
	OLECMDID_PRINT = 6,
	OLECMDID_PRINTPREVIEW = 7,
	OLECMDID_PAGESETUP = 8,
	OLECMDID_SPELL = 9,
	OLECMDID_PROPERTIES = 10,
	OLECMDID_CUT = 11,
	OLECMDID_COPY = 12,
	OLECMDID_PASTE = 13,
	OLECMDID_PASTESPECIAL = 14,
	OLECMDID_UNDO = 15,
	OLECMDID_REDO = 16,
	OLECMDID_SELECTALL = 17,
	OLECMDID_CLEARSELECTION = 18,
	OLECMDID_ZOOM = 19,
	OLECMDID_GETZOOMRANGE = 20,
	OLECMDID_UPDATECOMMANDS = 21,
	OLECMDID_REFRESH = 22,
	OLECMDID_STOP = 23,
	OLECMDID_HIDETOOLBARS = 24,
	OLECMDID_SETPROGRESSMAX = 25,
	OLECMDID_SETPROGRESSPOS = 26,
	OLECMDID_SETPROGRESSTEXT = 27,
	OLECMDID_SETTITLE = 28,
	OLECMDID_SETDOWNLOADSTATE = 29,
	OLECMDID_STOPDOWNLOAD = 30,
	OLECMDID_ONTOOLBARACTIVATED = 31,
	OLECMDID_FIND = 32,
	OLECMDID_DELETE = 33,
	OLECMDID_HTTPEQUIV = 34,
	OLECMDID_HTTPEQUIV_DONE = 35,
	OLECMDID_ENABLE_INTERACTION = 36,
	OLECMDID_ONUNLOAD = 37,
	OLECMDID_PROPERTYBAG2 = 38,
	OLECMDID_PREREFRESH = 39,
} OLECMDID;
*/
// OLECMDF
/*
typedef enum tagOLECMDF
{
	OLECMDF_SUPPORTED = 1,
	OLECMDF_ENABLED = 2,
	OLECMDF_LATCHED = 4,
	OLECMDF_NINCHED = 8,
} OLECMDF;
*/
// OLECMDEXECOPT
/*
typedef enum tagOLECMDEXECOPT
{
	OLECMDEXECOPT_DODEFAULT = 0,
	OLECMDEXECOPT_PROMPTUSER = 1,
	OLECMDEXECOPT_DONTPROMPTUSER = 2,
	OLECMDEXECOPT_SHOWHELP = 3,
} OLECMDEXECOPT;
*/
// tagREADYSTATE
/*
typedef enum tagtagREADYSTATE
{
	READYSTATE_UNINITIALIZED = 0,
	READYSTATE_LOADING = 1,
	READYSTATE_LOADED = 2,
	READYSTATE_INTERACTIVE = 3,
	READYSTATE_COMPLETE = 4,
} tagREADYSTATE;
*/
#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IWebBrowser2
// Web Browser Interface for IE4.
// {D30C1661-CDAF-11D0-8A3E-00C04FC9E26E}

#undef  INTERFACE
#define INTERFACE IWebBrowser2

DECLARE_INTERFACE_(IWebBrowser2, IWebBrowserApp)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
	//IWebBrowser methods:
	STDMETHOD_(HRESULT, GoBack) (THIS ) PURE; // Navigates to the previous item in the history list.
	STDMETHOD_(HRESULT, GoForward) (THIS ) PURE; // Navigates to the next item in the history list.
	STDMETHOD_(HRESULT, GoHome) (THIS ) PURE; // Go home/start page.
	STDMETHOD_(HRESULT, GoSearch) (THIS ) PURE; // Go Search Page.
	STDMETHOD_(HRESULT, Navigate) (THIS_ BSTR URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers) PURE; // Navigates to a URL or file.
	STDMETHOD_(HRESULT, Refresh) (THIS ) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Refresh2) (THIS_ VARIANT* Level) PURE; // Refresh the currently viewed page.
	STDMETHOD_(HRESULT, Stop) (THIS ) PURE; // Stops opening a file.
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppDisp) PURE; // Returns the application automation object if accessible, this automation object otherwise..
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppDisp) PURE; // Returns the automation object of the container/parent if one exists or this automation object.
	STDMETHOD_(HRESULT, Get_Container) (THIS_ IDispatch** ppDisp) PURE; // Returns the container/parent automation object, if any.
	STDMETHOD_(HRESULT, Get_Document) (THIS_ IDispatch** ppDisp) PURE; // Returns the active Document automation object, if any.
	STDMETHOD_(HRESULT, Get_TopLevelContainer) (THIS_ VARIANT_BOOL* pBool) PURE; // Returns True if this is the top level object.
	STDMETHOD_(HRESULT, Get_Type) (THIS_ BSTR* pbstrType) PURE; // Returns the type of the contained document object.
	STDMETHOD_(HRESULT, Get_Left) (THIS_ long* pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Left) (THIS_ long pl) PURE; // The horizontal position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Top) (THIS_ long* pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Set_Top) (THIS_ long pl) PURE; // The vertical position (pixels) of the frame window relative to the screen/container.
	STDMETHOD_(HRESULT, Get_Width) (THIS_ long* pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Width) (THIS_ long pl) PURE; // The horizontal dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_Height) (THIS_ long* pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Set_Height) (THIS_ long pl) PURE; // The vertical dimension (pixels) of the frame window/object.
	STDMETHOD_(HRESULT, Get_LocationName) (THIS_ BSTR* pbstrLocationName) PURE; // Gets the short (UI-friendly) name of the URL/file currently viewed.
	STDMETHOD_(HRESULT, Get_LocationURL) (THIS_ BSTR* pbstrLocationURL) PURE; // Gets the full URL/path currently viewed.
	STDMETHOD_(HRESULT, Get_Busy) (THIS_ VARIANT_BOOL* pBool) PURE; // Query to see if something is still in progress.
	//IWebBrowserApp methods:
	STDMETHOD_(HRESULT, Quit) (THIS ) PURE; // Exits application and closes the open document.
	STDMETHOD_(HRESULT, ClientToWindow) (THIS_ int* pcx, int* pcy) PURE; // Converts client sizes into window sizes.
	STDMETHOD_(HRESULT, PutProperty) (THIS_ BSTR szProperty, VARIANT vtValue) PURE; // Associates vtValue with the name szProperty in the context of the object.
	STDMETHOD_(HRESULT, GetProperty) (THIS_ BSTR szProperty, VARIANT* pvtValue) PURE; // Retrieve the Associated value for the property vtValue in the context of the object.
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* pbstrName) PURE; // Returns name of the application.
	STDMETHOD_(HRESULT, Get_HWND) (THIS_ long* pHWND) PURE; // Returns the HWND of the current IE window.
	STDMETHOD_(HRESULT, Get_FullName) (THIS_ BSTR* pbstrFullName) PURE; // Returns file specification of the application, including path.
	STDMETHOD_(HRESULT, Get_Path) (THIS_ BSTR* pbstrPath) PURE; // Returns the path to the application.
	STDMETHOD_(HRESULT, Get_Visible) (THIS_ VARIANT_BOOL* pBool) PURE; // Determines whether the application is visible or hidden.
	STDMETHOD_(HRESULT, Set_Visible) (THIS_ VARIANT_BOOL pBool) PURE; // Determines whether the application is visible or hidden.
	STDMETHOD_(HRESULT, Get_StatusBar) (THIS_ VARIANT_BOOL* pBool) PURE; // Turn on or off the statusbar.
	STDMETHOD_(HRESULT, Set_StatusBar) (THIS_ VARIANT_BOOL pBool) PURE; // Turn on or off the statusbar.
	STDMETHOD_(HRESULT, Get_StatusText) (THIS_ BSTR* pbstr) PURE; // Text of Status window.
	STDMETHOD_(HRESULT, Set_StatusText) (THIS_ BSTR pbstr) PURE; // Text of Status window.
	STDMETHOD_(HRESULT, Get_ToolBar) (THIS_ int* pValue) PURE; // Controls which toolbar is shown.
	STDMETHOD_(HRESULT, Set_ToolBar) (THIS_ int pValue) PURE; // Controls which toolbar is shown.
	STDMETHOD_(HRESULT, Get_MenuBar) (THIS_ VARIANT_BOOL* Value) PURE; // Controls whether menubar is shown.
	STDMETHOD_(HRESULT, Set_MenuBar) (THIS_ VARIANT_BOOL Value) PURE; // Controls whether menubar is shown.
	STDMETHOD_(HRESULT, Get_FullScreen) (THIS_ VARIANT_BOOL* pbFullScreen) PURE; // Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.
	STDMETHOD_(HRESULT, Set_FullScreen) (THIS_ VARIANT_BOOL pbFullScreen) PURE; // Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.
#endif
	//IWebBrowser2 methods:
	STDMETHOD_(HRESULT, Navigate2) (THIS_ VARIANT* URL, VARIANT* Flags, VARIANT* TargetFrameName, VARIANT* PostData, VARIANT* Headers) PURE; // Navigates to a URL or file or pidl.
	STDMETHOD_(HRESULT, QueryStatusWB) (THIS_ OLECMDID cmdID, OLECMDF* pcmdf) PURE; // IOleCommandTarget::QueryStatus
	STDMETHOD_(HRESULT, ExecWB) (THIS_ OLECMDID cmdID, OLECMDEXECOPT cmdexecopt, VARIANT* pvaIn, VARIANT* pvaOut) PURE; // IOleCommandTarget::Exec
	STDMETHOD_(HRESULT, ShowBrowserBar) (THIS_ VARIANT* pvaClsid, VARIANT* pvarShow, VARIANT* pvarSize) PURE; // Set BrowserBar to Clsid
	STDMETHOD_(HRESULT, Get_ReadyState) (THIS_ tagREADYSTATE* plReadyState) PURE; 
	STDMETHOD_(HRESULT, Get_Offline) (THIS_ VARIANT_BOOL* pbOffline) PURE; // Controls if the frame is offline (read from cache)
	STDMETHOD_(HRESULT, Set_Offline) (THIS_ VARIANT_BOOL pbOffline) PURE; // Controls if the frame is offline (read from cache)
	STDMETHOD_(HRESULT, Get_Silent) (THIS_ VARIANT_BOOL* pbSilent) PURE; // Controls if any dialog boxes can be shown
	STDMETHOD_(HRESULT, Set_Silent) (THIS_ VARIANT_BOOL pbSilent) PURE; // Controls if any dialog boxes can be shown
	STDMETHOD_(HRESULT, Get_RegisterAsBrowser) (THIS_ VARIANT_BOOL* pbRegister) PURE; // Registers OC as a top-level browser (for target name resolution)
	STDMETHOD_(HRESULT, Set_RegisterAsBrowser) (THIS_ VARIANT_BOOL pbRegister) PURE; // Registers OC as a top-level browser (for target name resolution)
	STDMETHOD_(HRESULT, Get_RegisterAsDropTarget) (THIS_ VARIANT_BOOL* pbRegister) PURE; // Registers OC as a drop target for navigation
	STDMETHOD_(HRESULT, Set_RegisterAsDropTarget) (THIS_ VARIANT_BOOL pbRegister) PURE; // Registers OC as a drop target for navigation
	STDMETHOD_(HRESULT, Get_TheaterMode) (THIS_ VARIANT_BOOL* pbRegister) PURE; // Controls if the browser is in theater mode
	STDMETHOD_(HRESULT, Set_TheaterMode) (THIS_ VARIANT_BOOL pbRegister) PURE; // Controls if the browser is in theater mode
	STDMETHOD_(HRESULT, Get_AddressBar) (THIS_ VARIANT_BOOL* Value) PURE; // Controls whether address bar is shown
	STDMETHOD_(HRESULT, Set_AddressBar) (THIS_ VARIANT_BOOL Value) PURE; // Controls whether address bar is shown
};

typedef IWebBrowser2* LPWEBBROWSER2;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IWebBrowser2  {D30C1661-CDAF-11D0-8A3E-00C04FC9E26E}
// Web Browser Interface for IE4. [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIWebBrowser2Proxy : public TAutoProxy
{
public:
	TIWebBrowser2Proxy() : TAutoProxy(0x0) {}

	//GoBack: Navigates to the previous item in the history list.  [dispid 100]
	void GoBack();

	//GoForward: Navigates to the next item in the history list.  [dispid 101]
	void GoForward();

	//GoHome: Go home/start page.  [dispid 102]
	void GoHome();

	//GoSearch: Go Search Page.  [dispid 103]
	void GoSearch();

	//Navigate: Navigates to a URL or file.  [dispid 104]
	void Navigate(TAutoString URL, TAutoVal* Flags, TAutoVal* TargetFrameName, TAutoVal* PostData, TAutoVal* Headers);

	//Refresh: Refresh the currently viewed page.  [dispid -550]
	void Refresh();

	//Refresh2: Refresh the currently viewed page.  [dispid 105]
	void Refresh2(TAutoVal* Level);

	//Stop: Stops opening a file.  [dispid 106]
	void Stop();

	//Application: Returns the application automation object if accessible, this automation object otherwise..  [dispid 200]
	IDispatch* Application();

	//Parent: Returns the automation object of the container/parent if one exists or this automation object.  [dispid 201]
	IDispatch* Parent();

	//Container: Returns the container/parent automation object, if any.  [dispid 202]
	IDispatch* Container();

	//Document: Returns the active Document automation object, if any.  [dispid 203]
	IDispatch* Document();

	//TopLevelContainer: Returns True if this is the top level object.  [dispid 204]
	TBool TopLevelContainer();

	//Type: Returns the type of the contained document object.  [dispid 205]
	TAutoString Type();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	long Left();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	void Left(long arg0);

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	long Top();

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	void Top(long arg0);

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	long Width();

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	void Width(long arg0);

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	long Height();

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	void Height(long arg0);

	//LocationName: Gets the short (UI-friendly) name of the URL/file currently viewed.  [dispid 210]
	TAutoString LocationName();

	//LocationURL: Gets the full URL/path currently viewed.  [dispid 211]
	TAutoString LocationURL();

	//Busy: Query to see if something is still in progress.  [dispid 212]
	TBool Busy();

	//Quit: Exits application and closes the open document.  [dispid 300]
	void Quit();

	//ClientToWindow: Converts client sizes into window sizes.  [dispid 301]
	void ClientToWindow(int* pcx, int* pcy);

	//PutProperty: Associates vtValue with the name szProperty in the context of the object.  [dispid 302]
	void PutProperty(TAutoString szProperty, TAutoVal vtValue);

	//GetProperty: Retrieve the Associated value for the property vtValue in the context of the object.  [dispid 303]
	TAutoVal GetProperty(TAutoString szProperty);

	//Name: Returns name of the application.  [dispid 0]
	TAutoString Name();

	//HWND: Returns the HWND of the current IE window.  [dispid -515]
	long HWND();

	//FullName: Returns file specification of the application, including path.  [dispid 400]
	TAutoString FullName();

	//Path: Returns the path to the application.  [dispid 401]
	TAutoString Path();

	//Visible: Determines whether the application is visible or hidden.  [dispid 402]
	TBool Visible();

	//Visible: Determines whether the application is visible or hidden.  [dispid 402]
	void Visible(TBool arg0);

	//StatusBar: Turn on or off the statusbar.  [dispid 403]
	TBool StatusBar();

	//StatusBar: Turn on or off the statusbar.  [dispid 403]
	void StatusBar(TBool arg0);

	//StatusText: Text of Status window.  [dispid 404]
	TAutoString StatusText();

	//StatusText: Text of Status window.  [dispid 404]
	void StatusText(TAutoString arg0);

	//ToolBar: Controls which toolbar is shown.  [dispid 405]
	int ToolBar();

	//ToolBar: Controls which toolbar is shown.  [dispid 405]
	void ToolBar(int arg0);

	//MenuBar: Controls whether menubar is shown.  [dispid 406]
	TBool MenuBar();

	//MenuBar: Controls whether menubar is shown.  [dispid 406]
	void MenuBar(TBool arg0);

	//FullScreen: Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.  [dispid 407]
	TBool FullScreen();

	//FullScreen: Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.  [dispid 407]
	void FullScreen(TBool arg0);

	//Navigate2: Navigates to a URL or file or pidl.  [dispid 500]
	void Navigate2(TAutoVal* URL, TAutoVal* Flags, TAutoVal* TargetFrameName, TAutoVal* PostData, TAutoVal* Headers);

	//QueryStatusWB: IOleCommandTarget::QueryStatus  [dispid 501]
	OLECMDF QueryStatusWB(OLECMDID cmdID);

	//ExecWB: IOleCommandTarget::Exec  [dispid 502]
	void ExecWB(OLECMDID cmdID, OLECMDEXECOPT cmdexecopt, TAutoVal* pvaIn, TAutoVal* pvaOut);

	//ShowBrowserBar: Set BrowserBar to Clsid  [dispid 503]
	void ShowBrowserBar(TAutoVal* pvaClsid, TAutoVal* pvarShow, TAutoVal* pvarSize);

	//ReadyState:   [dispid -525]
	tagREADYSTATE ReadyState();

	//Offline: Controls if the frame is offline (read from cache)  [dispid 550]
	TBool Offline();

	//Offline: Controls if the frame is offline (read from cache)  [dispid 550]
	void Offline(TBool arg0);

	//Silent: Controls if any dialog boxes can be shown  [dispid 551]
	TBool Silent();

	//Silent: Controls if any dialog boxes can be shown  [dispid 551]
	void Silent(TBool arg0);

	//RegisterAsBrowser: Registers OC as a top-level browser (for target name resolution)  [dispid 552]
	TBool RegisterAsBrowser();

	//RegisterAsBrowser: Registers OC as a top-level browser (for target name resolution)  [dispid 552]
	void RegisterAsBrowser(TBool arg0);

	//RegisterAsDropTarget: Registers OC as a drop target for navigation  [dispid 553]
	TBool RegisterAsDropTarget();

	//RegisterAsDropTarget: Registers OC as a drop target for navigation  [dispid 553]
	void RegisterAsDropTarget(TBool arg0);

	//TheaterMode: Controls if the browser is in theater mode  [dispid 554]
	TBool TheaterMode();

	//TheaterMode: Controls if the browser is in theater mode  [dispid 554]
	void TheaterMode(TBool arg0);

	//AddressBar: Controls whether address bar is shown  [dispid 555]
	TBool AddressBar();

	//AddressBar: Controls whether address bar is shown  [dispid 555]
	void AddressBar(TBool arg0);
};

#endif

#ifdef __cplusplus
// IWebBrowser  {EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B}
// Web Browser interface [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIWebBrowserProxy : public TAutoProxy
{
public:
	TIWebBrowserProxy() : TAutoProxy(0x0) {}

	//GoBack: Navigates to the previous item in the history list.  [dispid 100]
	void GoBack();

	//GoForward: Navigates to the next item in the history list.  [dispid 101]
	void GoForward();

	//GoHome: Go home/start page.  [dispid 102]
	void GoHome();

	//GoSearch: Go Search Page.  [dispid 103]
	void GoSearch();

	//Navigate: Navigates to a URL or file.  [dispid 104]
	void Navigate(TAutoString URL, TAutoVal* Flags, TAutoVal* TargetFrameName, TAutoVal* PostData, TAutoVal* Headers);

	//Refresh: Refresh the currently viewed page.  [dispid -550]
	void Refresh();

	//Refresh2: Refresh the currently viewed page.  [dispid 105]
	void Refresh2(TAutoVal* Level);

	//Stop: Stops opening a file.  [dispid 106]
	void Stop();

	//Application: Returns the application automation object if accessible, this automation object otherwise..  [dispid 200]
	IDispatch* Application();

	//Parent: Returns the automation object of the container/parent if one exists or this automation object.  [dispid 201]
	IDispatch* Parent();

	//Container: Returns the container/parent automation object, if any.  [dispid 202]
	IDispatch* Container();

	//Document: Returns the active Document automation object, if any.  [dispid 203]
	IDispatch* Document();

	//TopLevelContainer: Returns True if this is the top level object.  [dispid 204]
	TBool TopLevelContainer();

	//Type: Returns the type of the contained document object.  [dispid 205]
	TAutoString Type();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	long Left();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	void Left(long arg0);

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	long Top();

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	void Top(long arg0);

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	long Width();

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	void Width(long arg0);

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	long Height();

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	void Height(long arg0);

	//LocationName: Gets the short (UI-friendly) name of the URL/file currently viewed.  [dispid 210]
	TAutoString LocationName();

	//LocationURL: Gets the full URL/path currently viewed.  [dispid 211]
	TAutoString LocationURL();

	//Busy: Query to see if something is still in progress.  [dispid 212]
	TBool Busy();
};

#endif

#ifdef __cplusplus
// IWebBrowserApp  {0002DF05-0000-0000-C000-000000000046}
// Web Browser Application Interface. [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIWebBrowserAppProxy : public TAutoProxy
{
public:
	TIWebBrowserAppProxy() : TAutoProxy(0x0) {}

	//GoBack: Navigates to the previous item in the history list.  [dispid 100]
	void GoBack();

	//GoForward: Navigates to the next item in the history list.  [dispid 101]
	void GoForward();

	//GoHome: Go home/start page.  [dispid 102]
	void GoHome();

	//GoSearch: Go Search Page.  [dispid 103]
	void GoSearch();

	//Navigate: Navigates to a URL or file.  [dispid 104]
	void Navigate(TAutoString URL, TAutoVal* Flags, TAutoVal* TargetFrameName, TAutoVal* PostData, TAutoVal* Headers);

	//Refresh: Refresh the currently viewed page.  [dispid -550]
	void Refresh();

	//Refresh2: Refresh the currently viewed page.  [dispid 105]
	void Refresh2(TAutoVal* Level);

	//Stop: Stops opening a file.  [dispid 106]
	void Stop();

	//Application: Returns the application automation object if accessible, this automation object otherwise..  [dispid 200]
	IDispatch* Application();

	//Parent: Returns the automation object of the container/parent if one exists or this automation object.  [dispid 201]
	IDispatch* Parent();

	//Container: Returns the container/parent automation object, if any.  [dispid 202]
	IDispatch* Container();

	//Document: Returns the active Document automation object, if any.  [dispid 203]
	IDispatch* Document();

	//TopLevelContainer: Returns True if this is the top level object.  [dispid 204]
	TBool TopLevelContainer();

	//Type: Returns the type of the contained document object.  [dispid 205]
	TAutoString Type();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	long Left();

	//Left: The horizontal position (pixels) of the frame window relative to the screen/container.  [dispid 206]
	void Left(long arg0);

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	long Top();

	//Top: The vertical position (pixels) of the frame window relative to the screen/container.  [dispid 207]
	void Top(long arg0);

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	long Width();

	//Width: The horizontal dimension (pixels) of the frame window/object.  [dispid 208]
	void Width(long arg0);

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	long Height();

	//Height: The vertical dimension (pixels) of the frame window/object.  [dispid 209]
	void Height(long arg0);

	//LocationName: Gets the short (UI-friendly) name of the URL/file currently viewed.  [dispid 210]
	TAutoString LocationName();

	//LocationURL: Gets the full URL/path currently viewed.  [dispid 211]
	TAutoString LocationURL();

	//Busy: Query to see if something is still in progress.  [dispid 212]
	TBool Busy();

	//Quit: Exits application and closes the open document.  [dispid 300]
	void Quit();

	//ClientToWindow: Converts client sizes into window sizes.  [dispid 301]
	void ClientToWindow(int* pcx, int* pcy);

	//PutProperty: Associates vtValue with the name szProperty in the context of the object.  [dispid 302]
	void PutProperty(TAutoString szProperty, TAutoVal vtValue);

	//GetProperty: Retrieve the Associated value for the property vtValue in the context of the object.  [dispid 303]
	TAutoVal GetProperty(TAutoString szProperty);

	//Name: Returns name of the application.  [dispid 0]
	TAutoString Name();

	//HWND: Returns the HWND of the current IE window.  [dispid -515]
	long HWND();

	//FullName: Returns file specification of the application, including path.  [dispid 400]
	TAutoString FullName();

	//Path: Returns the path to the application.  [dispid 401]
	TAutoString Path();

	//Visible: Determines whether the application is visible or hidden.  [dispid 402]
	TBool Visible();

	//Visible: Determines whether the application is visible or hidden.  [dispid 402]
	void Visible(TBool arg0);

	//StatusBar: Turn on or off the statusbar.  [dispid 403]
	TBool StatusBar();

	//StatusBar: Turn on or off the statusbar.  [dispid 403]
	void StatusBar(TBool arg0);

	//StatusText: Text of Status window.  [dispid 404]
	TAutoString StatusText();

	//StatusText: Text of Status window.  [dispid 404]
	void StatusText(TAutoString arg0);

	//ToolBar: Controls which toolbar is shown.  [dispid 405]
	int ToolBar();

	//ToolBar: Controls which toolbar is shown.  [dispid 405]
	void ToolBar(int arg0);

	//MenuBar: Controls whether menubar is shown.  [dispid 406]
	TBool MenuBar();

	//MenuBar: Controls whether menubar is shown.  [dispid 406]
	void MenuBar(TBool arg0);

	//FullScreen: Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.  [dispid 407]
	TBool FullScreen();

	//FullScreen: Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.  [dispid 407]
	void FullScreen(TBool arg0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IFolderViewOC
// Folder View Events Forwarder Object
// {9BA05970-F6A8-11CF-A442-00A0C90A8F39}

#undef  INTERFACE
#define INTERFACE IFolderViewOC

DECLARE_INTERFACE_(IFolderViewOC, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IFolderViewOC methods:
	STDMETHOD_(HRESULT, SetFolderView) (THIS_ IDispatch* pDisp) PURE; // Set the ShellFolderView object to monitor events of.
};

typedef IFolderViewOC* LPFOLDERVIEWOC;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IFolderViewOC  {9BA05970-F6A8-11CF-A442-00A0C90A8F39}
// Folder View Events Forwarder Object [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIFolderViewOCProxy : public TAutoProxy
{
public:
	TIFolderViewOCProxy() : TAutoProxy(0x0) {}

	//SetFolderView: Set the ShellFolderView object to monitor events of.  [dispid 1610743808]
	void SetFolderView(IDispatch* pDisp);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IShellWindows
// Definition of interface IShellWindows
// {85CB6900-4D95-11CF-960C-0080C7F4EE85}

#undef  INTERFACE
#define INTERFACE IShellWindows

DECLARE_INTERFACE_(IShellWindows, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IShellWindows methods:
	STDMETHOD_(HRESULT, Get_Count) (THIS_ long* plCount) PURE; // Get count of open Shell windows
	STDMETHOD_(HRESULT, Item) (THIS_ VARIANT index, IDispatch** ppid) PURE; // Return the figure for the given index
	STDMETHOD_(HRESULT, _NewEnum) (THIS_ IUnknown** ppunk) PURE; // Enumerates the figures
	STDMETHOD_(HRESULT, Register) (THIS_ IDispatch* pid, long HWND, int swClass, long* plCookie) PURE; // Register a window with the list
	STDMETHOD_(HRESULT, RegisterPending) (THIS_ long lThreadId, VARIANT* pvarloc, VARIANT* pvarlocRoot, int swClass, long* plCookie) PURE; // Register a pending open with the list
	STDMETHOD_(HRESULT, Revoke) (THIS_ long lCookie) PURE; // Remove a window from the list
	STDMETHOD_(HRESULT, OnNavigate) (THIS_ long lCookie, VARIANT* pvarloc) PURE; // Notifies the new location
	STDMETHOD_(HRESULT, OnActivated) (THIS_ long lCookie, VARIANT_BOOL fActive) PURE; // Notifies the activation
	STDMETHOD_(HRESULT, FindWindow) (THIS_ VARIANT* pvarloc, VARIANT* pvarlocRoot, int swClass, long* pHWND, int swfwOptions, IDispatch** ppdispOut) PURE; // Find the window based on the location
	STDMETHOD_(HRESULT, OnCreated) (THIS_ long lCookie, IUnknown* punk) PURE; // Notifies on creation and frame name set
	STDMETHOD_(HRESULT, ProcessAttachDetach) (THIS_ VARIANT_BOOL fAttach) PURE; // Used by IExplore to register different processes
};

typedef IShellWindows* LPSHELLWINDOWS;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IShellWindows  {85CB6900-4D95-11CF-960C-0080C7F4EE85}
// Definition of interface IShellWindows [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIShellWindowsProxy : public TAutoProxy
{
public:
	TIShellWindowsProxy() : TAutoProxy(0x0) {}

	//Count: Get count of open Shell windows  [dispid 1610743808]
	long Count();

	//Item: Return the figure for the given index  [dispid 0]
	IDispatch* Item(TAutoVal index);

	//_NewEnum: Enumerates the figures  [dispid -4]
	void _NewEnum(TAutoEnumerator<IUnknown*>& Obj);

	//Register: Register a window with the list  [dispid 1610743811]
	void Register(IDispatch* pid, long HWND, int swClass, long* plCookie);

	//RegisterPending: Register a pending open with the list  [dispid 1610743812]
	void RegisterPending(long lThreadId, TAutoVal* pvarloc, TAutoVal* pvarlocRoot, int swClass, long* plCookie);

	//Revoke: Remove a window from the list  [dispid 1610743813]
	void Revoke(long lCookie);

	//OnNavigate: Notifies the new location  [dispid 1610743814]
	void OnNavigate(long lCookie, TAutoVal* pvarloc);

	//OnActivated: Notifies the activation  [dispid 1610743815]
	void OnActivated(long lCookie, TBool fActive);

	//FindWindow: Find the window based on the location  [dispid 1610743816]
	IDispatch* FindWindow(TAutoVal* pvarloc, TAutoVal* pvarlocRoot, int swClass, long* pHWND, int swfwOptions);

	//OnCreated: Notifies on creation and frame name set  [dispid 1610743817]
	void OnCreated(long lCookie, IUnknown* punk);

	//ProcessAttachDetach: Used by IExplore to register different processes  [dispid 1610743818]
	void ProcessAttachDetach(TBool fAttach);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IShellFolderViewDual
// definition of interface IShellFolderViewDual
// {E7A1AF80-4D96-11CF-960C-0080C7F4EE85}

#undef  INTERFACE
#define INTERFACE IShellFolderViewDual

DECLARE_INTERFACE_(IShellFolderViewDual, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IShellFolderViewDual methods:
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppid) PURE; // Get Application object
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppid) PURE; // Get Parent object
	STDMETHOD_(HRESULT, Get_Folder) (THIS_ Folder** ppid) PURE; // Get the folder being viewed
	STDMETHOD_(HRESULT, SelectedItems) (THIS_ FolderItems** ppid) PURE; // The collection of Selected Items in folder
	STDMETHOD_(HRESULT, Get_FocusedItem) (THIS_ FolderItem** ppid) PURE; // The currently focused item in the folder
	STDMETHOD_(HRESULT, SelectItem) (THIS_ VARIANT* pvfi, int dwFlags) PURE; // Select the item
	STDMETHOD_(HRESULT, PopupItemMenu) (THIS_ FolderItem* pfi, VARIANT vx, VARIANT vy, BSTR* pbs) PURE; // Show items menu and return command selected
	STDMETHOD_(HRESULT, Get_Script) (THIS_ IDispatch** ppDisp) PURE; // Returns the scripting automation model.
	STDMETHOD_(HRESULT, Get_ViewOptions) (THIS_ long* plViewOptions) PURE; // Returns the view options for showing a folder.
};

typedef IShellFolderViewDual* LPSHELLFOLDERVIEWDUAL;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IShellFolderViewDual  {E7A1AF80-4D96-11CF-960C-0080C7F4EE85}
// definition of interface IShellFolderViewDual [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIShellFolderViewDualProxy : public TAutoProxy
{
public:
	TIShellFolderViewDualProxy() : TAutoProxy(0x0) {}

	//Application: Get Application object  [dispid 1610743808]
	IDispatch* Application();

	//Parent: Get Parent object  [dispid 1610743809]
	IDispatch* Parent();

	//_Folder: Get the folder being viewed  [dispid 1610743810]
	void _Folder(TFolderProxy& Obj);

	//SelectedItems: The collection of Selected Items in folder  [dispid 1610743811]
	void SelectedItems(TFolderItemsProxy& Obj);

	//FocusedItem: The currently focused item in the folder  [dispid 1610743812]
	void FocusedItem(TFolderItemProxy& Obj);

	//SelectItem: Select the item  [dispid 1610743813]
	void SelectItem(TAutoVal* pvfi, int dwFlags);

	//PopupItemMenu: Show items menu and return command selected  [dispid 1610743814]
	TAutoString PopupItemMenu(FolderItem* pfi, TAutoVal vx, TAutoVal vy);

	//Script: Returns the scripting automation model.  [dispid 1610743815]
	IDispatch* Script();

	//ViewOptions: Returns the view options for showing a folder.  [dispid 1610743816]
	long ViewOptions();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IShellDispatch
// Definition of interface IShellDispatch
// {D8F015C0-C278-11CE-A49E-444553540000}

#undef  INTERFACE
#define INTERFACE IShellDispatch

DECLARE_INTERFACE_(IShellDispatch, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IShellDispatch methods:
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppid) PURE; // Get Application object
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppid) PURE; // Get Parent object
	STDMETHOD_(HRESULT, NameSpace) (THIS_ VARIANT vDir, Folder** ppsdf) PURE; // Enum the contents of a folder
	STDMETHOD_(HRESULT, BrowseForFolder) (THIS_ long HWND, BSTR Title, long Options, VARIANT RootFolder, Folder** ppsdf) PURE; // Browse the name space for a Folder
	STDMETHOD_(HRESULT, Windows) (THIS_ IDispatch** ppid) PURE; // The collection of open folder windows
	STDMETHOD_(HRESULT, Open) (THIS_ VARIANT vDir) PURE; // Open a folder
	STDMETHOD_(HRESULT, Explore) (THIS_ VARIANT vDir) PURE; // Explore a folder
	STDMETHOD_(HRESULT, MinimizeAll) (THIS ) PURE; // Minimize all windows
	STDMETHOD_(HRESULT, UndoMinimizeALL) (THIS ) PURE; // Undo Minimize All
	STDMETHOD_(HRESULT, FileRun) (THIS ) PURE; // Bring up the file run
	STDMETHOD_(HRESULT, CascadeWindows) (THIS ) PURE; // Cascade Windows
	STDMETHOD_(HRESULT, TileVertically) (THIS ) PURE; // Tile windows vertically
	STDMETHOD_(HRESULT, TileHorizontally) (THIS ) PURE; // Tile windows horizontally
	STDMETHOD_(HRESULT, ShutdownWindows) (THIS ) PURE; // Exit Windows
	STDMETHOD_(HRESULT, Suspend) (THIS ) PURE; // Suspend the pc
	STDMETHOD_(HRESULT, EjectPC) (THIS ) PURE; // Eject the pc
	STDMETHOD_(HRESULT, SetTime) (THIS ) PURE; // Bring up the Set time dialog
	STDMETHOD_(HRESULT, TrayProperties) (THIS ) PURE; // Handle Tray properties
	STDMETHOD_(HRESULT, Help) (THIS ) PURE; // Display shell help
	STDMETHOD_(HRESULT, FindFiles) (THIS ) PURE; // Find Files
	STDMETHOD_(HRESULT, FindComputer) (THIS ) PURE; // Find a computer
	STDMETHOD_(HRESULT, RefreshMenu) (THIS ) PURE; // Refresh the menu
	STDMETHOD_(HRESULT, ControlPanelItem) (THIS_ BSTR szDir) PURE; // Run a controlpanelItem
};

typedef IShellDispatch* LPSHELLDISPATCH;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IShellDispatch  {D8F015C0-C278-11CE-A49E-444553540000}
// Definition of interface IShellDispatch [flags: TYPEFLAG_FHIDDEN TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIShellDispatchProxy : public TAutoProxy
{
public:
	TIShellDispatchProxy() : TAutoProxy(0x0) {}

	//Application: Get Application object  [dispid 1610743808]
	IDispatch* Application();

	//Parent: Get Parent object  [dispid 1610743809]
	IDispatch* Parent();

	//NameSpace: Enum the contents of a folder  [dispid 1610743810]
	void NameSpace(TFolderProxy& Obj, TAutoVal vDir);

	//BrowseForFolder: Browse the name space for a Folder  [dispid 1610743811]
	void BrowseForFolder(TFolderProxy& Obj, long HWND, TAutoString Title, long Options, TAutoVal RootFolder);

	//Windows: The collection of open folder windows  [dispid 1610743812]
	IDispatch* Windows();

	//Open: Open a folder  [dispid 1610743813]
	void Open(TAutoVal vDir);

	//Explore: Explore a folder  [dispid 1610743814]
	void Explore(TAutoVal vDir);

	//MinimizeAll: Minimize all windows  [dispid 1610743815]
	void MinimizeAll();

	//UndoMinimizeALL: Undo Minimize All  [dispid 1610743816]
	void UndoMinimizeALL();

	//FileRun: Bring up the file run  [dispid 1610743817]
	void FileRun();

	//CascadeWindows: Cascade Windows  [dispid 1610743818]
	void CascadeWindows();

	//TileVertically: Tile windows vertically  [dispid 1610743819]
	void TileVertically();

	//TileHorizontally: Tile windows horizontally  [dispid 1610743820]
	void TileHorizontally();

	//ShutdownWindows: Exit Windows  [dispid 1610743821]
	void ShutdownWindows();

	//Suspend: Suspend the pc  [dispid 1610743822]
	void Suspend();

	//EjectPC: Eject the pc  [dispid 1610743823]
	void EjectPC();

	//SetTime: Bring up the Set time dialog  [dispid 1610743824]
	void SetTime();

	//TrayProperties: Handle Tray properties  [dispid 1610743825]
	void TrayProperties();

	//Help: Display shell help  [dispid 1610743826]
	void Help();

	//FindFiles: Find Files  [dispid 1610743827]
	void FindFiles();

	//FindComputer: Find a computer  [dispid 1610743828]
	void FindComputer();

	//RefreshMenu: Refresh the menu  [dispid 1610743829]
	void RefreshMenu();

	//ControlPanelItem: Run a controlpanelItem  [dispid 1610743830]
	void ControlPanelItem(TAutoString szDir);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IShellUIHelper
// Shell UI Helper Control Interface
// {FF0A10E0-C636-11D0-9542-00609797EA4F}

#undef  INTERFACE
#define INTERFACE IShellUIHelper

DECLARE_INTERFACE_(IShellUIHelper, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IShellUIHelper methods:
	STDMETHOD_(HRESULT, Execute) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ResetFirstBootMode) (THIS ) PURE; 
	STDMETHOD_(HRESULT, ResetSafeMode) (THIS ) PURE; 
	STDMETHOD_(HRESULT, RefreshOfflineDesktop) (THIS ) PURE; 
	STDMETHOD_(HRESULT, AddFavorite) (THIS_ BSTR strURL, VARIANT* Title) PURE; 
	STDMETHOD_(HRESULT, AddChannel) (THIS_ BSTR strURL, BSTR strTitle, VARIANT* update) PURE; 
	STDMETHOD_(HRESULT, AddDesktopComponent) (THIS_ BSTR strURL, BSTR strType, VARIANT* Left, VARIANT* Top, VARIANT* Width, VARIANT* Height) PURE; 
};

typedef IShellUIHelper* LPSHELLUIHELPER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IShellUIHelper  {FF0A10E0-C636-11D0-9542-00609797EA4F}
// Shell UI Helper Control Interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIShellUIHelperProxy : public TAutoProxy
{
public:
	TIShellUIHelperProxy() : TAutoProxy(0x0) {}

	//Execute:   [dispid 1]
	void Execute();

	//ResetFirstBootMode:   [dispid 2]
	void ResetFirstBootMode();

	//ResetSafeMode:   [dispid 3]
	void ResetSafeMode();

	//RefreshOfflineDesktop:   [dispid 4]
	void RefreshOfflineDesktop();

	//AddFavorite:   [dispid 5]
	void AddFavorite(TAutoString strURL, TAutoVal* Title);

	//AddChannel:   [dispid 6]
	void AddChannel(TAutoString strURL, TAutoString strTitle, TAutoVal* update);

	//AddDesktopComponent:   [dispid 7]
	void AddDesktopComponent(TAutoString strURL, TAutoString strType, TAutoVal* Left, TAutoVal* Top, TAutoVal* Width, TAutoVal* Height);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// FolderItem
// Definition of interface FolderItem
// {FAC32C80-CBE4-11CE-8350-444553540000}

#undef  INTERFACE
#define INTERFACE FolderItem

DECLARE_INTERFACE_(FolderItem, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//FolderItem methods:
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppid) PURE; // Get Application object
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppid) PURE; // Get Parent object
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* pbs) PURE; // Get display name for item
	STDMETHOD_(HRESULT, Set_Name) (THIS_ BSTR pbs) PURE; // Get display name for item
	STDMETHOD_(HRESULT, Get_Path) (THIS_ BSTR* pbs) PURE; // Get the pathname to the item
	STDMETHOD_(HRESULT, Get_GetLink) (THIS_ IDispatch** ppid) PURE; // If item is link return link object
	STDMETHOD_(HRESULT, Get_GetFolder) (THIS_ IDispatch** ppid) PURE; // If item is a folder return folder object
	STDMETHOD_(HRESULT, Get_IsLink) (THIS_ VARIANT_BOOL* pb) PURE; // Is the item a link?
	STDMETHOD_(HRESULT, Get_IsFolder) (THIS_ VARIANT_BOOL* pb) PURE; // Is the item a Folder?
	STDMETHOD_(HRESULT, Get_IsFileSystem) (THIS_ VARIANT_BOOL* pb) PURE; // Is the item a file system object?
	STDMETHOD_(HRESULT, Get_IsBrowsable) (THIS_ VARIANT_BOOL* pb) PURE; // Is the item browsable?
	STDMETHOD_(HRESULT, Get_ModifyDate) (THIS_ DATE* pdt) PURE; // Modification Date?
	STDMETHOD_(HRESULT, Set_ModifyDate) (THIS_ DATE pdt) PURE; // Modification Date?
	STDMETHOD_(HRESULT, Get_Size) (THIS_ long* pul) PURE; // Size
	STDMETHOD_(HRESULT, Get_Type) (THIS_ BSTR* pbs) PURE; // Type
	STDMETHOD_(HRESULT, Verbs) (THIS_ FolderItemVerbs** ppfic) PURE; // Get the list of verbs for the object
	STDMETHOD_(HRESULT, InvokeVerb) (THIS_ VARIANT vVerb) PURE; // Execute a command on the item
};

typedef FolderItem* LPOLDERITEM;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// FolderItem  {FAC32C80-CBE4-11CE-8350-444553540000}
// Definition of interface FolderItem [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TFolderItemProxy : public TAutoProxy
{
public:
	TFolderItemProxy() : TAutoProxy(0x0) {}

	//Application: Get Application object  [dispid 1610743808]
	IDispatch* Application();

	//Parent: Get Parent object  [dispid 1610743809]
	IDispatch* Parent();

	//Name: Get display name for item  [dispid 0]
	TAutoString Name();

	//Name: Get display name for item  [dispid 0]
	void Name(TAutoString arg0);

	//Path: Get the pathname to the item  [dispid 1610743812]
	TAutoString Path();

	//GetLink: If item is link return link object  [dispid 1610743813]
	IDispatch* GetLink();

	//GetFolder: If item is a folder return folder object  [dispid 1610743814]
	IDispatch* GetFolder();

	//IsLink: Is the item a link?  [dispid 1610743815]
	TBool IsLink();

	//IsFolder: Is the item a Folder?  [dispid 1610743816]
	TBool IsFolder();

	//IsFileSystem: Is the item a file system object?  [dispid 1610743817]
	TBool IsFileSystem();

	//IsBrowsable: Is the item browsable?  [dispid 1610743818]
	TBool IsBrowsable();

	//ModifyDate: Modification Date?  [dispid 1610743819]
	TAutoDate ModifyDate();

	//ModifyDate: Modification Date?  [dispid 1610743819]
	void ModifyDate(TAutoDate arg0);

	//Size: Size  [dispid 1610743821]
	long Size();

	//Type: Type  [dispid 1610743822]
	TAutoString Type();

	//Verbs: Get the list of verbs for the object  [dispid 1610743823]
	void Verbs(TFolderItemVerbsProxy& Obj);

	//InvokeVerb: Execute a command on the item  [dispid 1610743824]
	void InvokeVerb(TAutoVal vVerb);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// FolderItemVerbs
// Definition of interface FolderItemVerbs
// {1F8352C0-50B0-11CF-960C-0080C7F4EE85}

#undef  INTERFACE
#define INTERFACE FolderItemVerbs

DECLARE_INTERFACE_(FolderItemVerbs, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//FolderItemVerbs methods:
	STDMETHOD_(HRESULT, Get_Count) (THIS_ long* plCount) PURE; // Get count of open folder windows
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppid) PURE; // Get Application object
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppid) PURE; // Get Parent object
	STDMETHOD_(HRESULT, Item) (THIS_ VARIANT index, FolderItemVerb** ppid) PURE; // Return the specified verb
	STDMETHOD_(HRESULT, _NewEnum) (THIS_ IUnknown** ppunk) PURE; // Enumerates the figures
};

typedef FolderItemVerbs* LPOLDERITEMVERBS;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// FolderItemVerbs  {1F8352C0-50B0-11CF-960C-0080C7F4EE85}
// Definition of interface FolderItemVerbs [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TFolderItemVerbsProxy : public TAutoProxy
{
public:
	TFolderItemVerbsProxy() : TAutoProxy(0x0) {}

	//Count: Get count of open folder windows  [dispid 1610743808]
	long Count();

	//Application: Get Application object  [dispid 1610743809]
	IDispatch* Application();

	//Parent: Get Parent object  [dispid 1610743810]
	IDispatch* Parent();

	//Item: Return the specified verb  [dispid 1610743811]
	void Item(TFolderItemVerbProxy& Obj, TAutoVal index);

	//_NewEnum: Enumerates the figures  [dispid -4]
	void _NewEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// FolderItems
// Definition of interface FolderItems
// {744129E0-CBE5-11CE-8350-444553540000}

#undef  INTERFACE
#define INTERFACE FolderItems

DECLARE_INTERFACE_(FolderItems, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//FolderItems methods:
	STDMETHOD_(HRESULT, Get_Count) (THIS_ long* plCount) PURE; // Get count of items in the folder
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppid) PURE; // Get Application object
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppid) PURE; // Get Parent object
	STDMETHOD_(HRESULT, Item) (THIS_ VARIANT index, FolderItem** ppid) PURE; // Return the figure for the given index
	STDMETHOD_(HRESULT, _NewEnum) (THIS_ IUnknown** ppunk) PURE; // Enumerates the figures
};

typedef FolderItems* LPOLDERITEMS;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// FolderItems  {744129E0-CBE5-11CE-8350-444553540000}
// Definition of interface FolderItems [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TFolderItemsProxy : public TAutoProxy
{
public:
	TFolderItemsProxy() : TAutoProxy(0x0) {}

	//Count: Get count of items in the folder  [dispid 1610743808]
	long Count();

	//Application: Get Application object  [dispid 1610743809]
	IDispatch* Application();

	//Parent: Get Parent object  [dispid 1610743810]
	IDispatch* Parent();

	//Item: Return the figure for the given index  [dispid 1610743811]
	void Item(TFolderItemProxy& Obj, TAutoVal index);

	//_NewEnum: Enumerates the figures  [dispid -4]
	void _NewEnum(TAutoEnumerator<IUnknown*>& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// Folder
// Definition of interface Folder
// {BBCBDE60-C3FF-11CE-8350-444553540000}

#undef  INTERFACE
#define INTERFACE Folder

DECLARE_INTERFACE_(Folder, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//Folder methods:
	STDMETHOD_(HRESULT, Get_Title) (THIS_ BSTR* pbs) PURE; // Get the display name for the window
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppid) PURE; // Get Application object
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppid) PURE; // Get Parent object
	STDMETHOD_(HRESULT, Get_ParentFolder) (THIS_ Folder** ppsf) PURE; // Get Parent object
	STDMETHOD_(HRESULT, Items) (THIS_ FolderItems** ppid) PURE; // The collection of Items in folder
	STDMETHOD_(HRESULT, ParseName) (THIS_ BSTR bName, FolderItem** ppid) PURE; // Parse the name to get an item.
	STDMETHOD_(HRESULT, NewFolder) (THIS_ BSTR bName, VARIANT vOptions) PURE; // Create a new sub folder in this folder.
	STDMETHOD_(HRESULT, MoveHere) (THIS_ VARIANT vItem, VARIANT vOptions) PURE; // Move Items to this folder.
	STDMETHOD_(HRESULT, CopyHere) (THIS_ VARIANT vItem, VARIANT vOptions) PURE; // Copy Items to this folder.
	STDMETHOD_(HRESULT, GetDetailsOf) (THIS_ VARIANT vItem, int iColumn, BSTR* pbs) PURE; // Get the details about an item.
};

typedef Folder* LPOLDER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// Folder  {BBCBDE60-C3FF-11CE-8350-444553540000}
// Definition of interface Folder [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TFolderProxy : public TAutoProxy
{
public:
	TFolderProxy() : TAutoProxy(0x0) {}

	//Title: Get the display name for the window  [dispid 0]
	TAutoString Title();

	//Application: Get Application object  [dispid 1610743809]
	IDispatch* Application();

	//Parent: Get Parent object  [dispid 1610743810]
	IDispatch* Parent();

	//ParentFolder: Get Parent object  [dispid 1610743811]
	void ParentFolder(TFolderProxy& Obj);

	//Items: The collection of Items in folder  [dispid 1610743812]
	void Items(TFolderItemsProxy& Obj);

	//ParseName: Parse the name to get an item.  [dispid 1610743813]
	void ParseName(TFolderItemProxy& Obj, TAutoString bName);

	//NewFolder: Create a new sub folder in this folder.  [dispid 1610743814]
	void NewFolder(TAutoString bName, TAutoVal vOptions);

	//MoveHere: Move Items to this folder.  [dispid 1610743815]
	void MoveHere(TAutoVal vItem, TAutoVal vOptions);

	//CopyHere: Copy Items to this folder.  [dispid 1610743816]
	void CopyHere(TAutoVal vItem, TAutoVal vOptions);

	//GetDetailsOf: Get the details about an item.  [dispid 1610743817]
	TAutoString GetDetailsOf(TAutoVal vItem, int iColumn);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// FolderItemVerb
// Definition of interface FolderItemVerb
// {08EC3E00-50B0-11CF-960C-0080C7F4EE85}

#undef  INTERFACE
#define INTERFACE FolderItemVerb

DECLARE_INTERFACE_(FolderItemVerb, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//FolderItemVerb methods:
	STDMETHOD_(HRESULT, Get_Application) (THIS_ IDispatch** ppid) PURE; // Get Application object
	STDMETHOD_(HRESULT, Get_Parent) (THIS_ IDispatch** ppid) PURE; // Get Parent object
	STDMETHOD_(HRESULT, Get_Name) (THIS_ BSTR* pbs) PURE; // Get display name for item
	STDMETHOD_(HRESULT, DoIt) (THIS ) PURE; // Execute the verb
};

typedef FolderItemVerb* LPOLDERITEMVERB;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// FolderItemVerb  {08EC3E00-50B0-11CF-960C-0080C7F4EE85}
// Definition of interface FolderItemVerb [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TFolderItemVerbProxy : public TAutoProxy
{
public:
	TFolderItemVerbProxy() : TAutoProxy(0x0) {}

	//Application: Get Application object  [dispid 1610743808]
	IDispatch* Application();

	//Parent: Get Parent object  [dispid 1610743809]
	IDispatch* Parent();

	//Name: Get display name for item  [dispid 0]
	TAutoString Name();

	//DoIt: Execute the verb  [dispid 1610743811]
	void DoIt();
};

#endif

// CommandStateChangeConstants
// Constants for WebBrowser CommandStateChange
typedef enum tagCommandStateChangeConstants
{
	CSC_UPDATECOMMANDS = -1, // Command Change
	CSC_NAVIGATEFORWARD = 1, // Navigate Forward
	CSC_NAVIGATEBACK = 2, // Navigate Back
} CommandStateChangeConstants;

// ShellWindowTypeConstants
// Constants for ShellWindows registration
typedef enum tagShellWindowTypeConstants
{
	SWC_EXPLORER = 0, // Explorer
	SWC_BROWSER = 1, // Various Browsing Windows
	SWC_3RDPARTY = 2, // 3rd Party Browsers
	SWC_CALLBACK = 4, // Creation Callback
} ShellWindowTypeConstants;

// ShellWindowFindWindowOptions
// Options for ShellWindows FindWindow
typedef enum tagShellWindowFindWindowOptions
{
	SWFO_NEEDDISPATCH = 1, // Need Dispatch
	SWFO_INCLUDEPENDING = 2, // Include Pending
	SWFO_COOKIEPASSED = 4, // Cookie Passed
} ShellWindowFindWindowOptions;

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IShellLinkDual
// Definition of Shell Link IDispatch interface
// {88A05C00-F000-11CE-8350-444553540000}

#undef  INTERFACE
#define INTERFACE IShellLinkDual

DECLARE_INTERFACE_(IShellLinkDual, IDispatch)
{
#ifndef __cplusplus
	//IUnknown methods:
	STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
	STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
	STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
	//IDispatch methods:
	STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
	STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
	STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
	STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
	//IShellLinkDual methods:
	STDMETHOD_(HRESULT, Get_Path) (THIS_ BSTR* pbs) PURE; // Get the path of the link
	STDMETHOD_(HRESULT, Set_Path) (THIS_ BSTR pbs) PURE; // Get the path of the link
	STDMETHOD_(HRESULT, Get_Description) (THIS_ BSTR* pbs) PURE; // Get the description for the link
	STDMETHOD_(HRESULT, Set_Description) (THIS_ BSTR pbs) PURE; // Get the description for the link
	STDMETHOD_(HRESULT, Get_WorkingDirectory) (THIS_ BSTR* pbs) PURE; // Get the working directory for the link
	STDMETHOD_(HRESULT, Set_WorkingDirectory) (THIS_ BSTR pbs) PURE; // Get the working directory for the link
	STDMETHOD_(HRESULT, Get_Arguments) (THIS_ BSTR* pbs) PURE; // Get the arguments for the link
	STDMETHOD_(HRESULT, Set_Arguments) (THIS_ BSTR pbs) PURE; // Get the arguments for the link
	STDMETHOD_(HRESULT, Get_Hotkey) (THIS_ int* piHK) PURE; // Get the Hotkey for the link
	STDMETHOD_(HRESULT, Set_Hotkey) (THIS_ int piHK) PURE; // Get the Hotkey for the link
	STDMETHOD_(HRESULT, Get_ShowCommand) (THIS_ int* piShowCommand) PURE; // Get the Show Command for the link
	STDMETHOD_(HRESULT, Set_ShowCommand) (THIS_ int piShowCommand) PURE; // Get the Show Command for the link
	STDMETHOD_(HRESULT, Resolve) (THIS_ int fFlags) PURE; // Tell the link to resolve itself
	STDMETHOD_(HRESULT, GetIconLocation) (THIS_ BSTR* pbs, int* piIcon) PURE; // Get the IconLocation for the link
	STDMETHOD_(HRESULT, SetIconLocation) (THIS_ BSTR bs, int iIcon) PURE; // Set the IconLocation for the link
	STDMETHOD_(HRESULT, Save) (THIS_ VARIANT vWhere) PURE; // Tell the link to save the changes
};

typedef IShellLinkDual* LPSHELLLINKDUAL;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IShellLinkDual  {88A05C00-F000-11CE-8350-444553540000}
// Definition of Shell Link IDispatch interface [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIShellLinkDualProxy : public TAutoProxy
{
public:
	TIShellLinkDualProxy() : TAutoProxy(0x0) {}

	//Path: Get the path of the link  [dispid 1610743808]
	TAutoString Path();

	//Path: Get the path of the link  [dispid 1610743808]
	void Path(TAutoString arg0);

	//Description: Get the description for the link  [dispid 1610743810]
	TAutoString Description();

	//Description: Get the description for the link  [dispid 1610743810]
	void Description(TAutoString arg0);

	//WorkingDirectory: Get the working directory for the link  [dispid 1610743812]
	TAutoString WorkingDirectory();

	//WorkingDirectory: Get the working directory for the link  [dispid 1610743812]
	void WorkingDirectory(TAutoString arg0);

	//Arguments: Get the arguments for the link  [dispid 1610743814]
	TAutoString Arguments();

	//Arguments: Get the arguments for the link  [dispid 1610743814]
	void Arguments(TAutoString arg0);

	//Hotkey: Get the Hotkey for the link  [dispid 1610743816]
	int Hotkey();

	//Hotkey: Get the Hotkey for the link  [dispid 1610743816]
	void Hotkey(int arg0);

	//ShowCommand: Get the Show Command for the link  [dispid 1610743818]
	int ShowCommand();

	//ShowCommand: Get the Show Command for the link  [dispid 1610743818]
	void ShowCommand(int arg0);

	//Resolve: Tell the link to resolve itself  [dispid 1610743820]
	void Resolve(int fFlags);

	//GetIconLocation: Get the IconLocation for the link  [dispid 1610743821]
	int GetIconLocation(BSTR* pbs);

	//SetIconLocation: Set the IconLocation for the link  [dispid 1610743822]
	void SetIconLocation(TAutoString bs, int iIcon);

	//Save: Tell the link to save the changes  [dispid 1610743823]
	void Save(TAutoVal vWhere);
};

#endif

// ShellFolderViewOptions
// Constants for ViewOptions
typedef enum tagShellFolderViewOptions
{
	SFVVO_SHOWALLOBJECTS = 1, // Show All Objects
	SFVVO_SHOWEXTENSIONS = 2, // Show File Extensions
	SFVVO_SHOWCOMPCOLOR = 8, // Color encode Compressed files
	SFVVO_SHOWSYSFILES = 32, // Show System Files
	SFVVO_NOWEBVIEW = 64, // Has Web View been disabled
	SFVVO_DOUBLECLICKINWEBVIEW = 128, // User needs to double click in web View
	SFVVO_DESKTOPHTML = 512, // Is Desktop HTML enabled
	SFVVO_WIN95CLASSIC = 1024, // Machine is running in Windows 95 mode
} ShellFolderViewOptions;

// ShellSpecialFolderConstants
// Constants for Special Folders for open/Explore
typedef enum tagShellSpecialFolderConstants
{
	ssfDESKTOP = 0, // Special Folder DESKTOP
	ssfPROGRAMS = 2, // Special Folder PROGRAMS
	ssfCONTROLS = 3, // Special Folder CONTROLS
	ssfPRINTERS = 4, // Special Folder PRINTERS
	ssfPERSONAL = 5, // Special Folder PERSONAL
	ssfFAVORITES = 6, // Special Folder FAVORITES
	ssfSTARTUP = 7, // Special Folder STARTUP
	ssfRECENT = 8, // Special Folder RECENT
	ssfSENDTO = 9, // Special Folder SENDTO
	ssfBITBUCKET = 10, // Special Folder BITBUCKET
	ssfSTARTMENU = 11, // Special Folder STARTMENU
	ssfDESKTOPDIRECTORY = 16, // Special Folder DESKTOPDIRECTORY
	ssfDRIVES = 17, // Special Folder DRIVES
	ssfNETWORK = 18, // Special Folder NETWORK
	ssfNETHOOD = 19, // Special Folder NETHOOD
	ssfFONTS = 20, // Special Folder FONTS
	ssfTEMPLATES = 21, // Special Folder TEMPLATES
} ShellSpecialFolderConstants;

#ifndef RC_INVOKED
#pragma pack()
#endif  /* !RC_INVOKED */

#ifdef __BORLANDC__
#include <poppack.h>
#endif


#endif
