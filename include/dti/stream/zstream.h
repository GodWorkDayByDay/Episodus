/* zstream.h -- interface of the zstream clases
  version 1.0.0, May 11th, 2002
  Author:	Ralf Mattethat

  This library uses the zlib library version 1.1.4 (www.zlib.org)
  
  The classes adapts a stream into an other stream compressing/uncompressing the data.

Copyright (c) 2005 by the Danish Technological Institute.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/*
TO DO:
* work out a way to make wchar_t streams work
*/

#ifndef ZSTREAM_H_20020511
#define ZSTREAM_H_20020511

#include <iostream>
#include "streambufImpl.h"
#include "stream_autolib.h"

namespace dti
{

	namespace stream
	{

#ifndef ZCOMPRESS
#define ZCOMPRESS

		enum Level { None=0, SuperFast=1, Fast=2, Normal=6, Maximum=9, Default=-1 };

#endif

		class zstreambuf : public detail::streambuf_impl<std::char_traits<char>, detail::shared_buffer<char> >
		{
		public:
			typedef std::char_traits<char>	traits_type;
			typedef traits_type::char_type	char_type;
			typedef traits_type::int_type	int_type;
			typedef traits_type::pos_type	pos_type;
			typedef traits_type::off_type	off_type;

			explicit zstreambuf( std::basic_streambuf<char, std::char_traits<char> >& s , Level l=Default );

		private:
			zstreambuf( const zstreambuf& s );
			zstreambuf& operator= ( const zstreambuf& s );
		};
			
		class izstream : public std::basic_istream<char, std::char_traits<char> >
		{
		public:
			typedef std::char_traits<char>	traits_type;
			typedef traits_type::char_type	char_type;
			typedef traits_type::int_type	int_type;
			typedef traits_type::pos_type	pos_type;
			typedef traits_type::off_type	off_type;

			explicit izstream( std::istream& is ) : std::basic_istream<char, std::char_traits<char> >( 0 ), zbuf( *is.rdbuf() )
			{
				try
				{
					init( &zbuf );
					clear( is.rdstate() );
					copyfmt( is );
				}
				catch( ... )
				{
					setstate( badbit );
				}
			}

			zstreambuf* rdbuf() const	{ return const_cast<zstreambuf*>( &zbuf ); }

		private:
			zstreambuf zbuf;
		};

		class ozstream : public std::basic_ostream<char, std::char_traits<char> >
		{
		public:
			typedef std::char_traits<char>	traits_type;
			typedef traits_type::char_type	char_type;
			typedef traits_type::int_type	int_type;
			typedef traits_type::pos_type	pos_type;
			typedef traits_type::off_type	off_type;

			explicit ozstream( std::ostream& os, Level l=Default ) : std::basic_ostream<char, std::char_traits<char> >( 0 ), zbuf( *os.rdbuf(), l ) 
			{
				try
				{
					init( &zbuf );
					clear( os.rdstate() );
					copyfmt( os );
				}
				catch( ... )
				{
					setstate( badbit );
				}
			}

			zstreambuf* rdbuf() const	{ return const_cast<zstreambuf*>( &zbuf ); }

		private:
			zstreambuf zbuf;
		};

	}	// namespace stream

}	// namespace dti

#endif // ZSTREAM_H_20020511
