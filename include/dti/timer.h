/* timer.h -- implementation of a precise timer for measurment for short time periodes.
  version 1.0.0, June 9th, 2004
  Author:	Ralf Mattethat
  e-mail:	ralf.mattethat@teknologisk.dk

Copyright (c) 2005 by the Danish Technological Institute.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef TIMER_H_20040609
#define TIMER_H_20040609

/*
	The timer class has methods like a stop watch to measure elapsed time. 
	Besides the methods start(), stop(), elapsed() and reset to measure elapsed 
	time the class also has methods mean() and var() to return the mean time and 
	the variance if the it is started several times between resets.

	Typical use:
		dti::timer t;
		t.start()
		...
		t.stop()
		std::cout << t.elapsed();

 	Implementation:
	timer uses the win32 performance counter giving it a very high accuracy.
	All methods are executed in constant time and no exceptions are thrown.
*/

#include <windows.h>

namespace dti
{

	class timer
	{
	public:
		timer() { reset(); }

		// reset the timer
		void reset()
		{
			m_n = 0, m_Sum = 0, m_SqrSum = 0, m_bIsTiming = false;
		}

		// start the timer
		void start()
		{
			m_bIsTiming = true;
			QueryPerformanceCounter( &m_startime );
		}

		//stop the timer
		void stop()
		{
			if( m_bIsTiming )
			{
				LARGE_INTEGER endTime;

				QueryPerformanceCounter( &endTime );
				m_n++;
				LONGLONG time = endTime.QuadPart - m_startime.QuadPart;
				m_Sum += time;
				m_SqrSum += time*time;
				m_bIsTiming = false;
			}
		}

		// return the elapsed time in seconds
		long double elapsed() const 
		{
			long double res = 0.0;

			LARGE_INTEGER resolution;

			QueryPerformanceFrequency( &resolution );

			res = static_cast<long double>( m_Sum );
			res /= resolution.QuadPart;

			return res;
		}

		// return the average time in seconds
		long double mean() const
		{
			long double res = 0.0;

			LARGE_INTEGER resolution;

			QueryPerformanceFrequency( &resolution );

			if( m_n != 0 )
			{
				res = static_cast<long double>( m_Sum ) / m_n;
				res /= resolution.QuadPart;

			}
			return res;
		}

		// return the variance time in seconds^2
		long double var() const
		{
			long double res = 0.0;

			LARGE_INTEGER resolution;

			QueryPerformanceFrequency( &resolution );

			if( m_n != 0 )
			{
				res = static_cast<long double>( m_SqrSum - m_Sum*m_Sum ) / m_n;
				res /= resolution.QuadPart;
				res /= resolution.QuadPart;

			}
			return res;
		}

		// combine two timers
		timer& operator += ( const timer& rhs )
		{
			m_n      += rhs.m_n;
			m_Sum    += rhs.m_Sum;
			m_SqrSum += rhs.m_SqrSum;
		
			return *this;
		}

	private:
		int m_n;
		LONGLONG m_Sum;
		LONGLONG m_SqrSum;
		LARGE_INTEGER m_startime;
		bool m_bIsTiming;
	};

	inline timer operator + ( const timer& lhs, const timer& rhs )
	{
		timer t( lhs );
		t += rhs;
		return t;
	}

}	// namespace dti

#endif	// TIMER_H_20040609
