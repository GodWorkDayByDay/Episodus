// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.96.1.40  $
// File generated on 28/09/2008 14:46:57 from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\Program Files\Fichiers communs\Adobe\Acrobat\ActiveX\AcroPDF.dll
// IID\LCID: {05BFD3F1-6319-4F30-B752-C7A22889BCC4}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
//   (2) v4.0 StdVCL, (C:\WINDOWS\system32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __AcroPDFLib_TLB_h__
#define   __AcroPDFLib_TLB_h__

#pragma option push -b -w-inl

#include <vcl/utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0102)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
// NOTE: If the following error is triggered, you probably need to     
//       get a patch to the TLIBIMP.EXE utility or the C++Builder IDE. 
//       Patches/updates are posted on the Borland Website.            
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

namespace Acropdflib_tlb
{

// *********************************************************************//
// HelpString: Adobe Acrobat Browser Control Type Library 1.0
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern const GUID LIBID_AcroPDFLib;
extern const GUID DIID__IAcroAXDocShimEvents;
extern const GUID IID_IAcroAXDocShim;
extern const GUID CLSID_AcroPDF;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{E790E1D1-9DE8-4853-8AC6-933D4FD9C927}") _IAcroAXDocShimEvents;
typedef TComInterface<_IAcroAXDocShimEvents, &DIID__IAcroAXDocShimEvents> _IAcroAXDocShimEventsPtr;
interface DECLSPEC_UUID("{3B813CE7-7C10-4F84-AD06-9DF76D97A9AA}") IAcroAXDocShim;
typedef TComInterface<IAcroAXDocShim, &IID_IAcroAXDocShim> IAcroAXDocShimPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IAcroAXDocShim AcroPDF;
typedef TComInterface<AcroPDF, &IID_IAcroAXDocShim> AcroPDFPtr;

#define LIBID_OF_AcroPDF (&LIBID_AcroPDFLib)
// *********************************************************************//
// Interface: _IAcroAXDocShimEvents
// Flags:     (4096) Dispatchable
// GUID:      {E790E1D1-9DE8-4853-8AC6-933D4FD9C927}
// *********************************************************************//
interface _IAcroAXDocShimEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnError()
  {
    _TDispID _dispid(/* OnError */ DISPID(1));
    OleProcedure(_dispid);
  }

  void __fastcall OnMessage()
  {
    _TDispID _dispid(/* OnMessage */ DISPID(2));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: IAcroAXDocShim
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B813CE7-7C10-4F84-AD06-9DF76D97A9AA}
// *********************************************************************//
interface IAcroAXDocShim : public IDispatch
{
public:
  // [1] property src
  virtual HRESULT STDMETHODCALLTYPE get_src(BSTR* pVal/*[out,retval]*/) = 0;
  // [1] property src
  virtual HRESULT STDMETHODCALLTYPE set_src(BSTR pVal/*[in]*/) = 0;
  // [2] method LoadFile
  virtual HRESULT STDMETHODCALLTYPE LoadFile(BSTR fileName/*[in]*/, TOLEBOOL* ret/*[out,retval]*/) = 0;
  // [3] method setShowToolbar
  virtual HRESULT STDMETHODCALLTYPE setShowToolbar(TOLEBOOL On/*[in]*/) = 0;
  // [4] method gotoFirstPage
  virtual HRESULT STDMETHODCALLTYPE gotoFirstPage(void) = 0;
  // [5] method gotoLastPage
  virtual HRESULT STDMETHODCALLTYPE gotoLastPage(void) = 0;
  // [6] method gotoNextPage
  virtual HRESULT STDMETHODCALLTYPE gotoNextPage(void) = 0;
  // [7] method gotoPreviousPage
  virtual HRESULT STDMETHODCALLTYPE gotoPreviousPage(void) = 0;
  // [8] method setCurrentPage
  virtual HRESULT STDMETHODCALLTYPE setCurrentPage(long n/*[in]*/) = 0;
  // [9] method goForwardStack
  virtual HRESULT STDMETHODCALLTYPE goForwardStack(void) = 0;
  // [10] method goBackwardStack
  virtual HRESULT STDMETHODCALLTYPE goBackwardStack(void) = 0;
  // [11] method setPageMode
  virtual HRESULT STDMETHODCALLTYPE setPageMode(BSTR pageMode/*[in]*/) = 0;
  // [12] method setLayoutMode
  virtual HRESULT STDMETHODCALLTYPE setLayoutMode(BSTR layoutMode/*[in]*/) = 0;
  // [13] method setNamedDest
  virtual HRESULT STDMETHODCALLTYPE setNamedDest(BSTR namedDest/*[in]*/) = 0;
  // [14] method Print
  virtual HRESULT STDMETHODCALLTYPE Print(void) = 0;
  // [15] method printWithDialog
  virtual HRESULT STDMETHODCALLTYPE printWithDialog(void) = 0;
  // [16] method setZoom
  virtual HRESULT STDMETHODCALLTYPE setZoom(float percent/*[in]*/) = 0;
  // [17] method setZoomScroll
  virtual HRESULT STDMETHODCALLTYPE setZoomScroll(float percent/*[in]*/, float left/*[in]*/, 
                                                  float top/*[in]*/) = 0;
  // [18] method setView
  virtual HRESULT STDMETHODCALLTYPE setView(BSTR viewMode/*[in]*/) = 0;
  // [19] method setViewScroll
  virtual HRESULT STDMETHODCALLTYPE setViewScroll(BSTR viewMode/*[in]*/, float offset/*[in]*/) = 0;
  // [20] method setViewRect
  virtual HRESULT STDMETHODCALLTYPE setViewRect(float left/*[in]*/, float top/*[in]*/, 
                                                float width/*[in]*/, float height/*[in]*/) = 0;
  // [21] method printPages
  virtual HRESULT STDMETHODCALLTYPE printPages(long from/*[in]*/, long to/*[in]*/) = 0;
  // [22] method printPagesFit
  virtual HRESULT STDMETHODCALLTYPE printPagesFit(long from/*[in]*/, long to/*[in]*/, 
                                                  TOLEBOOL shrinkToFit/*[in]*/) = 0;
  // [23] method printAll
  virtual HRESULT STDMETHODCALLTYPE printAll(void) = 0;
  // [24] method printAllFit
  virtual HRESULT STDMETHODCALLTYPE printAllFit(TOLEBOOL shrinkToFit/*[in]*/) = 0;
  // [25] method setShowScrollbars
  virtual HRESULT STDMETHODCALLTYPE setShowScrollbars(TOLEBOOL On/*[in]*/) = 0;
  // [26] method GetVersions
  virtual HRESULT STDMETHODCALLTYPE GetVersions(TVariant* ret/*[out,retval]*/) = 0;
  // [27] method setCurrentHightlight
  virtual HRESULT STDMETHODCALLTYPE setCurrentHightlight(long a/*[in]*/, long b/*[in]*/, 
                                                         long c/*[in]*/, long d/*[in]*/) = 0;
  // [28] method setCurrentHighlight
  virtual HRESULT STDMETHODCALLTYPE setCurrentHighlight(long a/*[in]*/, long b/*[in]*/, 
                                                        long c/*[in]*/, long d/*[in]*/) = 0;
  // [29] method postMesage
  virtual HRESULT STDMETHODCALLTYPE postMessage(TVariant strArray/*[in]*/) = 0;
  // [30] property messageHandler
  virtual HRESULT STDMETHODCALLTYPE get_messageHandler(TVariant* pVarOut/*[out,retval]*/) = 0;
  // [30] property messageHandler
  virtual HRESULT STDMETHODCALLTYPE set_messageHandler(TVariant pVarOut/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_src(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_src((BSTR*)&pVal));
    return pVal;
  }

  TOLEBOOL __fastcall LoadFile(BSTR fileName/*[in]*/)
  {
    TOLEBOOL ret;
    OLECHECK(this->LoadFile(fileName, (TOLEBOOL*)&ret));
    return ret;
  }

  TVariant __fastcall GetVersions(void)
  {
    TVariant ret;
    OLECHECK(this->GetVersions((TVariant*)&ret));
    return ret;
  }

  TVariant __fastcall get_messageHandler(void)
  {
    TVariant pVarOut;
    OLECHECK(this->get_messageHandler((TVariant*)&pVarOut));
    return pVarOut;
  }


  __property   BSTR            src = {read = get_src, write = set_src};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _IAcroAXDocShimEvents
// Flags:     (4096) Dispatchable
// GUID:      {E790E1D1-9DE8-4853-8AC6-933D4FD9C927}
// *********************************************************************//
template <class T>
class _IAcroAXDocShimEventsDispT : public TAutoDriver<_IAcroAXDocShimEvents>
{
public:
  _IAcroAXDocShimEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnError();
  void            __fastcall OnMessage();

};
typedef _IAcroAXDocShimEventsDispT<_IAcroAXDocShimEvents> _IAcroAXDocShimEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIAcroAXDocShim
// Interface: IAcroAXDocShim
// *********************************************************************//
template <class T /* IAcroAXDocShim */ >
class TCOMIAcroAXDocShimT : public TComInterface<IAcroAXDocShim>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAcroAXDocShimT() {}
  TCOMIAcroAXDocShimT(IAcroAXDocShim *intf, bool addRef = false) : TComInterface<IAcroAXDocShim>(intf, addRef) {}
  TCOMIAcroAXDocShimT(const TCOMIAcroAXDocShimT& src) : TComInterface<IAcroAXDocShim>(src) {}
  TCOMIAcroAXDocShimT& operator=(const TCOMIAcroAXDocShimT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_src(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_src(void);
  HRESULT         __fastcall set_src(BSTR pVal/*[in]*/);
  HRESULT         __fastcall LoadFile(BSTR fileName/*[in]*/, TOLEBOOL* ret/*[out,retval]*/);
  TOLEBOOL        __fastcall LoadFile(BSTR fileName/*[in]*/);
  HRESULT         __fastcall setShowToolbar(TOLEBOOL On/*[in]*/);
  HRESULT         __fastcall gotoFirstPage(void);
  HRESULT         __fastcall gotoLastPage(void);
  HRESULT         __fastcall gotoNextPage(void);
  HRESULT         __fastcall gotoPreviousPage(void);
  HRESULT         __fastcall setCurrentPage(long n/*[in]*/);
  HRESULT         __fastcall goForwardStack(void);
  HRESULT         __fastcall goBackwardStack(void);
  HRESULT         __fastcall setPageMode(BSTR pageMode/*[in]*/);
  HRESULT         __fastcall setLayoutMode(BSTR layoutMode/*[in]*/);
  HRESULT         __fastcall setNamedDest(BSTR namedDest/*[in]*/);
  HRESULT         __fastcall Print(void);
  HRESULT         __fastcall printWithDialog(void);
  HRESULT         __fastcall setZoom(float percent/*[in]*/);
  HRESULT         __fastcall setZoomScroll(float percent/*[in]*/, float left/*[in]*/, 
                                           float top/*[in]*/);
  HRESULT         __fastcall setView(BSTR viewMode/*[in]*/);
  HRESULT         __fastcall setViewScroll(BSTR viewMode/*[in]*/, float offset/*[in]*/);
  HRESULT         __fastcall setViewRect(float left/*[in]*/, float top/*[in]*/, float width/*[in]*/, 
                                         float height/*[in]*/);
  HRESULT         __fastcall printPages(long from/*[in]*/, long to/*[in]*/);
  HRESULT         __fastcall printPagesFit(long from/*[in]*/, long to/*[in]*/, 
                                           TOLEBOOL shrinkToFit/*[in]*/);
  HRESULT         __fastcall printAll(void);
  HRESULT         __fastcall printAllFit(TOLEBOOL shrinkToFit/*[in]*/);
  HRESULT         __fastcall setShowScrollbars(TOLEBOOL On/*[in]*/);
  HRESULT         __fastcall GetVersions(TVariant* ret/*[out,retval]*/);
  TVariant        __fastcall GetVersions(void);
  HRESULT         __fastcall setCurrentHightlight(long a/*[in]*/, long b/*[in]*/, long c/*[in]*/, 
                                                  long d/*[in]*/);
  HRESULT         __fastcall setCurrentHighlight(long a/*[in]*/, long b/*[in]*/, long c/*[in]*/, 
                                                 long d/*[in]*/);
  HRESULT         __fastcall postMessage(TVariant strArray/*[in]*/);
  HRESULT         __fastcall get_messageHandler(TVariant* pVarOut/*[out,retval]*/);
  TVariant        __fastcall get_messageHandler(void);
  HRESULT         __fastcall set_messageHandler(TVariant pVarOut/*[in]*/);

  __property   BSTR            src = {read = get_src, write = set_src};
};
typedef TCOMIAcroAXDocShimT<IAcroAXDocShim> TCOMIAcroAXDocShim;

// *********************************************************************//
// DispIntf:  IAcroAXDocShim
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B813CE7-7C10-4F84-AD06-9DF76D97A9AA}
// *********************************************************************//
template<class T>
class IAcroAXDocShimDispT : public TAutoDriver<IAcroAXDocShim>
{
public:
  IAcroAXDocShimDispT(){}

  IAcroAXDocShimDispT(IAcroAXDocShim *pintf)
  {
    TAutoDriver<IAcroAXDocShim>::Bind(pintf, false);
  }

  IAcroAXDocShimDispT(IAcroAXDocShimPtr pintf)
  {
    TAutoDriver<IAcroAXDocShim>::Bind(pintf, true);
  }

  IAcroAXDocShimDispT& operator=(IAcroAXDocShim *pintf)
  {
    TAutoDriver<IAcroAXDocShim>::Bind(pintf, false);
    return *this;
  }

  IAcroAXDocShimDispT& operator=(IAcroAXDocShimPtr pintf)
  {
    TAutoDriver<IAcroAXDocShim>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault(/*Binds to new instance of CoClass AcroPDF*/)
  {
    return OLECHECK(Bind(CLSID_AcroPDF));
  }

  HRESULT BindRunning(/*Binds to a running instance of CoClass AcroPDF*/)
  {
    return BindToActive(CLSID_AcroPDF);
  }

  HRESULT         __fastcall get_src(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_src(void);
  HRESULT         __fastcall set_src(BSTR pVal/*[in]*/);
  HRESULT         __fastcall LoadFile(BSTR fileName/*[in]*/, TOLEBOOL* ret/*[out,retval]*/);
  TOLEBOOL        __fastcall LoadFile(BSTR fileName/*[in]*/);
  HRESULT         __fastcall setShowToolbar(TOLEBOOL On/*[in]*/);
  HRESULT         __fastcall gotoFirstPage();
  HRESULT         __fastcall gotoLastPage();
  HRESULT         __fastcall gotoNextPage();
  HRESULT         __fastcall gotoPreviousPage();
  HRESULT         __fastcall setCurrentPage(long n/*[in]*/);
  HRESULT         __fastcall goForwardStack();
  HRESULT         __fastcall goBackwardStack();
  HRESULT         __fastcall setPageMode(BSTR pageMode/*[in]*/);
  HRESULT         __fastcall setLayoutMode(BSTR layoutMode/*[in]*/);
  HRESULT         __fastcall setNamedDest(BSTR namedDest/*[in]*/);
  HRESULT         __fastcall Print();
  HRESULT         __fastcall printWithDialog();
  HRESULT         __fastcall setZoom(float percent/*[in]*/);
  HRESULT         __fastcall setZoomScroll(float percent/*[in]*/, float left/*[in]*/, 
                                           float top/*[in]*/);
  HRESULT         __fastcall setView(BSTR viewMode/*[in]*/);
  HRESULT         __fastcall setViewScroll(BSTR viewMode/*[in]*/, float offset/*[in]*/);
  HRESULT         __fastcall setViewRect(float left/*[in]*/, float top/*[in]*/, float width/*[in]*/
                                         , float height/*[in]*/);
  HRESULT         __fastcall printPages(long from/*[in]*/, long to/*[in]*/);
  HRESULT         __fastcall printPagesFit(long from/*[in]*/, long to/*[in]*/, 
                                           TOLEBOOL shrinkToFit/*[in]*/);
  HRESULT         __fastcall printAll();
  HRESULT         __fastcall printAllFit(TOLEBOOL shrinkToFit/*[in]*/);
  HRESULT         __fastcall setShowScrollbars(TOLEBOOL On/*[in]*/);
  HRESULT         __fastcall GetVersions(TVariant* ret/*[out,retval]*/);
  TVariant        __fastcall GetVersions(void);
  HRESULT         __fastcall setCurrentHightlight(long a/*[in]*/, long b/*[in]*/, long c/*[in]*/, 
                                                  long d/*[in]*/);
  HRESULT         __fastcall setCurrentHighlight(long a/*[in]*/, long b/*[in]*/, long c/*[in]*/, 
                                                 long d/*[in]*/);
  HRESULT         __fastcall postMessage(TVariant strArray/*[in]*/);
  HRESULT         __fastcall get_messageHandler(TVariant* pVarOut/*[out,retval]*/);
  TVariant        __fastcall get_messageHandler(void);
  HRESULT         __fastcall set_messageHandler(TVariant pVarOut/*[in]*/);

  __property   BSTR            src = {read = get_src, write = set_src};
};
typedef IAcroAXDocShimDispT<IAcroAXDocShim> IAcroAXDocShimDisp;

// *********************************************************************//
// DispIntf:  _IAcroAXDocShimEvents
// Flags:     (4096) Dispatchable
// GUID:      {E790E1D1-9DE8-4853-8AC6-933D4FD9C927}
// *********************************************************************//
template <class T> void __fastcall
_IAcroAXDocShimEventsDispT<T>::OnError()
{
  _TDispID _dispid(/* OnError */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_IAcroAXDocShimEventsDispT<T>::OnMessage()
{
  _TDispID _dispid(/* OnMessage */ DISPID(2));
  OleProcedure(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIAcroAXDocShim
// Interface: IAcroAXDocShim
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::get_src(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_src(pVal);
}

template <class T> BSTR __fastcall
TCOMIAcroAXDocShimT<T>::get_src(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_src((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::set_src(BSTR pVal/*[in]*/)
{
  return (*this)->set_src(pVal);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::LoadFile(BSTR fileName/*[in]*/, TOLEBOOL* ret/*[out,retval]*/)
{
  return (*this)->LoadFile(fileName, ret);
}

template <class T> TOLEBOOL __fastcall
TCOMIAcroAXDocShimT<T>::LoadFile(BSTR fileName/*[in]*/)
{
  TOLEBOOL ret;
  OLECHECK(this->LoadFile(fileName, (TOLEBOOL*)&ret));
  return ret;
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setShowToolbar(TOLEBOOL On/*[in]*/)
{
  return (*this)->setShowToolbar(On);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::gotoFirstPage(void)
{
  return (*this)->gotoFirstPage();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::gotoLastPage(void)
{
  return (*this)->gotoLastPage();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::gotoNextPage(void)
{
  return (*this)->gotoNextPage();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::gotoPreviousPage(void)
{
  return (*this)->gotoPreviousPage();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setCurrentPage(long n/*[in]*/)
{
  return (*this)->setCurrentPage(n);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::goForwardStack(void)
{
  return (*this)->goForwardStack();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::goBackwardStack(void)
{
  return (*this)->goBackwardStack();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setPageMode(BSTR pageMode/*[in]*/)
{
  return (*this)->setPageMode(pageMode);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setLayoutMode(BSTR layoutMode/*[in]*/)
{
  return (*this)->setLayoutMode(layoutMode);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setNamedDest(BSTR namedDest/*[in]*/)
{
  return (*this)->setNamedDest(namedDest);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::Print(void)
{
  return (*this)->Print();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::printWithDialog(void)
{
  return (*this)->printWithDialog();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setZoom(float percent/*[in]*/)
{
  return (*this)->setZoom(percent);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setZoomScroll(float percent/*[in]*/, float left/*[in]*/, float top/*[in]*/)
{
  return (*this)->setZoomScroll(percent, left, top);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setView(BSTR viewMode/*[in]*/)
{
  return (*this)->setView(viewMode);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setViewScroll(BSTR viewMode/*[in]*/, float offset/*[in]*/)
{
  return (*this)->setViewScroll(viewMode, offset);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setViewRect(float left/*[in]*/, float top/*[in]*/, float width/*[in]*/, 
                                    float height/*[in]*/)
{
  return (*this)->setViewRect(left, top, width, height);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::printPages(long from/*[in]*/, long to/*[in]*/)
{
  return (*this)->printPages(from, to);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::printPagesFit(long from/*[in]*/, long to/*[in]*/, 
                                      TOLEBOOL shrinkToFit/*[in]*/)
{
  return (*this)->printPagesFit(from, to, shrinkToFit);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::printAll(void)
{
  return (*this)->printAll();
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::printAllFit(TOLEBOOL shrinkToFit/*[in]*/)
{
  return (*this)->printAllFit(shrinkToFit);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setShowScrollbars(TOLEBOOL On/*[in]*/)
{
  return (*this)->setShowScrollbars(On);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::GetVersions(TVariant* ret/*[out,retval]*/)
{
  return (*this)->GetVersions(ret);
}

template <class T> TVariant __fastcall
TCOMIAcroAXDocShimT<T>::GetVersions(void)
{
  TVariant ret;
  OLECHECK(this->GetVersions((TVariant*)&ret));
  return ret;
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setCurrentHightlight(long a/*[in]*/, long b/*[in]*/, long c/*[in]*/, 
                                             long d/*[in]*/)
{
  return (*this)->setCurrentHightlight(a, b, c, d);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::setCurrentHighlight(long a/*[in]*/, long b/*[in]*/, long c/*[in]*/, 
                                            long d/*[in]*/)
{
  return (*this)->setCurrentHighlight(a, b, c, d);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::postMessage(TVariant strArray/*[in]*/)
{
  return (*this)->postMessage(strArray);
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::get_messageHandler(TVariant* pVarOut/*[out,retval]*/)
{
  return (*this)->get_messageHandler(pVarOut);
}

template <class T> TVariant __fastcall
TCOMIAcroAXDocShimT<T>::get_messageHandler(void)
{
  TVariant pVarOut;
  OLECHECK(this->get_messageHandler((TVariant*)&pVarOut));
  return pVarOut;
}

template <class T> HRESULT __fastcall
TCOMIAcroAXDocShimT<T>::set_messageHandler(TVariant pVarOut/*[in]*/)
{
  return (*this)->set_messageHandler(pVarOut);
}

// *********************************************************************//
// DispIntf:  IAcroAXDocShim
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B813CE7-7C10-4F84-AD06-9DF76D97A9AA}
// *********************************************************************//
template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::get_src(BSTR* pVal/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("src"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAcroAXDocShimDispT<T>::get_src(void)
{
  BSTR pVal;
  this->get_src((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::set_src(BSTR pVal/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("src"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::LoadFile(BSTR fileName/*[in]*/, TOLEBOOL* ret/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("LoadFile"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = fileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(ret /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IAcroAXDocShimDispT<T>::LoadFile(BSTR fileName/*[in]*/)
{
  TOLEBOOL ret;
  this->LoadFile(fileName, (TOLEBOOL*)&ret);
  return ret;
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setShowToolbar(TOLEBOOL On/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setShowToolbar"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = On /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::gotoFirstPage()
{
  static _TDispID _dispid(*this, OLETEXT("gotoFirstPage"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::gotoLastPage()
{
  static _TDispID _dispid(*this, OLETEXT("gotoLastPage"), DISPID(5));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::gotoNextPage()
{
  static _TDispID _dispid(*this, OLETEXT("gotoNextPage"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::gotoPreviousPage()
{
  static _TDispID _dispid(*this, OLETEXT("gotoPreviousPage"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setCurrentPage(long n/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setCurrentPage"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = n /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::goForwardStack()
{
  static _TDispID _dispid(*this, OLETEXT("goForwardStack"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::goBackwardStack()
{
  static _TDispID _dispid(*this, OLETEXT("goBackwardStack"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setPageMode(BSTR pageMode/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setPageMode"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pageMode /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setLayoutMode(BSTR layoutMode/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setLayoutMode"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = layoutMode /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setNamedDest(BSTR namedDest/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setNamedDest"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = namedDest /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::Print()
{
  static _TDispID _dispid(*this, OLETEXT("Print"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::printWithDialog()
{
  static _TDispID _dispid(*this, OLETEXT("printWithDialog"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setZoom(float percent/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setZoom"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = percent /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setZoomScroll(float percent/*[in]*/, float left/*[in]*/, float top/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setZoomScroll"), DISPID(17));
  TAutoArgs<3> _args;
  _args[1] = percent /*[VT_R4:0]*/;
  _args[2] = left /*[VT_R4:0]*/;
  _args[3] = top /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setView(BSTR viewMode/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setView"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = viewMode /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setViewScroll(BSTR viewMode/*[in]*/, float offset/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setViewScroll"), DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = viewMode /*[VT_BSTR:0]*/;
  _args[2] = offset /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setViewRect(float left/*[in]*/, float top/*[in]*/, float width/*[in]*/, 
                                    float height/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setViewRect"), DISPID(20));
  TAutoArgs<4> _args;
  _args[1] = left /*[VT_R4:0]*/;
  _args[2] = top /*[VT_R4:0]*/;
  _args[3] = width /*[VT_R4:0]*/;
  _args[4] = height /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::printPages(long from/*[in]*/, long to/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("printPages"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = from /*[VT_I4:0]*/;
  _args[2] = to /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::printPagesFit(long from/*[in]*/, long to/*[in]*/, 
                                      TOLEBOOL shrinkToFit/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("printPagesFit"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = from /*[VT_I4:0]*/;
  _args[2] = to /*[VT_I4:0]*/;
  _args[3] = shrinkToFit /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::printAll()
{
  static _TDispID _dispid(*this, OLETEXT("printAll"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::printAllFit(TOLEBOOL shrinkToFit/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("printAllFit"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = shrinkToFit /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setShowScrollbars(TOLEBOOL On/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setShowScrollbars"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = On /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::GetVersions(TVariant* ret/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("GetVersions"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ret /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IAcroAXDocShimDispT<T>::GetVersions(void)
{
  TVariant ret;
  this->GetVersions((TVariant*)&ret);
  return ret;
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setCurrentHightlight(long a/*[in]*/, long b/*[in]*/, long c/*[in]*/, 
                                             long d/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setCurrentHightlight"), DISPID(27));
  TAutoArgs<4> _args;
  _args[1] = a /*[VT_I4:0]*/;
  _args[2] = b /*[VT_I4:0]*/;
  _args[3] = c /*[VT_I4:0]*/;
  _args[4] = d /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::setCurrentHighlight(long a/*[in]*/, long b/*[in]*/, long c/*[in]*/, 
                                            long d/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("setCurrentHighlight"), DISPID(28));
  TAutoArgs<4> _args;
  _args[1] = a /*[VT_I4:0]*/;
  _args[2] = b /*[VT_I4:0]*/;
  _args[3] = c /*[VT_I4:0]*/;
  _args[4] = d /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::postMessage(TVariant strArray/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("postMessage"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = strArray /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::get_messageHandler(TVariant* pVarOut/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("messageHandler"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVarOut /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IAcroAXDocShimDispT<T>::get_messageHandler(void)
{
  TVariant pVarOut;
  this->get_messageHandler((TVariant*)&pVarOut);
  return pVarOut;
}

template <class T> HRESULT __fastcall
IAcroAXDocShimDispT<T>::set_messageHandler(TVariant pVarOut/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("messageHandler"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = pVarOut /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : AcroPDF
// Event Interface : _IAcroAXDocShimEvents
// *********************************************************************//
template <class T>
class TEvents_AcroPDF : public IConnectionPointImpl<T,
                                                 &DIID__IAcroAXDocShimEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  void            Fire_OnError(void);
  void            Fire_OnMessage(void);
protected:
  _IAcroAXDocShimEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_AcroPDF<T>::Fire_OnError(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnError();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AcroPDF<T>::Fire_OnMessage(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMessage();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Acropdflib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Acropdflib_tlb;
#endif

#pragma option pop

#endif // __AcroPDFLib_TLB_h__
